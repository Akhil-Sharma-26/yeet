+      #include<iostream>    #include<iostream>
- #include<iostream>         #include<iostream>
-              
+      using namespace std;    using namespace std;
- void test_init(); void test_init();    void test_init();
+      void test_commit();    void test_commit();
+      void abc();    void abc();
-              
- void test_commit();         void test_commit();
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- void YeetStatus(){         void YeetStatus(){
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
-     std::cout<<"Hello"<<std::endl;             std::cout<<"Hello"<<std::endl;
-    }         }
+          // Getting list of all files        // Getting list of all files
-              
-              
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
+          }        }
+              
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
+              return;            return;
+          }        }
+              
+          bool space = false;        bool space = false;
+          std::string PathofFile, oid;        std::string PathofFile, oid;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
+          std::vector<std::string> oids;        std::vector<std::string> oids;
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
+                  PathofFile = "";                PathofFile = "";
+                  space = !space; continue;                space = !space; continue;
+              }                   }       
+              
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
+                  oids.push_back(oid);                oids.push_back(oid);
+                  oid = "";                oid = "";
+                  space = !space; continue;                space = !space; continue;
+              }                 }     
+                          
+              if(!space){            if(!space){
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
+              }            }
+              else{            else{
+                  oid += StoreData[i];                oid += StoreData[i];
+              }            }
+          }        }
+              
+          // Main Loop        // Main Loop
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
+              
+              int additions,deletions;            int additions,deletions;
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
+              
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
+                  std::string NewFileContent="";                std::string NewFileContent="";
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
+              
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
+                      std::string line;                    std::string line;
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
+                      }                    }
+                      NowFile.close();                    NowFile.close();
+                  }                }
+              
+                  // Call Diffs algo here                // Call Diffs algo here
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
+                  if(ans==0) {                if(ans==0) {
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
+                      continue;                    continue;
+                  }                            }            
+                                  
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                  for(auto it:diff_result){                for(auto it:diff_result){
+                                          
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      }                    }
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
+              
+                  // don't show file if nothing changed                // don't show file if nothing changed
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
+                      continue;                    continue;
+                  }                }
+              
+                  // The file we are checking:                // The file we are checking:
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
+                                  
+                  // Printing the diffs                // Printing the diffs
+                  Printer printer;                Printer printer;
+                  printer.print(diff_result);                printer.print(diff_result);
+              
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
+              } else {            } else {
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
+              }            }
+          }        }
+              
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
+                      std::string line;                    std::string line;
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                      newFile.close();                    newFile.close();
+                  }                }
+              }            }
+          }        }
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
+              std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
+          }        }
+          else{        else{
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+          }        }
+              
+              
+         }    }
+              
+              
+       /**    /**
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
+         *     *
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
+       * @return Nothing for now     * @return Nothing for now
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
+          try        try
+          {        {
+              // std::cout<<path;            // std::cout<<path;
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
+              }            }
+              
+              if(path.back()=='.')             if(path.back()=='.') 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
+              
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
+                  throw std::runtime_error("A yeet folder already exists in this directory. \n");                throw std::runtime_error("A yeet folder already exists in this directory. \n");
+                          
+              // std::system("tree .");            // std::system("tree .");
+              
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
+              
+              // Make HEAD file.            // Make HEAD file.
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
+                      headFile.close();                    headFile.close();
+                  } else {                } else {
+                      throw std::runtime_error("Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("Failed to create .yeet/HEAD file.\n");
+                  }                }
+              
+              // Making Description file.            // Making Description file.
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
+                  if(descFile.is_open()){                if(descFile.is_open()){
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile.close();                    descFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("Failed to create .yeet/description file.\n");                    throw std::runtime_error("Failed to create .yeet/description file.\n");
+                  }                }
+                          
+              // Making config file            // Making config file
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
+                  if(configFile.is_open()){                if(configFile.is_open()){
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
+                      configFile.close();                    configFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("Failed to create .yeet/config file.\n");                    throw std::runtime_error("Failed to create .yeet/config file.\n");
+                  }                }
+              
+              // Making Store File            // Making Store File
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
+                  StoreFile.close();                StoreFile.close();
+              }            }
+              else {            else {
+                  throw std::runtime_error("Failed to create .yeet/Store file.\n");                throw std::runtime_error("Failed to create .yeet/Store file.\n");
+              }            }
+              
+              // Make Diff file.            // Make Diff file.
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
+                  DiffFile.close();                DiffFile.close();
+              } else {            } else {
+                  throw std::runtime_error("Failed to create .yeet/Diff file.\n");                throw std::runtime_error("Failed to create .yeet/Diff file.\n");
+              }            }
+              
+              std::cout << "Initialized yeet directory\n";            std::cout << "Initialized yeet directory\n";
+          }        }
+          catch(const std::exception& e){        catch(const std::exception& e){
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
+          }        }
+                  
+         }    }
+              
+      void YeetAdd(){    void YeetAdd(){
+              
+         }    }
+              
+              
+      // Commit Class:    // Commit Class:
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+       /**    /**
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
+              // This is my .gitignore            // This is my .gitignore
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              
+              if(IGNORE){            if(IGNORE){
+                  continue;                continue;
+              }            }
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
+              }             } 
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  continue;                continue;
+              }            }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
+          }        }
+         }    }
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
+          try        try
+          {        {
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                      _stat = "Exe";                    _stat = "Exe";
+                  }                }
+                   // content of Current FiLe.                 // content of Current FiLe.
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
+                  // Blob of that Data                // Blob of that Data
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
+                  // Storing that Blob                // Storing that Blob
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
+              }            }
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
+              }            }
+              // Save the store in /Store file            // Save the store in /Store file
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
+              
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+              
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
+                  std::string message; std::cout<<"\nPlease enter your Commit Message:\n";                std::string message; std::cout<<"\nPlease enter your Commit Message:\n";
+                  // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
+                  std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
+                  Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
+                  DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
+                  RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
+                  // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
+                  bool is_RootCommit = false;                bool is_RootCommit = false;
+                  if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
+                  if(is_RootCommit)std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit)std::cout<<"\nThis is a root commit"<<std::endl;
+                  std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
+              }            }
+          }        }
+          catch(const std::exception& e)        catch(const std::exception& e)
+          {        {
+              std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
+          }        }
+                  
+                  
+         }    }
+              
+      Commit::Commit(std::string path){    Commit::Commit(std::string path){
+          this->path = path;        this->path = path;
+         }    }
+              
+      Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
+          this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
+          this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
+          this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
+          this->parent=parent;        this->parent=parent;
+          this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
+         }    }
+              
+              
+       /**    /**
+      *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
+        */    */
+      std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
+          // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
+          std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
+              
+          // Obtain the size of the file.        // Obtain the size of the file.
+          const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
+          std::string result(sz, '\0');        std::string result(sz, '\0');
+              
+          // Read the whole file into the buffer.        // Read the whole file into the buffer.
+          f.read(result.data(), sz);        f.read(result.data(), sz);
+              
+          return result;        return result;
+         }    }
+              
+      // Blob Class    // Blob Class
+      Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
+          this->data = newdata;        this->data = newdata;
+          // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
+         }    }
+      std::string Blob::type(){    std::string Blob::type(){
+          return "blob";        return "blob";
+         }    }
+              
+      // Database Class    // Database Class
+      Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
+          this->path = path;        this->path = path;
+         }    }
+              
+      // Creating Hash    // Creating Hash
+      std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
+          CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
+          std::string hash;        std::string hash;
+          // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
+          CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
+              
+          return hash;        return hash;
+         }    }
+              
+      void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
+          std::string Data = object.data;        std::string Data = object.data;
+              
+          // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
+          // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-  /**         /**
+                  
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+          std::string content = Data;        std::string content = Data;
-    *          *
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+          Store[path] = object.oid;        Store[path] = object.oid;
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+                  
-  * @return Nothing for now          * @return Nothing for now
+          // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-  * @author Akhil Sharma          * @author Akhil Sharma
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-   */          */
+         }    }
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+              
-     try             try
+      void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     {             {
+          std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-         // std::cout<<path;                 // std::cout<<path;
+          std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-         // TODO: Consider all cases the user can enter here                 // TODO: Consider all cases the user can enter here
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+          // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+         }    }
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+      void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+          std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+          std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+          // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-         }                 }
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-              
+          // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-         if(path.back()=='.')                  if(path.back()=='.') 
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+         }    }
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+      // Tree Class    // Tree Class
-             throw std::runtime_error("A yeet folder already exists in this directory. \n");                     throw std::runtime_error("A yeet folder already exists in this directory. \n");
+              
-                          
+       /**    /**
-         // std::system("tree .");                 // std::system("tree .");
+       * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-              
+       * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+       * The entries contains all the files commit info.     * The entries contains all the files commit info.
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+        */     */
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+      std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+          std::ostringstream result;        std::ostringstream result;
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+          // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-         // Make HEAD file.                 // Make HEAD file.
+          // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+          // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+          // Sort entries by name        // Sort entries by name
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+              
-                 headFile.close();                         headFile.close();
+          std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-             } else {                     } else {
+              return a.name < b.name;            return a.name < b.name;
-                 throw std::runtime_error("Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("Failed to create .yeet/HEAD file.\n");
+          });        });
-             }                     }
-              
+          for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         // Making Description file.                 // Making Description file.
+              std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-             if(descFile.is_open()){                     if(descFile.is_open()){
+          }        }
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+          // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-                 descFile.close();                         descFile.close();
+          return result.str();        return result.str();
-             }                     }
+         }    }
-             else {                     else {
+              
-                 throw std::runtime_error("Failed to create .yeet/description file.\n");                         throw std::runtime_error("Failed to create .yeet/description file.\n");
+              
-             }                     }
+              
-                          
+      // Helper Functions:    // Helper Functions:
-         // Making config file                 // Making config file
+      std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+          std::stringstream ss;         std::stringstream ss; 
-             if(configFile.is_open()){                     if(configFile.is_open()){
+          ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+          return ss.str();        return ss.str();
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+         }    }
-                 configFile.close();                         configFile.close();
+              
-             }                     }
+              
-             else {                     else {
+      std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-                 throw std::runtime_error("Failed to create .yeet/config file.\n");                         throw std::runtime_error("Failed to create .yeet/config file.\n");
+          std::string ans="";        std::string ans="";
-             }                     }
+          ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-              
+          ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-         // Making Store File                 // Making Store File
+          return ans;        return ans;
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+         }    }
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+      std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-             StoreFile.close();                     StoreFile.close();
+          std::string ans="";        std::string ans="";
-         }                 }
+          for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         else {                 else {
+              if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             throw std::runtime_error("Failed to create .yeet/Store file.\n");                     throw std::runtime_error("Failed to create .yeet/Store file.\n");
+                  break;                break;
-         }                 }
+              }            }
-         std::cout << "Initialized yeet directory\n";                 std::cout << "Initialized yeet directory\n";
+              ans+=Objpath[i];            ans+=Objpath[i];
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          std::string act_ans="";        std::string act_ans="";
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+          for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-     }             }
+              act_ans+=ans[i];            act_ans+=ans[i];
-                  
+          }        }
-    }         }
+          return act_ans;        return act_ans;
-              
+         }    }
- void YeetAdd(){         void YeetAdd(){
-              
+      // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
-    }         }
+      //     z_stream stream;    //     z_stream stream;
-              
+      //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
-              
+      //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- // Commit Class:         // Commit Class:
+      //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
-  /**         /**
+      //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+      //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
-  * @author Akhil Sharma          * @author Akhil Sharma
+      //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
-   */          */
+      //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+              
-         // This is my .gitignore                 // This is my .gitignore
+      //     // intializing compression    //     // intializing compression
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+      //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
+              
-         if(IGNORE){                 if(IGNORE){
+      //     // compress:    //     // compress:
-             continue;                     continue;
+      //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-         }                 }
+              
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+      //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+              
-         }                  } 
+      //     deflateEnd(&stream);    //     deflateEnd(&stream);
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+      //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
-             continue;                     continue;
+      //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
-         }                 }
+      //     return compressed;    //     return compressed;
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+      // }    // }
-     }             }
+              
-    }         }
+      // refractored Compression Logic    // refractored Compression Logic
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     try             try
+          if (content.empty()) return "";        if (content.empty()) return "";
-     {             {
+              
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+          z_stream stream{};        z_stream stream{};
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+          stream.zalloc = nullptr;        stream.zalloc = nullptr;
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+          stream.zfree = nullptr;        stream.zfree = nullptr;
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+          stream.opaque = nullptr;        stream.opaque = nullptr;
-         ListFiles(path,FilePath);                 ListFiles(path,FilePath);
+          stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+          stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+              
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+          if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-                 _stat = "Exe";                         _stat = "Exe";
+              throw std::runtime_error("Failed to initialize zlib deflate.");            throw std::runtime_error("Failed to initialize zlib deflate.");
-             }                     }
+          }        }
-              // content of Current FiLe.                      // content of Current FiLe.
+              
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+          std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-             // Blob of that Data                     // Blob of that Data
+          stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+          stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-             // Storing that Blob                     // Storing that Blob
+              
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+          if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+              deflateEnd(&stream);            deflateEnd(&stream);
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+              throw std::runtime_error("Failed to deflate data.");            throw std::runtime_error("Failed to deflate data.");
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+          }        }
-         }                 }
+              
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+          compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+              
-         }                 }
+          if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         // Save the store in /Store file                 // Save the store in /Store file
+              throw std::runtime_error("Failed to finalize zlib deflate.");            throw std::runtime_error("Failed to finalize zlib deflate.");
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+          }        }
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+          return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+         }    }
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+              
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+      // Author Class:    // Author Class:
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+      std::string Author::to_stringg(){    std::string Author::to_stringg(){
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+          std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+          return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+         }    }
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+              
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+              
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+      // History    // History
-             std::string message; std::cout<<"\nPlease enter your Commit Message:\n";                     std::string message; std::cout<<"\nPlease enter your Commit Message:\n";
+      // Refs Class:    // Refs Class:
-             // std::cin>>message; // This doesn't takes any spaces " "                     // std::cin>>message; // This doesn't takes any spaces " "
+      // Constructor of Ref Class    // Constructor of Ref Class
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.                     std::getline(std::cin >> std::ws, message); // ws means white spaces.
+      Refs::Refs(std::string path){    Refs::Refs(std::string path){
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);                     Commit MainCommitObj(TreeObject.oid,author,message,parent);
+          this->path = path;        this->path = path;
-             DbObj.storeContentInDB(MainCommitObj);                     DbObj.storeContentInDB(MainCommitObj);
+         }    }
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                     RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
+              
-             // std::cout<<"the parent value: "<<parent<<std::endl;                     // std::cout<<"the parent value: "<<parent<<std::endl;
+      // @return the path to the HEAD file    // @return the path to the HEAD file
-             bool is_RootCommit = false;                     bool is_RootCommit = false;
+      std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-             if(parent=="ref:") is_RootCommit=true;                     if(parent=="ref:") is_RootCommit=true;
+          return path + "/.yeet/HEAD";        return path + "/.yeet/HEAD";
-             if(is_RootCommit)std::cout<<"\nThis is a root commit"<<std::endl;                     if(is_RootCommit)std::cout<<"\nThis is a root commit"<<std::endl;
+         }    }
-             std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                     std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
+              
-         }                 }
+      // Updates the HEAD file to the latest commit    // Updates the HEAD file to the latest commit
-     }             }
+      void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     catch(const std::exception& e)             catch(const std::exception& e)
+          // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     {             {
+          std::ofstream headFile( path+"/.yeet/HEAD");        std::ofstream headFile( path+"/.yeet/HEAD");
-         std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();                 std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
+          if (headFile.is_open()) {        if (headFile.is_open()) {
-     }             }
+              headFile << oid;            headFile << oid;
-                  
+              headFile.close();            headFile.close();
-                  
+          } else {        } else {
-    }         }
+              throw std::runtime_error("Failed to open .yeet/HEAD file.\n");            throw std::runtime_error("Failed to open .yeet/HEAD file.\n");
-              
+          }        }
- Commit::Commit(std::string path){         Commit::Commit(std::string path){
+         }    }
-     this->path = path;             this->path = path;
+              
-    }         }
+      std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-              
+          std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){         Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
+          std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     this->AuthorData=AuthorData;             this->AuthorData=AuthorData;
+          if(headFile){        if(headFile){
-     this->TreeOID=TreeOid;             this->TreeOID=TreeOid;
+              headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     this->CommitMessage=CommitMessage;             this->CommitMessage=CommitMessage;
+          }        }
-     this->parent=parent;             this->parent=parent;
+          return FileContent;        return FileContent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;             this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
+      void writeStoreinDB(std::unordered_map<std::string, std::string> Store){    void writeStoreinDB(std::unordered_map<std::string, std::string> Store){
-              
+          for(auto it:Store){        for(auto it:Store){
-  /**         /**
+              std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.         *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
+          }        }
-   */         */
+          std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
- std::string Commit::readFile(fs::path path){         std::string Commit::readFile(fs::path path){
+          std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     // Open the stream to 'lock' the file.             // Open the stream to 'lock' the file.
+          std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-     std::ifstream f(path, std::ios::in);             std::ifstream f(path, std::ios::in);
-              
+          std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     // Obtain the size of the file.             // Obtain the size of the file.
+          if(StoreFile.is_open()){        if(StoreFile.is_open()){
-     const auto sz = fs::file_size(path);             const auto sz = fs::file_size(path);
+              for(auto it:Store){            for(auto it:Store){
-     std::string result(sz, '\0');             std::string result(sz, '\0');
+                  StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-              
+              }            }
-     // Read the whole file into the buffer.             // Read the whole file into the buffer.
+              StoreFile.close();            StoreFile.close();
-     f.read(result.data(), sz);             f.read(result.data(), sz);
+          }        }
-              
+              
-     return result;             return result;
+          else {        else {
-    }         }
+              throw std::runtime_error("Failed to create .yeet/Store file.\n");            throw std::runtime_error("Failed to create .yeet/Store file.\n");
-              
+          }        }
- // Blob Class         // Blob Class
+         }    }
- Blob::Blob(std::string newdata){         Blob::Blob(std::string newdata){
+              
-     this->data = newdata;             this->data = newdata;
+              
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;             // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
+      // Helper Function for Listing Files:    // Helper Function for Listing Files:
-    }         }
+      void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
- std::string Blob::type(){         std::string Blob::type(){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-     return "blob";             return "blob";
+              // This is my .gitignore            // This is my .gitignore
-    }         }
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
- // Database Class         // Database Class
+              if(IGNORE){            if(IGNORE){
- Database::Database(std::filesystem::path path){         Database::Database(std::filesystem::path path){
+                  continue;                continue;
-     this->path = path;             this->path = path;
+              }            }
-    }         }
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-              
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
- // Creating Hash         // Creating Hash
+              }             } 
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot         std::string calculateSHA1Hex(const std::string& content) { // used some copilot
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-     CryptoPP::SHA1 sha1;             CryptoPP::SHA1 sha1;
+                  continue;                continue;
-     std::string hash;             std::string hash;
+              }            }
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal             // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));             CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
+          }        }
-              
+         }    }
-     return hash;             return hash;
+              
-    }         }
+      std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-              
+          std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
- void Database::storeContentInDB(Blob& object, const std::string& path){         void Database::storeContentInDB(Blob& object, const std::string& path){
+          if (!file) {        if (!file) {
-     std::string Data = object.data;             std::string Data = object.data;
+              std::cerr << "Cannot open file: " << filename << std::endl;            std::cerr << "Cannot open file: " << filename << std::endl;
-              
+              return {};            return {};
-     // ! I am putiing only the data in the content to simplify the process of diff             // ! I am putiing only the data in the content to simplify the process of diff
+          }        }
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+          return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-                  
+         }    }
-     std::string content = Data;             std::string content = Data;
+              
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+      std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     Store[path] = object.oid;             Store[path] = object.oid;
+          z_stream strm = {};        z_stream strm = {};
-                  
+          strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<object.oid<<std::endl; // Hashes are coming out.
+          strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+              
-    }         }
+          std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
+              
- void Database::storeContentInDB(Tree& object){         void Database::storeContentInDB(Tree& object){
+          if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-     std::string Data = object.ReturnS_tring();             std::string Data = object.ReturnS_tring();
+              std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+              return {};            return {};
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
+          }        }
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+              
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
+          int ret;        int ret;
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+          do {        do {
-    }         }
+              strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-              
+              strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
- void Database::storeContentInDB(Commit& object){         void Database::storeContentInDB(Commit& object){
+              
-     std::string Data = object.Writtenlines;             std::string Data = object.Writtenlines;
+              ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.             std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
+              
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.             // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
+              switch (ret) {            switch (ret) {
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
+                  case Z_NEED_DICT:                case Z_NEED_DICT:
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+                  case Z_DATA_ERROR:                case Z_DATA_ERROR:
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
+                  case Z_MEM_ERROR:                case Z_MEM_ERROR:
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+                      std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-    }         }
+                      inflateEnd(&strm);                    inflateEnd(&strm);
-              
+                      return {};                    return {};
- // Tree Class         // Tree Class
+                  case Z_BUF_ERROR:                case Z_BUF_ERROR:
-              
+                  case Z_OK:                case Z_OK:
-  /**         /**
+                      if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-  * This function converts the vector<TreeEntry> to string          * This function converts the vector<TreeEntry> to string
+                          // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-  * @return String, which will be used in storing the tree to Database.          * @return String, which will be used in storing the tree to Database.
+                          decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-  * The entries contains all the files commit info.          * The entries contains all the files commit info.
+                      }                    }
-   */          */
+                      break;                    break;
- std::string Tree::ReturnS_tring(){         std::string Tree::ReturnS_tring(){
+              }            }
-     std::ostringstream result;             std::ostringstream result;
+          } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
+              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream             // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
+          inflateEnd(&strm);        inflateEnd(&strm);
-     // Using the 'result' stream to concatenate strings and numbers             // Using the 'result' stream to concatenate strings and numbers
+          decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";             // result << "The answer to life, the universe, and everything is " << 42 << ".";
+          return decompressedData;        return decompressedData;
-     // Sort entries by name             // Sort entries by name
+         }    }
-              
+              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {             std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
+      std::string Inflate(std::string path){    std::string Inflate(std::string path){
-         return a.name < b.name;                 return a.name < b.name;
+              
-     });             });
+          std::string inputFilename = path;         std::string inputFilename = path; 
-              
+          std::string response = "";        std::string response = "";
-     for (const auto& entry : entries) {             for (const auto& entry : entries) {
+              
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;                 std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
+          auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";                 result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
+          if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-     }             }
+              
-     // std::cout<<result.str()<<std::endl;             // std::cout<<result.str()<<std::endl;
+          auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     return result.str();             return result.str();
+          if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-    }         }
-              
+          for(auto it:decompressedData){        for(auto it:decompressedData){
-              
+              response+=it;            response+=it;
-              
+          }        }
- // Helper Functions:         // Helper Functions:
+              
- std::string timeToString(time_t currtime) {          std::string timeToString(time_t currtime) { 
+          return response;        return response;
-     std::stringstream ss;              std::stringstream ss; 
+         }    }
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.             ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
+              
-     return ss.str();             return ss.str();
+      // Diffs Algo    // Diffs Algo
-    }         }
-              
+      // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
-              
+      std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
- std::string Directory_name_Helper(std::string Objpath){         std::string Directory_name_Helper(std::string Objpath){
+          std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string ans="";             std::string ans="";
+          std::string temp;        std::string temp;
-     ans+=Objpath[Objpath.size()-41];             ans+=Objpath[Objpath.size()-41];
+          for (char c : str) {        for (char c : str) {
-     ans+=Objpath[Objpath.size()-40];             ans+=Objpath[Objpath.size()-40];
+              if (c == '\n') {            if (c == '\n') {
-     return ans;             return ans;
+                  lines.push_back(temp);                lines.push_back(temp);
-    }         }
+                  temp.clear();                temp.clear();
-              
+              } else {            } else {
- std::string File_name_Helper(std::string Objpath){         std::string File_name_Helper(std::string Objpath){
+                  temp += c;                temp += c;
-     std::string ans="";             std::string ans="";
+              }            }
-     for(int i=Objpath.size()-1;i>=0;i--){             for(int i=Objpath.size()-1;i>=0;i--){
+          }        }
-         if(Objpath[i]=='/'){                 if(Objpath[i]=='/'){
+          if (!temp.empty()) {        if (!temp.empty()) {
-             break;                     break;
+              lines.push_back(temp);            lines.push_back(temp);
-         }                 }
+          }        }
-         ans+=Objpath[i];                 ans+=Objpath[i];
+          return lines;        return lines;
-     }             }
+         }    }
-     std::string act_ans="";             std::string act_ans="";
+              
-     for(int i=ans.size()-1;i>=0;i--){             for(int i=ans.size()-1;i>=0;i--){
+      int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-         act_ans+=ans[i];                 act_ans+=ans[i];
+                               std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     }             }
+          int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     return act_ans;             return act_ans;
+          if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-    }         }
+          if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
+              
- // std::string Compressing_using_zlib(std::string content){         // std::string Compressing_using_zlib(std::string content){
+          int max_distance = n + m;        int max_distance = n + m;
- //     z_stream stream;         //     z_stream stream;
+          int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
- //     stream.zalloc = nullptr;         //     stream.zalloc = nullptr;
+          std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
- //     stream.zfree = nullptr;         //     stream.zfree = nullptr;
+          trace.clear();        trace.clear();
- //     stream.opaque = nullptr;         //     stream.opaque = nullptr;
+              
- //     stream.avail_in = content.size(); // input size         //     stream.avail_in = content.size(); // input size
+          diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
- //     uLongf compressed_size = compressBound(content.size());         //     uLongf compressed_size = compressBound(content.size());
+              
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og         //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
+          for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil         //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
+              for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
- //     Bytef* compressed_data = new Bytef[compressed_size];         //     Bytef* compressed_data = new Bytef[compressed_size];
+                  int x;                int x;
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type         //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
+                  if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-              
+                      // Move down                    // Move down
- //     // intializing compression         //     // intializing compression
+                      x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.         //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
+                  } else {                } else {
-              
+                      // Move right                    // Move right
- //     // compress:         //     // compress:
+                      x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
- //     deflate(&stream, Z_BEST_COMPRESSION);         //     deflate(&stream, Z_BEST_COMPRESSION);
+                  }                }
-              
+              
- //     compressed_size = stream.total_out;         //     compressed_size = stream.total_out;
+                  int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-              
+                  while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
- //     deflateEnd(&stream);         //     deflateEnd(&stream);
+                      ++x;                    ++x;
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data);         //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
+                      ++y;                    ++y;
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data         //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
+                  }                }
- //     return compressed;         //     return compressed;
+              
- // }         // }
+                  diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
+              
- // refractored Compression Logic         // refractored Compression Logic
+                  // If we've reached the end of both strings                // If we've reached the end of both strings
- std::string Compressing_using_zlib(std::string& content) {         std::string Compressing_using_zlib(std::string& content) {
+                  if (x >= n && y >= m) {                if (x >= n && y >= m) {
-     if (content.empty()) return "";             if (content.empty()) return "";
+                      trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-              
+                      return d;                    return d;
-     z_stream stream{};             z_stream stream{};
+                  }                }
-     stream.zalloc = nullptr;             stream.zalloc = nullptr;
+              }            }
-     stream.zfree = nullptr;             stream.zfree = nullptr;
+              trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     stream.opaque = nullptr;             stream.opaque = nullptr;
+          }        }
-     stream.avail_in = static_cast<uInt>(content.size());             stream.avail_in = static_cast<uInt>(content.size());
+              
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));             stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
+          return -1;  // This should never happen        return -1;  // This should never happen
-              
+         }    }
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {             if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
+              
-         throw std::runtime_error("Failed to initialize zlib deflate.");                 throw std::runtime_error("Failed to initialize zlib deflate.");
+              
-     }             }
-              
+      std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-     std::vector<unsigned char> compressedData(compressBound(content.size()));             std::vector<unsigned char> compressedData(compressBound(content.size()));
+                            const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-     stream.avail_out = compressedData.size();             stream.avail_out = compressedData.size();
+                            const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-     stream.next_out = compressedData.data();             stream.next_out = compressedData.data();
+                            int d) {                          int d) {
-              
+          std::vector<Edit> result;        std::vector<Edit> result;
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {             if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
+          if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-         deflateEnd(&stream);                 deflateEnd(&stream);
+                  
-         throw std::runtime_error("Failed to deflate data.");                 throw std::runtime_error("Failed to deflate data.");
+          int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     }             }
+          int offset = x + y;        int offset = x + y;
-              
+                  
-     compressedData.resize(stream.total_out);             compressedData.resize(stream.total_out);
+          for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-              
+              const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-     if (deflateEnd(&stream) != Z_OK) {             if (deflateEnd(&stream) != Z_OK) {
+              int k = x - y;            int k = x - y;
-         throw std::runtime_error("Failed to finalize zlib deflate.");                 throw std::runtime_error("Failed to finalize zlib deflate.");
+                          
-     }             }
+              bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-              
+              int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-     return std::string(compressedData.begin(), compressedData.end());             return std::string(compressedData.begin(), compressedData.end());
+              
-    }         }
+              int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-              
+              int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
+              
- // Author Class:         // Author Class:
+              while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
- std::string Author::to_stringg(){         std::string Author::to_stringg(){
+                  if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-     std::string thecurrTime=timeToString(time);             std::string thecurrTime=timeToString(time);
+                      result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-     return name+" <"+email+"> "+ thecurrTime;             return name+" <"+email+"> "+ thecurrTime;
+                  } else {                } else {
-    }         }
+                      result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-              
+                      result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-              
+                  }                }
- // History         // History
+                  --x;                --x;
- // Refs Class:         // Refs Class:
+                  --y;                --y;
- // Constructor of Ref Class         // Constructor of Ref Class
+              }            }
- Refs::Refs(std::string path){         Refs::Refs(std::string path){
+              
-     this->path = path;             this->path = path;
+              while (x > x_prev) {            while (x > x_prev) {
-    }         }
+                  result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-              
+                  --x;                --x;
- // @return the path to the HEAD file         // @return the path to the HEAD file
+              }            }
- std::string Refs::HEAD_path(){         std::string Refs::HEAD_path(){
+              
-     return path + "/.yeet/HEAD";             return path + "/.yeet/HEAD";
+              while (y > y_prev) {            while (y > y_prev) {
-    }         }
+                  result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-              
+                  --y;                --y;
- // Updates the HEAD file to the latest commit         // Updates the HEAD file to the latest commit
+              }            }
- void Refs::update_HEAD(std::string oid){         void Refs::update_HEAD(std::string oid){
+          }        }
-     // std::cout<<path<<std::endl;             // std::cout<<path<<std::endl;
+              
-     std::ofstream headFile( path+"/.yeet/HEAD");             std::ofstream headFile( path+"/.yeet/HEAD");
+          while (x > 0) {        while (x > 0) {
-     if (headFile.is_open()) {             if (headFile.is_open()) {
+              result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         headFile << oid;                 headFile << oid;
+              --x;            --x;
-         headFile.close();                 headFile.close();
+          }        }
-     } else {             } else {
+              
-         throw std::runtime_error("Failed to open .yeet/HEAD file.\n");                 throw std::runtime_error("Failed to open .yeet/HEAD file.\n");
+          while (y > 0) {        while (y > 0) {
-     }             }
+              result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-    }         }
+              --y;            --y;
-              
+          }        }
- std::string Refs::Read_HEAD(){         std::string Refs::Read_HEAD(){
+              
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);             std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
+          std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.             std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
+              
-     if(headFile){             if(headFile){
+          // for (const auto& edit : result) {        // for (const auto& edit : result) {
-         headFile>>FileContent; // All content of the file into the string                 headFile>>FileContent; // All content of the file into the string
+          //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     }             }
+          //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     return FileContent;             return FileContent;
+          //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-    }         }
+          //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-              
+          //             << std::endl;        //             << std::endl;
- void writeStoreinDB(std::unordered_map<std::string, std::string> Store){         void writeStoreinDB(std::unordered_map<std::string, std::string> Store){
+          // }        // }
-     for(auto it:Store){             for(auto it:Store){
+              
-         std::cout<<it.first<<" "<<it.second<<std::endl;                 std::cout<<it.first<<" "<<it.second<<std::endl;
+          return result;        return result;
-     }             }
+         }    }
-     std::cout<<"Hello"<<std::endl;             std::cout<<"Hello"<<std::endl;
+              
-     std::string _actualPath = fs::current_path();             std::string _actualPath = fs::current_path();
+              
-     std::cout<<_actualPath<<std::endl;             std::cout<<_actualPath<<std::endl;
+      // Storing diffs in file    // Storing diffs in file
-              
+      void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");             std::ofstream StoreFile(_actualPath+"/.yeet/Store");
+          std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if(StoreFile.is_open()){             if(StoreFile.is_open()){
+          if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for(auto it:Store){                 for(auto it:Store){
+              for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             StoreFile<<it.first<<" "<<it.second<<"\n";                     StoreFile<<it.first<<" "<<it.second<<"\n";
+                  std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-         }                 }
+                  std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-         StoreFile.close();                 StoreFile.close();
+                  std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-     }             }
+                  diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-              
+              }            }
-     else {             else {
+              diff_file.close();            diff_file.close();
-         throw std::runtime_error("Failed to create .yeet/Store file.\n");                 throw std::runtime_error("Failed to create .yeet/Store file.\n");
+          } else {        } else {
-     }             }
+              std::cerr << "Unable to open file for writing diffs" << std::endl;            std::cerr << "Unable to open file for writing diffs" << std::endl;
-    }         }
+          }        }
-              
+         }    }
-              
+      #include<string>    #include<string>
+      #include<vector>    #include<vector>
+      #include<filesystem>    #include<filesystem>
+      #include<zlib.h> // for database class    #include<zlib.h> // for database class
+      #include<cryptopp/sha.h> // for database class    #include<cryptopp/sha.h> // for database class
+      #include<iostream>    #include<iostream>
+      #include<fstream>    #include<fstream>
+      #include<sstream>    #include<sstream>
+      #include<iomanip> // for input/output manipulators    #include<iomanip> // for input/output manipulators
+      #include<algorithm>    #include<algorithm>
+      #include<unordered_set>    #include<unordered_set>
- #include<string>         #include<string>
- #include<vector>         #include<vector>
- #include<filesystem>         #include<filesystem>
- #include<zlib.h> // for database class         #include<zlib.h> // for database class
- #include<cryptopp/sha.h> // for database class         #include<cryptopp/sha.h> // for database class
- #include<iostream>         #include<iostream>
- #include<fstream>         #include<fstream>
- #include<sstream>         #include<sstream>
- #include<iomanip> // for input/output manipulators         #include<iomanip> // for input/output manipulators
- #include<algorithm>         #include<algorithm>
- #include<unordered_set>         #include<unordered_set>
-              
+      #include <iomanip>    #include <iomanip>
- void writeStoreinDB(std::unordered_map<std::string, std::string> Store);         void writeStoreinDB(std::unordered_map<std::string, std::string> Store);
-              
+              
+      // Structures:    // Structures:
- void YeetAdd();         void YeetAdd();
-              
+              
+      struct Edit    struct Edit
+         {    {
+          enum Type        enum Type
+          {        {
+              EQL,            EQL,
+              DEL,            DEL,
+              INS            INS
+          } type;        } type;
+          std::string old_line;        std::string old_line;
+          std::string new_line;        std::string new_line;
+              
+          Edit(Type t, const std::string &oldLine, const std::string &newLine)        Edit(Type t, const std::string &oldLine, const std::string &newLine)
+              : type(t), old_line(oldLine), new_line(newLine) {}            : type(t), old_line(oldLine), new_line(newLine) {}
+        };    };
+              
+              
+      // Helper Functions    // Helper Functions
+      void writeStoreinDB(std::unordered_map<std::string, std::string> Store);    void writeStoreinDB(std::unordered_map<std::string, std::string> Store);
+      void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath);    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath);
+      std::string Inflate(std::string path);    std::string Inflate(std::string path);
+      std::vector<std::string> splitIntoLines(const std::string& str);    std::vector<std::string> splitIntoLines(const std::string& str);
+      int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
+                               std::vector<std::vector<int>>& trace);                             std::vector<std::vector<int>>& trace);
+      void Backtrack(std::string a, std::string b, std::vector<std::vector<int>> trace);    void Backtrack(std::string a, std::string b, std::vector<std::vector<int>> trace);
+      std::vector<Edit> diff(const std::vector<std::string> &a, const std::vector<std::string> &b, const std::vector<std::vector<int>> &trace, int d);    std::vector<Edit> diff(const std::vector<std::string> &a, const std::vector<std::string> &b, const std::vector<std::vector<int>> &trace, int d);
+      void storeDiff(const std::vector<Edit>& edits);    void storeDiff(const std::vector<Edit>& edits);
+              
+      void YeetAdd();    void YeetAdd();
+              
+      void YeetStatus(std::string path);    void YeetStatus(std::string path);
+              
+      void YeetInit(std::string path);    void YeetInit(std::string path);
+              
+      class Tree;    class Tree;
+      class Blob{    class Blob{
+          public:        public:
+              std::string oid;            std::string oid;
+              std::string data;            std::string data;
+              // Will not work, As I have to make a custom hash function for this            // Will not work, As I have to make a custom hash function for this
+              // std::unordered_set<std::pair<std::string, std::string>> BlobStore;             // std::unordered_set<std::pair<std::string, std::string>> BlobStore; 
+              Blob(std::string data);            Blob(std::string data);
+              std::string type();            std::string type();
+        };    };
+              
+      class Commit{    class Commit{
+          public:        public:
+              std::string path;            std::string path;
+              std::string TreeOID;            std::string TreeOID;
+              std::string AuthorData;            std::string AuthorData;
+              std::string CommitMessage;            std::string CommitMessage;
+              std::string Writtenlines;            std::string Writtenlines;
+              std::string oid;            std::string oid;
+              std::string parent;            std::string parent;
+              std::vector<std::string> IGNORE = {".","..",".git",".yeet"};            std::vector<std::string> IGNORE = {".","..",".git",".yeet"};
+              Commit(std::string path);            Commit(std::string path);
+              Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);            Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);
+              void CommitMain(std::string path);            void CommitMain(std::string path);
+              void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);            void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);
+              std::string readFile(std::filesystem::path path);            std::string readFile(std::filesystem::path path);
+          };        };
+              
+      std::string Directory_name_Helper(std::string Objpath);    std::string Directory_name_Helper(std::string Objpath);
+      std::string File_name_Helper(std::string Objpath);    std::string File_name_Helper(std::string Objpath);
+       /**    /**
+       * The below code is setup of zlib compression     * The below code is setup of zlib compression
+          https://www.zlib.net/manual.html#Basic        https://www.zlib.net/manual.html#Basic
+          @param the content of be compressed        @param the content of be compressed
+          @return The compressed string        @return The compressed string
+        */    */
+      std::string Compressing_using_zlib(std::string& content);    std::string Compressing_using_zlib(std::string& content);
+      class Database{    class Database{
+          private:        private:
+              /**            /**
+               *  writing the object to disk             *  writing the object to disk
+               *  @param `oid`: The object id that is the hexadecimal hash of file content.             *  @param `oid`: The object id that is the hexadecimal hash of file content.
+               *  @param `content`: The content of the file             *  @param `content`: The content of the file
+               */             */
+              void write_object(std::string oid,std::string content){            void write_object(std::string oid,std::string content){
+                  try                try
+                  {                {
+                      std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);                    std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);
+                      // std::cout<<"The obj path"<<obj_path<<std::endl;                    // std::cout<<"The obj path"<<obj_path<<std::endl;
+                      std::string Dir_name = Directory_name_Helper(obj_path);                    std::string Dir_name = Directory_name_Helper(obj_path);
- void YeetStatus();         void YeetStatus();
+                      /** Actual File Path to the object created. */                    /** Actual File Path to the object created. */
-              
+                      std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();                    std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();
- void YeetInit(std::string path);         void YeetInit(std::string path);
+                      if(std::filesystem::exists(File_Path)) return;                    if(std::filesystem::exists(File_Path)) return;
-              
+                      // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;                    // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;
- class Tree;         class Tree;
+                      std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);                    std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);
- class Blob{         class Blob{
+                      /** res contains the return value of the `touch` command. */                    /** res contains the return value of the `touch` command. */
-     public:             public:
+                      int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());                    int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());
-         std::string oid;                 std::string oid;
+                      if(res != 0) std::runtime_error("touch is not working \n");                    if(res != 0) std::runtime_error("touch is not working \n");
-         std::string data;                 std::string data;
+                      // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;                    // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;
-         // Will not work, As I have to make a custom hash function for this                 // Will not work, As I have to make a custom hash function for this
+                      // Compressing the content                    // Compressing the content
-         // std::unordered_set<std::pair<std::string, std::string>> BlobStore;                  // std::unordered_set<std::pair<std::string, std::string>> BlobStore; 
+                      std::string compressed_data = Compressing_using_zlib(content);                    std::string compressed_data = Compressing_using_zlib(content);
-         Blob(std::string data);                 Blob(std::string data);
+                      std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);                    std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);
-         std::string type();                 std::string type();
+                      if(f.is_open()){                    if(f.is_open()){
-   };         };
+                          f.write(compressed_data.c_str(),compressed_data.size());                        f.write(compressed_data.c_str(),compressed_data.size());
-              
+                          f.close();                        f.close();
- class Commit{         class Commit{
+                      }                    }
-     public:             public:
+                      else{                    else{
-         std::string path;                 std::string path;
+                          std::runtime_error("Unable to write in Commit Blob Files!!");                        std::runtime_error("Unable to write in Commit Blob Files!!");
-         std::string TreeOID;                 std::string TreeOID;
+                      }                    }
-         std::string AuthorData;                 std::string AuthorData;
+                  }                }
-         std::string CommitMessage;                 std::string CommitMessage;
+                  catch(const std::exception& e)                catch(const std::exception& e)
-         std::string Writtenlines;                 std::string Writtenlines;
+                  {                {
-         std::string oid;                 std::string oid;
+                      std::cerr << e.what() << '\n';                    std::cerr << e.what() << '\n';
-         std::string parent;                 std::string parent;
+                  }                }
-         std::vector<std::string> IGNORE = {".","..",".git",".yeet"};                 std::vector<std::string> IGNORE = {".","..",".git",".yeet"};
+              }            }
-         Commit(std::string path);                 Commit(std::string path);
+          public:        public:
-         Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);                 Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);
+              std::filesystem::path path;            std::filesystem::path path;
-         void CommitMain(std::string path);                 void CommitMain(std::string path);
+              std::unordered_map<std::string, std::string> Store;            std::unordered_map<std::string, std::string> Store;
-         void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);                 void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);
+              Database(std::filesystem::path path);            Database(std::filesystem::path path);
-         std::string readFile(std::filesystem::path path);                 std::string readFile(std::filesystem::path path);
+              // Its storing the blob store also. ie the pair of file path and its oid.            // Its storing the blob store also. ie the pair of file path and its oid.
-     };             };
+              void storeContentInDB(Blob& object,const std::string &path);            void storeContentInDB(Blob& object,const std::string &path);
-              
+              void storeContentInDB(Tree& object);            void storeContentInDB(Tree& object);
- std::string Directory_name_Helper(std::string Objpath);         std::string Directory_name_Helper(std::string Objpath);
+              void storeContentInDB(Commit& object);            void storeContentInDB(Commit& object);
- std::string File_name_Helper(std::string Objpath);         std::string File_name_Helper(std::string Objpath);
+        };    };
-  /**         /**
+              
-  * The below code is setup of zlib compression          * The below code is setup of zlib compression
+       /**    /**
-     https://www.zlib.net/manual.html#Basic             https://www.zlib.net/manual.html#Basic
+       * An TreeEntry is a simple structure that exists to package up the information that Tree needs to     * An TreeEntry is a simple structure that exists to package up the information that Tree needs to
-     @param the content of be compressed             @param the content of be compressed
+      know about its contents: the filename, and the object ID. Tree will also need to know the mode    know about its contents: the filename, and the object ID. Tree will also need to know the mode
-     @return The compressed string             @return The compressed string
+      of each file, but for now all our source code is in non-executable regular files, so we will hard-    of each file, but for now all our source code is in non-executable regular files, so we will hard-
-   */          */
+      code the 100644 mode string that appears in the tree file.    code the 100644 mode string that appears in the tree file.
- std::string Compressing_using_zlib(std::string& content);         std::string Compressing_using_zlib(std::string& content);
+        */    */
- class Database{         class Database{
+      class TreeEntry {    class TreeEntry {
-     private:             private:
+      public:    public:
-         /**                 /**
+          // operator overloaded        // operator overloaded
-          *  writing the object to disk                  *  writing the object to disk
+          TreeEntry& operator=(const TreeEntry& other) {        TreeEntry& operator=(const TreeEntry& other) {
-          *  @param `oid`: The object id that is the hexadecimal hash of file content.                  *  @param `oid`: The object id that is the hexadecimal hash of file content.
+              if (this != &other) { // Protect against self-assignment            if (this != &other) { // Protect against self-assignment
-          *  @param `content`: The content of the file                  *  @param `content`: The content of the file
+                  this->name = other.name;                this->name = other.name;
-          */                  */
+                  this->oid = other.oid;                this->oid = other.oid;
-         void write_object(std::string oid,std::string content){                 void write_object(std::string oid,std::string content){
+                  this->stat = other.stat;                this->stat = other.stat;
-             try                     try
+              }            }
-             {                     {
+              return *this;            return *this;
-                 std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);                         std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);
+          }        }
-                 // std::cout<<"The obj path"<<obj_path<<std::endl;                         // std::cout<<"The obj path"<<obj_path<<std::endl;
+          // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below        // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below
-                 std::string Dir_name = Directory_name_Helper(obj_path);                         std::string Dir_name = Directory_name_Helper(obj_path);
+          TreeEntry(std::string name, std::string oid,std::string stat) {        TreeEntry(std::string name, std::string oid,std::string stat) {
-                 /** Actual File Path to the object created. */                         /** Actual File Path to the object created. */
+              this->name = name;            this->name = name;
-                 std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();                         std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();
+              this->oid = oid;            this->oid = oid;
-                 if(std::filesystem::exists(File_Path)) return;                         if(std::filesystem::exists(File_Path)) return;
+              this->stat = stat;            this->stat = stat;
-                 // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;                         // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;
+          }        }
-                 std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);                         std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);
+              
-                 /** res contains the return value of the `touch` command. */                         /** res contains the return value of the `touch` command. */
+          // copy constructor        // copy constructor
-                 int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());                         int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());
+          TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}        TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}
-                 if(res != 0) std::runtime_error("touch is not working \n");                         if(res != 0) std::runtime_error("touch is not working \n");
+          std::string name;        std::string name;
-                 // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;                         // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;
+          std::string oid;        std::string oid;
-                 // Compressing the content                         // Compressing the content
+          // TODO: Customize these codes later for yeet.        // TODO: Customize these codes later for yeet.
-                 std::string compressed_data = Compressing_using_zlib(content);                         std::string compressed_data = Compressing_using_zlib(content);
+          const std::string REGULAR_MODE = "100644";        const std::string REGULAR_MODE = "100644";
-                 std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);                         std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);
+          const std::string EXE_MODE = "100755";        const std::string EXE_MODE = "100755";
-                 if(f.is_open()){                         if(f.is_open()){
+              
-                     f.write(compressed_data.c_str(),compressed_data.size());                             f.write(compressed_data.c_str(),compressed_data.size());
+          std::string stat;        std::string stat;
-                     f.close();                             f.close();
+              
-                 }                         }
+        };    };
-                 else{                         else{
+              
-                     std::runtime_error("Unable to write in Commit Blob Files!!");                             std::runtime_error("Unable to write in Commit Blob Files!!");
+              
-                 }                         }
+      class Tree{    class Tree{
-             }                     }
+          // const std::string ENTRY_FORMAT = "Z*H40"; no need        // const std::string ENTRY_FORMAT = "Z*H40"; no need
-             catch(const std::exception& e)                     catch(const std::exception& e)
+          public:        public:
-             {                     {
+              
-                 std::cerr << e.what() << '\n';                         std::cerr << e.what() << '\n';
+              std::string oid;            std::string oid;
-             }                     }
+              std::vector<TreeEntry> entries;            std::vector<TreeEntry> entries;
-         }                 }
+              Tree(std::vector<TreeEntry>& entries){            Tree(std::vector<TreeEntry>& entries){
-     public:             public:
+                  this->entries = entries;                this->entries = entries;
-         std::filesystem::path path;                 std::filesystem::path path;
+              }            }
-         std::unordered_map<std::string, std::string> Store;                 std::unordered_map<std::string, std::string> Store;
+              
-         Database(std::filesystem::path path);                 Database(std::filesystem::path path);
+              std::string Type(){ return "tree"; }            std::string Type(){ return "tree"; }
-         // Its storing the blob store also. ie the pair of file path and its oid.                 // Its storing the blob store also. ie the pair of file path and its oid.
+              std::string ReturnS_tring();            std::string ReturnS_tring();
-         void storeContentInDB(Blob& object,const std::string &path);                 void storeContentInDB(Blob& object,const std::string &path);
+        };    };
-         void storeContentInDB(Tree& object);                 void storeContentInDB(Tree& object);
+              
-         void storeContentInDB(Commit& object);                 void storeContentInDB(Commit& object);
+              
-   };         };
+      class Author{    class Author{
-              
+          public:        public:
-  /**         /**
+              std::string name;            std::string name;
-  * An TreeEntry is a simple structure that exists to package up the information that Tree needs to          * An TreeEntry is a simple structure that exists to package up the information that Tree needs to
+              std::string email;            std::string email;
- know about its contents: the filename, and the object ID. Tree will also need to know the mode         know about its contents: the filename, and the object ID. Tree will also need to know the mode
+              time_t time;            time_t time;
- of each file, but for now all our source code is in non-executable regular files, so we will hard-         of each file, but for now all our source code is in non-executable regular files, so we will hard-
+              Author(std::string name,std::string email,time_t& time){            Author(std::string name,std::string email,time_t& time){
- code the 100644 mode string that appears in the tree file.         code the 100644 mode string that appears in the tree file.
+                  this->email=email;                this->email=email;
-   */          */
+                  this->name=name;                this->name=name;
- class TreeEntry {         class TreeEntry {
+                  this->time=time;                this->time=time;
- public:         public:
+              }            }
-     // operator overloaded             // operator overloaded
+              std::string to_stringg();            std::string to_stringg();
-     TreeEntry& operator=(const TreeEntry& other) {             TreeEntry& operator=(const TreeEntry& other) {
+        };    };
-         if (this != &other) { // Protect against self-assignment                 if (this != &other) { // Protect against self-assignment
+              
-             this->name = other.name;                     this->name = other.name;
+              
-             this->oid = other.oid;                     this->oid = other.oid;
+      // For History:    // For History:
-             this->stat = other.stat;                     this->stat = other.stat;
+      class Refs{    class Refs{
-         }                 }
+          public:        public:
-         return *this;                 return *this;
+              std::string path;            std::string path;
-     }             }
+              std::string oid;            std::string oid;
-     // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below             // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below
+              Refs(std::string path);            Refs(std::string path);
-     TreeEntry(std::string name, std::string oid,std::string stat) {             TreeEntry(std::string name, std::string oid,std::string stat) {
+              void update_HEAD(std::string oid);            void update_HEAD(std::string oid);
-         this->name = name;                 this->name = name;
+              std::string HEAD_path();            std::string HEAD_path();
-         this->oid = oid;                 this->oid = oid;
+              std::string Read_HEAD();            std::string Read_HEAD();
-         this->stat = stat;                 this->stat = stat;
+        };    };
-     }             }
-              
+              
-     // copy constructor             // copy constructor
+      class Index{    class Index{
-     TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}             TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}
+          public:        public:
-     std::string name;             std::string name;
+              std::vector<std::filesystem::path> Entries;            std::vector<std::filesystem::path> Entries;
-     std::string oid;             std::string oid;
+        };    };
-     // TODO: Customize these codes later for yeet.             // TODO: Customize these codes later for yeet.
+              
-     const std::string REGULAR_MODE = "100644";             const std::string REGULAR_MODE = "100644";
+      class Diffs{    class Diffs{
-     const std::string EXE_MODE = "100755";             const std::string EXE_MODE = "100755";
+          public:        public:
-              
+              std::string path;            std::string path;
-     std::string stat;             std::string stat;
+              std::string diffs;            std::string diffs;
-              
+                          
-   };         };
+        };    };
-              
-              
+      // For Diffs    // For Diffs
- class Tree{         class Tree{
+              
-     // const std::string ENTRY_FORMAT = "Z*H40"; no need             // const std::string ENTRY_FORMAT = "Z*H40"; no need
+      class Printer {    class Printer {
-     public:             public:
+      public:    public:
-              
+          Printer(std::ostream& output = std::cout) : output(output) {}        Printer(std::ostream& output = std::cout) : output(output) {}
-         std::string oid;                 std::string oid;
+          void print(const std::vector<Edit> &diff)        void print(const std::vector<Edit> &diff)
-         std::vector<TreeEntry> entries;                 std::vector<TreeEntry> entries;
+          {        {
-         Tree(std::vector<TreeEntry>& entries){                 Tree(std::vector<TreeEntry>& entries){
+              // Store in Diff file            // Store in Diff file
-             this->entries = entries;                     this->entries = entries;
+              storeDiff(diff);             storeDiff(diff); 
-         }                 }
+              // for (const auto &edit : diff)            // for (const auto &edit : diff)
-              
+              // {            // {
-         std::string Type(){ return "tree"; }                 std::string Type(){ return "tree"; }
+                                  
-         std::string ReturnS_tring();                 std::string ReturnS_tring();
+              //     // Print out in the terminal            //     // Print out in the terminal
-   };         };
+              //     // print_edit(edit);            //     // print_edit(edit);
-              
+              // }            // }
-              
+          }        }
- class Author{         class Author{
+                  
-     public:             public:
+              
-         std::string name;                 std::string name;
+      private:    private:
-         std::string email;                 std::string email;
+          std::ostream& output;        std::ostream& output;
-         time_t time;                 time_t time;
+          void print_edit(const Edit &edit)        void print_edit(const Edit &edit)
-         Author(std::string name,std::string email,time_t& time){                 Author(std::string name,std::string email,time_t& time){
+          {        {
-             this->email=email;                     this->email=email;
+              std::string col, reset = "\033[39m";            std::string col, reset = "\033[39m";
-             this->name=name;                     this->name=name;
+              std::string tag;            std::string tag;
-             this->time=time;                     this->time=time;
+                          
-         }                 }
+              
-         std::string to_stringg();                 std::string to_stringg();
+              switch (edit.type)            switch (edit.type)
-   };         };
+              {            {
-              
+              case Edit::EQL:            case Edit::EQL:
-              
+                  col = "";                col = "";
- // For History:         // For History:
+                  tag = " ";                tag = " ";
- class Refs{         class Refs{
+                  break;                break;
-     public:             public:
+              case Edit::DEL:            case Edit::DEL:
-         std::string path;                 std::string path;
+                  col = "\033[31m";                col = "\033[31m";
-         std::string oid;                 std::string oid;
+                  tag = "-";                tag = "-";
-         Refs(std::string path);                 Refs(std::string path);
+                  break;                break;
-         void update_HEAD(std::string oid);                 void update_HEAD(std::string oid);
+              case Edit::INS:            case Edit::INS:
-         std::string HEAD_path();                 std::string HEAD_path();
+                  col = "\033[32m";                col = "\033[32m";
-         std::string Read_HEAD();                 std::string Read_HEAD();
+                  tag = "+";                tag = "+";
-   };         };
+                  break;                break;
-              
+              }            }
-              
+              
- class Index{         class Index{
+              std::string old_line = edit.old_line.empty() ? "" : edit.old_line;            std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-     public:             public:
+              std::string new_line = edit.new_line.empty() ? "" : edit.new_line;            std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-         std::vector<std::filesystem::path> Entries;                 std::vector<std::filesystem::path> Entries;
+              
-   };         };
+              // output << col << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << reset << std::endl;            // output << col << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << reset << std::endl;
-              
+              
- class Diffs{         class Diffs{
+          }        }
-     public:             public:
+        };    };
-         std::string path;                 std::string path;
+              
-         std::string diffs;                 std::string diffs;
+              
-                          
+              
-   };         };
+      Well, what can I do?    Well, what can I do?
+              
+      1. First of all when Commit happens: Store the name of the path of the file and its generated hash. ie. the folder and the its file name in it.    1. First of all when Commit happens: Store the name of the path of the file and its generated hash. ie. the folder and the its file name in it.
+      It can be done by making a key value DS and then writing it in a file. (set or unordered set) ----> DONE ... DONE (Store file successfully created.)    It can be done by making a key value DS and then writing it in a file. (set or unordered set) ----> DONE ... DONE (Store file successfully created.)
+              
+      2. Then When I do diffs command with the path. I will:    2. Then When I do diffs command with the path. I will:
- Well, what can I do?         Well, what can I do?
-              
- 1. First of all when Commit happens: Store the name of the path of the file and its generated hash. ie. the folder and the its file name in it.         1. First of all when Commit happens: Store the name of the path of the file and its generated hash. ie. the folder and the its file name in it.
- It can be done by making a key value DS and then writing it in a file. (set or unordered set) ----> DONE ... DONE (Store file successfully created.)         It can be done by making a key value DS and then writing it in a file. (set or unordered set) ----> DONE ... DONE (Store file successfully created.)
-              
- 2. Then When I do diffs command with the path. I will:         2. Then When I do diffs command with the path. I will:
- first go to that commit file where the key value store is present. Find the key/value of the path and takes the hashed value. It will then open the file that stores that files previous content.         first go to that commit file where the key value store is present. Find the key/value of the path and takes the hashed value. It will then open the file that stores that files previous content.
+      first go to that commit file where the key value store is present. Find the key/value of the path and takes the hashed value. It will then open the file that stores that files previous content. ----> DONE    first go to that commit file where the key value store is present. Find the key/value of the path and takes the hashed value. It will then open the file that stores that files previous content. ----> DONE
-              
- It will then pass that compressed content file to the Inflating function which will inflate it.         It will then pass that compressed content file to the Inflating function which will inflate it.
+      It will then pass that compressed content file to the Inflating function which will inflate it. ---> DONE    It will then pass that compressed content file to the Inflating function which will inflate it. ---> DONE
-              
- Then I put Mayer Byers Algo on the data of the current file and previous file and output in terms of lines: Then I put Mayer Byers Algo on the data of the current file and previous file and output in terms of lines:    Then I put Mayer Byers Algo on the data of the current file and previous file and output in terms of lines:
+      ---->> Done    ---->> Done
+              
+      --> My Mayer Byers algo is a little bit wrong. Have to properly understand it and then optimize it.    --> My Mayer Byers algo is a little bit wrong. Have to properly understand it and then optimize it.
-              
-              
- --> Solve the saving to file issue. SOLVED --> Solve the saving to file issue. SOLVED    --> Solve the saving to file issue. SOLVED
+      #include <iostream>    #include <iostream>
+      #include "controllers.hpp"    #include "controllers.hpp"
+      #include<filesystem>    #include<filesystem>
+      #define fs std::filesystem    #define fs std::filesystem
+      #define ll long long    #define ll long long
+      using namespace std;    using namespace std;
+              
+              
+      int main(int argc, char* argv[]) {    int main(int argc, char* argv[]) {
+          // Flushing the cout and cerr.        // Flushing the cout and cerr.
+          cout<<unitbuf;         cout<<unitbuf; 
+          cerr<<unitbuf;        cerr<<unitbuf;
+          cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version        cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version
+          string path = fs::current_path();        string path = fs::current_path();
+          cout<<path<<endl;        cout<<path<<endl;
+          try{        try{
+              if(argc==1){            if(argc==1){
+                  // TODO Add some useful string in this case. As is for user to know the different types of commands.                // TODO Add some useful string in this case. As is for user to know the different types of commands.
+                  cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";                cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";
+                  return EXIT_FAILURE;                return EXIT_FAILURE;
+                  }                }
+              string arg=argv[1];            string arg=argv[1];
+              
+              if (argc==3) {            if (argc==3) {
+                  // TODO Add if-else conditions to distinguish different argument that the user is passing.                // TODO Add if-else conditions to distinguish different argument that the user is passing.
+                                  
+                  // cout<<subArg<<endl;                // cout<<subArg<<endl;
+                  // cout<<arg<<endl;                // cout<<arg<<endl;
+                  string subArg=argv[2];                string subArg=argv[2];
+                  if(arg=="init"){                if(arg=="init"){
+                      YeetInit(subArg);                    YeetInit(subArg);
+                  }                }
+              
+                  else if(arg=="add"){                else if(arg=="add"){
+                      YeetAdd();                    YeetAdd();
+                  }                 } 
+              
+              }             } 
+              
+              if(argc==2){            if(argc==2){
+                  if(arg=="status"){                if(arg=="status"){
- #include <iostream>         #include <iostream>
- #include "controllers.hpp"         #include "controllers.hpp"
- #include<filesystem>         #include<filesystem>
- #define fs std::filesystem         #define fs std::filesystem
- #define ll long long         #define ll long long
- using namespace std;         using namespace std;
-              
-              
- int main(int argc, char* argv[]) {         int main(int argc, char* argv[]) {
-     // Flushing the cout and cerr.             // Flushing the cout and cerr.
-     cout<<unitbuf;              cout<<unitbuf; 
-     cerr<<unitbuf;             cerr<<unitbuf;
-     cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version             cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version
-     string path = fs::current_path();             string path = fs::current_path();
-     cout<<path<<endl;             cout<<path<<endl;
-     try{             try{
-         if(argc==1){                 if(argc==1){
-             // TODO Add some useful string in this case. As is for user to know the different types of commands.                     // TODO Add some useful string in this case. As is for user to know the different types of commands.
-             cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";                     cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";
-             return EXIT_FAILURE;                     return EXIT_FAILURE;
-             }                     }
-         string arg=argv[1];                 string arg=argv[1];
-              
-         if (argc==3) {                 if (argc==3) {
-             // TODO Add if-else conditions to distinguish different argument that the user is passing.                     // TODO Add if-else conditions to distinguish different argument that the user is passing.
-                                  
-             // cout<<subArg<<endl;                     // cout<<subArg<<endl;
-             // cout<<arg<<endl;                     // cout<<arg<<endl;
-             string subArg=argv[2];                     string subArg=argv[2];
-             if(arg=="init"){                     if(arg=="init"){
-                 YeetInit(subArg);                         YeetInit(subArg);
-             }                     }
-              
-             else if(arg=="add"){                     else if(arg=="add"){
-                 YeetAdd();                         YeetAdd();
-             }                      } 
-              
-         }                  } 
-              
-         if(argc==2){                 if(argc==2){
-             if(arg=="status"){                     if(arg=="status"){
-                 YeetStatus();                         YeetStatus();
+                      YeetStatus(path);                    YeetStatus(path);
-             }             }                }
-             else if(arg=="commit"){             else if(arg=="commit"){                else if(arg=="commit"){
-                 Commit myCommitObject(path);                 Commit myCommitObject(path);                    Commit myCommitObject(path);
-                 myCommitObject.CommitMain(path);                 myCommitObject.CommitMain(path);                    myCommitObject.CommitMain(path);
-             }             }                }
-         }         }            }
-              
-         // else if(argc > 2) print("only one argiment is supported for now!");         // else if(argc > 2) print("only one argiment is supported for now!");            // else if(argc > 2) print("only one argiment is supported for now!");
-                              
-     }     }        }
-     catch(const std::exception& e){     catch(const std::exception& e){        catch(const std::exception& e){
-         // TODO write the number of arguments and the argv required for each command in the Documentation.         // TODO write the number of arguments and the argv required for each command in the Documentation.            // TODO write the number of arguments and the argv required for each command in the Documentation.
-         std::cout<<"Wtf";         std::cout<<"Wtf";            std::cout<<"Wtf";
-         std::cerr << e.what() << "\nException Happened somewhere! Error:501 \n";         std::cerr << e.what() << "\nException Happened somewhere! Error:501 \n";            std::cerr << e.what() << "\nException Happened somewhere! Error:501 \n";
-     }     }        }
-                  
-     return EXIT_SUCCESS;     return EXIT_SUCCESS;        return EXIT_SUCCESS;
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
+          }        }
+              
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
+              return;            return;
+          }        }
+              
+          bool space = false;        bool space = false;
+          std::string PathofFile, oid;        std::string PathofFile, oid;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
+          std::vector<std::string> oids;        std::vector<std::string> oids;
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
+                  PathofFile = "";                PathofFile = "";
+                  space = !space; continue;                space = !space; continue;
+              }                   }       
+              
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
+                  oids.push_back(oid);                oids.push_back(oid);
+                  oid = "";                oid = "";
+                  space = !space; continue;                space = !space; continue;
+              }                 }     
+                          
+              if(!space){            if(!space){
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
+              }            }
+              else{            else{
+                  oid += StoreData[i];                oid += StoreData[i];
+              }            }
+          }        }
+              
+          // Main Loop        // Main Loop
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
+              
+              int additions,deletions;            int additions,deletions;
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
+              
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
+                  std::string NewFileContent="";                std::string NewFileContent="";
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
+              
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
+                      std::string line;                    std::string line;
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
+                      }                    }
+                      NowFile.close();                    NowFile.close();
+                  }                }
+              
+                  // Call Diffs algo here                // Call Diffs algo here
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
+                  if(ans==0) {                if(ans==0) {
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
+                      continue;                    continue;
+                  }                            }            
+                                  
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                  for(auto it:diff_result){                for(auto it:diff_result){
+                                          
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      }                    }
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
+              
+                  // don't show file if nothing changed                // don't show file if nothing changed
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
+                      continue;                    continue;
+                  }                }
+              
+                  // The file we are checking:                // The file we are checking:
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
+                                  
+                  // Printing the diffs                // Printing the diffs
+                  Printer printer;                Printer printer;
+                  printer.print(diff_result);                printer.print(diff_result);
+              
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
+              } else {            } else {
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
+              }            }
+          }        }
+              
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
+                      std::string line;                    std::string line;
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                      newFile.close();                    newFile.close();
+                  }                }
+              }            }
+          }        }
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
+              std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
+          }        }
+          else{        else{
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+          }        }
+              
+              
+         }    }
+              
+              
+       /**    /**
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
+         *     *
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
+       * @return Nothing for now     * @return Nothing for now
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
+          try        try
+          {        {
+              // std::cout<<path;            // std::cout<<path;
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
+              }            }
+              
+              if(path.back()=='.')             if(path.back()=='.') 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
+              
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
+                  throw std::runtime_error("A yeet folder already exists in this directory. \n");                throw std::runtime_error("A yeet folder already exists in this directory. \n");
+                          
+              // std::system("tree .");            // std::system("tree .");
+              
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
+              
+              // Make HEAD file.            // Make HEAD file.
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
+                      headFile.close();                    headFile.close();
+                  } else {                } else {
+                      throw std::runtime_error("Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("Failed to create .yeet/HEAD file.\n");
+                  }                }
+              
+              // Making Description file.            // Making Description file.
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
+                  if(descFile.is_open()){                if(descFile.is_open()){
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile.close();                    descFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("Failed to create .yeet/description file.\n");                    throw std::runtime_error("Failed to create .yeet/description file.\n");
+                  }                }
+                          
+              // Making config file            // Making config file
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
+                  if(configFile.is_open()){                if(configFile.is_open()){
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
+                      configFile.close();                    configFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("Failed to create .yeet/config file.\n");                    throw std::runtime_error("Failed to create .yeet/config file.\n");
+                  }                }
+              
+              // Making Store File            // Making Store File
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
+                  StoreFile.close();                StoreFile.close();
+              }            }
+              else {            else {
+                  throw std::runtime_error("Failed to create .yeet/Store file.\n");                throw std::runtime_error("Failed to create .yeet/Store file.\n");
+              }            }
+              
+              // Make Diff file.            // Make Diff file.
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
+                  DiffFile.close();                DiffFile.close();
+              } else {            } else {
+                  throw std::runtime_error("Failed to create .yeet/Diff file.\n");                throw std::runtime_error("Failed to create .yeet/Diff file.\n");
+              }            }
+              
+              std::cout << "Initialized yeet directory\n";            std::cout << "Initialized yeet directory\n";
+          }        }
+          catch(const std::exception& e){        catch(const std::exception& e){
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
+          }        }
+                  
+         }    }
+              
+      void YeetAdd(){    void YeetAdd(){
+              
+         }    }
+              
+              
+      // Commit Class:    // Commit Class:
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+       /**    /**
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
+              // This is my .gitignore            // This is my .gitignore
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              
+              if(IGNORE){            if(IGNORE){
+                  continue;                continue;
+              }            }
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
+              }             } 
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  continue;                continue;
+              }            }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
+          }        }
+         }    }
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
+          try        try
+          {        {
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                      _stat = "Exe";                    _stat = "Exe";
+                  }                }
+                   // content of Current FiLe.                 // content of Current FiLe.
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
+                  // Blob of that Data                // Blob of that Data
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
+                  // Storing that Blob                // Storing that Blob
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
+              }            }
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
+              }            }
+              // Save the store in /Store file            // Save the store in /Store file
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
+              
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+              
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
+                  std::string message; std::cout<<"\nPlease enter your Commit Message:\n";                std::string message; std::cout<<"\nPlease enter your Commit Message:\n";
+                  // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
+                  std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
+                  Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
+                  DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
+                  RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
+                  // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
+                  bool is_RootCommit = false;                bool is_RootCommit = false;
+                  if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
+                  if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
+                  std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
+              }            }
+          }        }
+          catch(const std::exception& e)        catch(const std::exception& e)
+          {        {
+              std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
+          }        }
+                  
+                  
+         }    }
+              
+      Commit::Commit(std::string path){    Commit::Commit(std::string path){
+          this->path = path;        this->path = path;
+         }    }
+              
+      Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
+          this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
+          this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
+          this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
+          this->parent=parent;        this->parent=parent;
+          this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
+         }    }
+              
+              
+              
+       /**    /**
+       * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
+      *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
+      *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
+        */    */
+      std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
+          // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
+          std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
+              
+          // Obtain the size of the file.        // Obtain the size of the file.
+          const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
+          std::string result(sz, '\0');        std::string result(sz, '\0');
+              
+          // Read the whole file into the buffer.        // Read the whole file into the buffer.
+          f.read(result.data(), sz);        f.read(result.data(), sz);
+              
+          return result;        return result;
+         }    }
+              
+      // Blob Class    // Blob Class
+      Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
+          this->data = newdata;        this->data = newdata;
+          // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
+         }    }
+      std::string Blob::type(){    std::string Blob::type(){
+          return "blob";        return "blob";
+         }    }
+              
+      // Database Class    // Database Class
+      Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
+          this->path = path;        this->path = path;
+         }    }
+              
+      // Creating Hash    // Creating Hash
+      std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
+          CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
+          std::string hash;        std::string hash;
+          // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
+          CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
+              
+          return hash;        return hash;
+         }    }
+              
+      void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
+          std::string Data = object.data;        std::string Data = object.data;
+              
+          // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
+          // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+                  
+          std::string content = Data;        std::string content = Data;
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
+          Store[path] = object.oid;        Store[path] = object.oid;
+                  
+          // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+         }    }
+              
+      void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
+          std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
+          std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
+          // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+         }    }
+              
+      void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
+          std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
+          std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
+          // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
+          // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+         }    }
+              
+      // Tree Class    // Tree Class
+              
+       /**    /**
+       * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
+       * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
+       * The entries contains all the files commit info.     * The entries contains all the files commit info.
+        */     */
+      std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
+          std::ostringstream result;        std::ostringstream result;
+              
+          // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
+          // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
+          // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
+          // Sort entries by name        // Sort entries by name
+              
+          std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
+              return a.name < b.name;            return a.name < b.name;
+          });        });
+              
+          for (const auto& entry : entries) {        for (const auto& entry : entries) {
+              std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
+              result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
+          }        }
+          // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
+          return result.str();        return result.str();
+         }    }
+              
+              
+              
+      // Helper Functions:    // Helper Functions:
+      std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
+          std::stringstream ss;         std::stringstream ss; 
+          ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
+          return ss.str();        return ss.str();
+         }    }
+              
+              
+      std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
+          std::string ans="";        std::string ans="";
+          ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
+          ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
+          return ans;        return ans;
+         }    }
+              
+      std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
+          std::string ans="";        std::string ans="";
+          for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
+              if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
+                  break;                break;
+              }            }
+              ans+=Objpath[i];            ans+=Objpath[i];
+          }        }
+          std::string act_ans="";        std::string act_ans="";
+          for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
+              act_ans+=ans[i];            act_ans+=ans[i];
+          }        }
+          return act_ans;        return act_ans;
+         }    }
+              
+      // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
+      //     z_stream stream;    //     z_stream stream;
+      //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
+      //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
+      //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
+      //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
+      //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
+      //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
+      //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
+      //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
+      //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
+              
+      //     // intializing compression    //     // intializing compression
+      //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
+              
+      //     // compress:    //     // compress:
+      //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
+              
+      //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
+              
+      //     deflateEnd(&stream);    //     deflateEnd(&stream);
+      //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
+      //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
+      //     return compressed;    //     return compressed;
+      // }    // }
+              
+      // refractored Compression Logic    // refractored Compression Logic
+      std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
+          if (content.empty()) return "";        if (content.empty()) return "";
+              
+          z_stream stream{};        z_stream stream{};
+          stream.zalloc = nullptr;        stream.zalloc = nullptr;
+          stream.zfree = nullptr;        stream.zfree = nullptr;
+          stream.opaque = nullptr;        stream.opaque = nullptr;
+          stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
+          stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
+              
+          if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
+              throw std::runtime_error("Failed to initialize zlib deflate.");            throw std::runtime_error("Failed to initialize zlib deflate.");
+          }        }
+              
+          std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
+          stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
+          stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
+              
+          if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
+              deflateEnd(&stream);            deflateEnd(&stream);
+              throw std::runtime_error("Failed to deflate data.");            throw std::runtime_error("Failed to deflate data.");
+          }        }
+              
+          compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
+              
+          if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
+              throw std::runtime_error("Failed to finalize zlib deflate.");            throw std::runtime_error("Failed to finalize zlib deflate.");
+          }        }
+              
+          return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
+         }    }
+              
+              
+      // Author Class:    // Author Class:
+      std::string Author::to_stringg(){    std::string Author::to_stringg(){
+          std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
+          return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
+         }    }
+              
+              
+      // History    // History
+      // Refs Class:    // Refs Class:
+      // Constructor of Ref Class    // Constructor of Ref Class
+      Refs::Refs(std::string path){    Refs::Refs(std::string path){
+          this->path = path;        this->path = path;
+         }    }
+              
+      // @return the path to the HEAD file    // @return the path to the HEAD file
+      std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
+          std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"Error in opening Store File"<<std::endl;                 std::cout<<"Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
-         }                 }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"No Change, Can't commit"<<std::endl;                 std::cout<<"No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
-              
-              
-  /**         /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
-    *          *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
-     try             try
-     {             {
-         // std::cout<<path;                 // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
-         }                 }
-              
-         if(path.back()=='.')                  if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
-              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("A yeet folder already exists in this directory. \n");                     throw std::runtime_error("A yeet folder already exists in this directory. \n");
-                          
-         // std::system("tree .");                 // std::system("tree .");
-              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
-         // Make HEAD file.                 // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
-             } else {                     } else {
-                 throw std::runtime_error("Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("Failed to create .yeet/HEAD file.\n");
-             }                     }
-              
-         // Making Description file.                 // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
-             }                     }
-             else {                     else {
-                 throw std::runtime_error("Failed to create .yeet/description file.\n");                         throw std::runtime_error("Failed to create .yeet/description file.\n");
-             }                     }
-                          
-         // Making config file                 // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
-             }                     }
-             else {                     else {
-                 throw std::runtime_error("Failed to create .yeet/config file.\n");                         throw std::runtime_error("Failed to create .yeet/config file.\n");
-             }                     }
-              
-         // Making Store File                 // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
-         }                 }
-         else {                 else {
-             throw std::runtime_error("Failed to create .yeet/Store file.\n");                     throw std::runtime_error("Failed to create .yeet/Store file.\n");
-         }                 }
-              
-         // Make Diff file.                 // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
-         } else {                 } else {
-             throw std::runtime_error("Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("Failed to create .yeet/Diff file.\n");
-         }                 }
-              
-         std::cout << "Initialized yeet directory\n";                 std::cout << "Initialized yeet directory\n";
-     }             }
-     catch(const std::exception& e){             catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
-     }             }
-                  
-    }         }
-              
- void YeetAdd(){         void YeetAdd(){
-              
-    }         }
-              
-              
- // Commit Class:         // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){                 if(IGNORE){
-             continue;                     continue;
-         }                 }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
-         }                  } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
-             continue;                     continue;
-         }                 }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
-     }             }
-    }         }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
-     try             try
-     {             {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
-         ListFiles(path,FilePath);                 ListFiles(path,FilePath);
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
-             }                     }
-              // content of Current FiLe.                      // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
-         }                 }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
-         // Save the store in /Store file                 // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
-              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nPlease enter your Commit Message:\n";                     std::string message; std::cout<<"\nPlease enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "                     // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.                     std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);                     Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);                     DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                     RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;                     // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;                     bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;                     if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                     if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                     std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }                 }
-     }             }
-     catch(const std::exception& e)             catch(const std::exception& e)
-     {             {
-         std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();                 std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }             }
-                  
-                  
-    }         }
-              
- Commit::Commit(std::string path){         Commit::Commit(std::string path){
-     this->path = path;             this->path = path;
-    }         }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){         Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;             this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;             this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;             this->CommitMessage=CommitMessage;
-     this->parent=parent;             this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;             this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }         }
-              
-              
-              
-  /**         /**
-  * Helper function to get the content of a file into a string          * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.         *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file;         *  @return: a `string` with the content of the file;
-   */         */
- std::string Commit::readFile(fs::path path){         std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.             // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);             std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.             // Obtain the size of the file.
-     const auto sz = fs::file_size(path);             const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');             std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.             // Read the whole file into the buffer.
-     f.read(result.data(), sz);             f.read(result.data(), sz);
-              
-     return result;             return result;
-    }         }
-              
- // Blob Class         // Blob Class
- Blob::Blob(std::string newdata){         Blob::Blob(std::string newdata){
-     this->data = newdata;             this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;             // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }         }
- std::string Blob::type(){         std::string Blob::type(){
-     return "blob";             return "blob";
-    }         }
-              
- // Database Class         // Database Class
- Database::Database(std::filesystem::path path){         Database::Database(std::filesystem::path path){
-     this->path = path;             this->path = path;
-    }         }
-              
- // Creating Hash         // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot         std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;             CryptoPP::SHA1 sha1;
-     std::string hash;             std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal             // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));             CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;             return hash;
-    }         }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){         void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;             std::string Data = object.data;
-              
-     // ! I am putiing only the data in the content to simplify the process of diff             // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;             std::string content = Data;
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;             Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }         }
-              
- void Database::storeContentInDB(Tree& object){         void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();             std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }         }
-              
- void Database::storeContentInDB(Commit& object){         void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;             std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.             std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.             // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }         }
-              
- // Tree Class         // Tree Class
-              
-  /**         /**
-  * This function converts the vector<TreeEntry> to string          * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.          * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.          * The entries contains all the files commit info.
-   */          */
- std::string Tree::ReturnS_tring(){         std::string Tree::ReturnS_tring(){
-     std::ostringstream result;             std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream             // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers             // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";             // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name             // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {             std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;                 return a.name < b.name;
-     });             });
-              
-     for (const auto& entry : entries) {             for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;                 std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";                 result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }             }
-     // std::cout<<result.str()<<std::endl;             // std::cout<<result.str()<<std::endl;
-     return result.str();             return result.str();
-    }         }
-              
-              
-              
- // Helper Functions:         // Helper Functions:
- std::string timeToString(time_t currtime) {          std::string timeToString(time_t currtime) { 
-     std::stringstream ss;              std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.             ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();             return ss.str();
-    }         }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){         std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";             std::string ans="";
-     ans+=Objpath[Objpath.size()-41];             ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];             ans+=Objpath[Objpath.size()-40];
-     return ans;             return ans;
-    }         }
-              
- std::string File_name_Helper(std::string Objpath){         std::string File_name_Helper(std::string Objpath){
-     std::string ans="";             std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){             for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){                 if(Objpath[i]=='/'){
-             break;                     break;
-         }                 }
-         ans+=Objpath[i];                 ans+=Objpath[i];
-     }             }
-     std::string act_ans="";             std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){             for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];                 act_ans+=ans[i];
-     }             }
-     return act_ans;             return act_ans;
-    }         }
-              
- // std::string Compressing_using_zlib(std::string content){         // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream;         //     z_stream stream;
- //     stream.zalloc = nullptr;         //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr;         //     stream.zfree = nullptr;
- //     stream.opaque = nullptr;         //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size         //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size());         //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og         //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil         //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size];         //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type         //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression         //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.         //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress:         //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION);         //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out;         //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream);         //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data);         //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data         //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed;         //     return compressed;
- // }         // }
-              
- // refractored Compression Logic         // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) {         std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";             if (content.empty()) return "";
-              
-     z_stream stream{};             z_stream stream{};
-     stream.zalloc = nullptr;             stream.zalloc = nullptr;
-     stream.zfree = nullptr;             stream.zfree = nullptr;
-     stream.opaque = nullptr;             stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());             stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));             stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {             if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("Failed to initialize zlib deflate.");                 throw std::runtime_error("Failed to initialize zlib deflate.");
-     }             }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));             std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();             stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();             stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {             if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);                 deflateEnd(&stream);
-         throw std::runtime_error("Failed to deflate data.");                 throw std::runtime_error("Failed to deflate data.");
-     }             }
-              
-     compressedData.resize(stream.total_out);             compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {             if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("Failed to finalize zlib deflate.");                 throw std::runtime_error("Failed to finalize zlib deflate.");
-     }             }
-              
-     return std::string(compressedData.begin(), compressedData.end());             return std::string(compressedData.begin(), compressedData.end());
-    }         }
-              
-              
- // Author Class:         // Author Class:
- std::string Author::to_stringg(){         std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);             std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;             return name+" <"+email+"> "+ thecurrTime;
-    }         }
-              
-              
- // History         // History
- // Refs Class:         // Refs Class:
- // Constructor of Ref Class         // Constructor of Ref Class
- Refs::Refs(std::string path){         Refs::Refs(std::string path){
-     this->path = path;             this->path = path;
-    }         }
-              
- // @return the path to the HEAD file         // @return the path to the HEAD file
- std::string Refs::HEAD_path(){         std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");             std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     std::cout<<currBranch<<std::endl;             std::cout<<currBranch<<std::endl;
-     std::cout<<"current Branch: "<<std::endl;             std::cout<<"current Branch: "<<std::endl;
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::unordered_map<std::string, std::string> Store){ void writeStoreinDB(std::unordered_map<std::string, std::string> Store){    void writeStoreinDB(std::unordered_map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("Failed to create .yeet/Store file.\n");         throw std::runtime_error("Failed to create .yeet/Store file.\n");            throw std::runtime_error("Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore         // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "Cannot open file: " << filename << std::endl;         std::cerr << "Cannot open file: " << filename << std::endl;            std::cerr << "Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "Unable to open file for writing diffs" << std::endl;         std::cerr << "Unable to open file for writing diffs" << std::endl;            std::cerr << "Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"Invalid name of the Branch"<<std::endl;             std::cout<<"Invalid name of the Branch"<<std::endl;                std::cout<<"Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-         // setting up the refs obj         // setting up the refs obj            // setting up the refs obj
-         Refs ref(currPath);         Refs ref(currPath);            Refs ref(currPath);
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-                              
-         std::cout<<"PrevBranch "<<PrevBranch<<std::endl;         std::cout<<"PrevBranch "<<PrevBranch<<std::endl;            std::cout<<"PrevBranch "<<PrevBranch<<std::endl;
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         ref.update_HEAD(CommitID_ofPrevBranch);         ref.update_HEAD(CommitID_ofPrevBranch);            ref.update_HEAD(CommitID_ofPrevBranch);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("Failed to create new Branch file.\n");             throw std::runtime_error("Failed to create new Branch file.\n");                throw std::runtime_error("Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-         }         }            }
-              
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::ofstream ff(path.string() + "/.yeet/Branch");             std::ofstream ff(path.string() + "/.yeet/Branch");                std::ofstream ff(path.string() + "/.yeet/Branch");
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
+              
-     for(auto it:FilePath){             for(auto it:FilePath){
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
-         visited[it] = false;                 visited[it] = false;
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
-     }             }
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
-                  
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
+              if (headFile.is_open()) {            if (headFile.is_open()) {
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
+                  headFile << oid;                headFile << oid;
-              
+                  headFile.close();                headFile.close();
-     std::string StoreData;             std::string StoreData;
+              } else {            } else {
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-              
+              }            }
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
+          }        }
-     if(Store.is_open()){             if(Store.is_open()){
+         }    }
-         std::string line;                 std::string line;
+              
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
+              
-             StoreData += line + "\n";                     StoreData += line + "\n";
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
-         }                 }
+              
-         Store.close();                 Store.close();
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
-     }             }
+              
-     else{             else{
+          // Getting list of all files        // Getting list of all files
-         std::cout<<"Error in opening Store File"<<std::endl;                 std::cout<<"Error in opening Store File"<<std::endl;
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
-     }             }
-              
+          // Making a visited map for later        // Making a visited map for later
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
-         std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
+          for(auto it:FilePath){        for(auto it:FilePath){
-         return;                 return;
+              visited[it] = false;            visited[it] = false;
-     }             }
+          }        }
-              
+                  
-     bool space = false;             bool space = false;
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
+              
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
+              
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
-             space = !space; continue;                     space = !space; continue;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
-         }                        }       
+                  StoreData += line + "\n";                StoreData += line + "\n";
-              
+              }            }
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
+              Store.close();            Store.close();
-             oids.push_back(oid);                     oids.push_back(oid);
+          }        }
-             oid = "";                     oid = "";
+          else{        else{
-             space = !space; continue;                     space = !space; continue;
+              std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;            std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }                      }     
+          }        }
-                          
+              
-         if(!space){                 if(!space){
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
+              std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         }                 }
+              return;            return;
-         else{                 else{
+          }        }
-             oid += StoreData[i];                     oid += StoreData[i];
+              
-         }                 }
+          bool space = false;        bool space = false;
-     }             }
+          std::string PathofFile, oid;        std::string PathofFile, oid;
-              
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
-     // Main Loop             // Main Loop
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
+          std::vector<std::string> oids;        std::vector<std::string> oids;
-              
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
-         int additions,deletions;                 int additions,deletions;
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
+                  PathofFile = "";                PathofFile = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+                  space = !space; continue;                space = !space; continue;
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              }                   }       
-              
+              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
-              
+                  oids.push_back(oid);                oids.push_back(oid);
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
+                  oid = "";                oid = "";
-              
+                  space = !space; continue;                space = !space; continue;
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
+              }                 }     
-             std::string NewFileContent="";                     std::string NewFileContent="";
+                          
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
+              if(!space){            if(!space){
-              
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+              }            }
-                 std::string line;                         std::string line;
+              else{            else{
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
+                  oid += StoreData[i];                oid += StoreData[i];
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
+              }            }
-                 }                         }
+          }        }
-                 NowFile.close();                         NowFile.close();
+              
-             }                     }
+          // Main Loop        // Main Loop
-              
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
-             // Call Diffs algo here                     // Call Diffs algo here
+              
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+              int additions,deletions;            int additions,deletions;
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
-              
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
+              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-             if(ans==0) {                     if(ans==0) {
+              
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
+              
-                 continue;                         continue;
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
-             }                                 }            
+                  std::string NewFileContent="";                std::string NewFileContent="";
-                                  
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
-             for(auto it:diff_result){                     for(auto it:diff_result){
+                      std::string line;                    std::string line;
-                                          
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
+                      }                    }
-                     deletions++;                             deletions++;
+                      NowFile.close();                    NowFile.close();
-                     Totaldeletions++;                             Totaldeletions++;
+                  }                }
-                 }                         }
+              
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
+                  // Call Diffs algo here                // Call Diffs algo here
-                     additions++;                             additions++;
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                     Totaladditions++;                             Totaladditions++;
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                 }                         }
+              
-             }                     }
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
-              
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
+              
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
-                 continue;                         continue;
+                  if(ans==0) {                if(ans==0) {
-             }                     }
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
-              
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                      continue;                    continue;
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                  }                            }            
-                 continue;                         continue;
+                                  
-             }                     }
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
+              
-             // The file we are checking:                     // The file we are checking:
+                  for(auto it:diff_result){                for(auto it:diff_result){
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+                                          
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
-              
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                          deletions++;                        deletions++;
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+                          Totaldeletions++;                        Totaldeletions++;
-              
+                      }                    }
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
-         } else {                 } else {
+                          additions++;                        additions++;
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+                          Totaladditions++;                        Totaladditions++;
-         }                 }
+                      }                    }
-     }             }
+                  }                }
-              
+              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
+              
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 std::string line;                         std::string line;
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
+                      continue;                    continue;
-                     Totaladditions++;                             Totaladditions++;
+                  }                }
-                 }                         }
+              
-                 newFile.close();                         newFile.close();
+                  // don't show file if nothing changed                // don't show file if nothing changed
-             }                     }
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
-         }                 }
+                      continue;                    continue;
-     }             }
+                  }                }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
+              
-         std::cout<<"No Change, Can't commit"<<std::endl;                 std::cout<<"No Change, Can't commit"<<std::endl;
+                  // The file we are checking:                // The file we are checking:
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
-     }             }
+                                  
-     else{             else{
+                  // Printing the diffs                // Printing the diffs
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+                  Printer printer;                Printer printer;
-     }             }
+                  printer.print(diff_result);                printer.print(diff_result);
-              
-              
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
-    }         }
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-              
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-  /**         /**
+              } else {            } else {
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
-    *          *
+              }            }
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+          }        }
+              
-  * @return Nothing for now          * @return Nothing for now
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-  * @author Akhil Sharma          * @author Akhil Sharma
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
-   */          */
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
-     try             try
+                      std::string line;                    std::string line;
-     {             {
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-         // std::cout<<path;                 // std::cout<<path;
+                          Totaladditions++;                        Totaladditions++;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+                      }                    }
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+                      newFile.close();                    newFile.close();
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+                  }                }
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              }            }
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+          }        }
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;            std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+          }        }
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+          else{        else{
-         }                 }
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-              
+          }        }
-         if(path.back()=='.')                  if(path.back()=='.') 
+              
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
-              
+         }    }
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              
-             throw std::runtime_error("A yeet folder already exists in this directory. \n");                     throw std::runtime_error("A yeet folder already exists in this directory. \n");
+              
-                          
+       /**    /**
-         // std::system("tree .");                 // std::system("tree .");
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-              
+         *     *
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+       * @return Nothing for now     * @return Nothing for now
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+       * @author Akhil Sharma     * @author Akhil Sharma
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+        */     */
-              
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-         // Make HEAD file.                 // Make HEAD file.
+          try        try
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+          {        {
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+              // std::cout<<path;            // std::cout<<path;
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-                 headFile.close();                         headFile.close();
-             } else {                     } else {
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-                 throw std::runtime_error("Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("Failed to create .yeet/HEAD file.\n");
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-             }                     }
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-              
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         // Making Description file.                 // Making Description file.
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-                 descFile.close();                         descFile.close();
+              }            }
-             }                     }
+              
-             else {                     else {
+              if(path.back()=='.')             if(path.back()=='.') 
-                 throw std::runtime_error("Failed to create .yeet/description file.\n");                         throw std::runtime_error("Failed to create .yeet/description file.\n");
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-             }                     }
+              
-                          
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-         // Making config file                 // Making config file
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                          
+              // std::system("tree .");            // std::system("tree .");
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+              
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-                 configFile.close();                         configFile.close();
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-             }                     }
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-             else {                     else {
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-                 throw std::runtime_error("Failed to create .yeet/config file.\n");                         throw std::runtime_error("Failed to create .yeet/config file.\n");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-             }                     }
-              
+              // Make HEAD file.            // Make HEAD file.
-         // Making Store File                 // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                      headFile.close();                    headFile.close();
-             StoreFile.close();                     StoreFile.close();
+                  } else {                } else {
-         }                 }
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-         else {                 else {
+                  }                }
-             throw std::runtime_error("Failed to create .yeet/Store file.\n");                     throw std::runtime_error("Failed to create .yeet/Store file.\n");
+              
-         }                 }
+              // Making Description file.            // Making Description file.
-              
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-         // Make Diff file.                 // Make Diff file.
+                  if(descFile.is_open()){                if(descFile.is_open()){
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile.close();                    descFile.close();
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  }                }
-             DiffFile.close();                     DiffFile.close();
+                  else {                else {
-         } else {                 } else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             throw std::runtime_error("Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("Failed to create .yeet/Diff file.\n");
+                  }                }
-         }                 }
+                          
-              
+              // Making config file            // Making config file
-         std::cout << "Initialized yeet directory\n";                 std::cout << "Initialized yeet directory\n";
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-     }             }
+                  if(configFile.is_open()){                if(configFile.is_open()){
-     catch(const std::exception& e){             catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-     }             }
+                      configFile.close();                    configFile.close();
-                  
+                  }                }
-    }         }
+                  else {                else {
-              
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
- void YeetAdd(){         void YeetAdd(){
+                  }                }
-              
+              
-    }         }
+              // Making Store File            // Making Store File
-              
-              
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
- // Commit Class:         // Commit Class:
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){                 if(IGNORE){
+                  StoreFile.close();                StoreFile.close();
+              }            }
-             continue;                     continue;
+              else {            else {
-         }                 }
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              }            }
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+              
-         }                  } 
+              // Make Diff file.            // Make Diff file.
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-             continue;                     continue;
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-         }                 }
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+                  DiffFile.close();                DiffFile.close();
-     }             }
+              } else {            } else {
-    }         }
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+              }            }
-     try             try
+              
-     {             {
+              // Make Current Branch file.            // Make Current Branch file.
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+                  BranchFile << "master";                BranchFile << "master";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+                  BranchFile.close();                BranchFile.close();
-         ListFiles(path,FilePath);                 ListFiles(path,FilePath);
+              } else {            } else {
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+              }            }
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+              
-                 _stat = "Exe";                         _stat = "Exe";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-             }                     }
+          }        }
-              // content of Current FiLe.                      // content of Current FiLe.
+          catch(const std::exception& e){        catch(const std::exception& e){
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-             // Blob of that Data                     // Blob of that Data
+          }        }
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  
-             // Storing that Blob                     // Storing that Blob
+         }    }
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+              
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+      void YeetAdd(){    void YeetAdd(){
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+              
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+         }    }
-         }                 }
+              
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+      // Commit Class:    // Commit Class:
-         }                 }
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-         // Save the store in /Store file                 // Save the store in /Store file
+       /**    /**
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-              
+       * @author Akhil Sharma     * @author Akhil Sharma
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+        */     */
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+              // This is my .gitignore            // This is my .gitignore
-              
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              
+              if(IGNORE){            if(IGNORE){
+                  continue;                continue;
+              }            }
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
+              }             } 
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  continue;                continue;
+              }            }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
+          }        }
+         }    }
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
+          try        try
+          {        {
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                      _stat = "Exe";                    _stat = "Exe";
+                  }                }
+                   // content of Current FiLe.                 // content of Current FiLe.
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
+                  // Blob of that Data                // Blob of that Data
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
+                  // Storing that Blob                // Storing that Blob
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
+              }            }
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
+              }            }
+              // Save the store in /Store file            // Save the store in /Store file
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
+              
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+              
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
+                  std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
+                  // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
+                  std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
+                  Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
+                  DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
+                  RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
+                  // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
+                  bool is_RootCommit = false;                bool is_RootCommit = false;
+                  if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
+                  if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
+                  std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
+              }            }
+          }        }
+          catch(const std::exception& e)        catch(const std::exception& e)
+          {        {
+              std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+          }        }
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+         }    }
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+              
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+      Commit::Commit(std::string path){    Commit::Commit(std::string path){
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+          this->path = path;        this->path = path;
-             std::string message; std::cout<<"\nPlease enter your Commit Message:\n";                     std::string message; std::cout<<"\nPlease enter your Commit Message:\n";
+         }    }
-             // std::cin>>message; // This doesn't takes any spaces " "                     // std::cin>>message; // This doesn't takes any spaces " "
+              
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.                     std::getline(std::cin >> std::ws, message); // ws means white spaces.
+      Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);                     Commit MainCommitObj(TreeObject.oid,author,message,parent);
+          this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-             DbObj.storeContentInDB(MainCommitObj);                     DbObj.storeContentInDB(MainCommitObj);
+          this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                     RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
+          this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-             // std::cout<<"the parent value: "<<parent<<std::endl;                     // std::cout<<"the parent value: "<<parent<<std::endl;
+          this->parent=parent;        this->parent=parent;
-             bool is_RootCommit = false;                     bool is_RootCommit = false;
+          this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-             if(parent=="ref:") is_RootCommit=true;                     if(parent=="ref:") is_RootCommit=true;
+         }    }
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                     if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
+              
-             std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                     std::cout<<"Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
+              
-         }                 }
+              
-     }             }
+       /**    /**
-     catch(const std::exception& e)             catch(const std::exception& e)
+       * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
-     {             {
+      *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
-         std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();                 std::cerr << "\n An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
+      *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-     }             }
+        */    */
-                  
+      std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-                  
+          // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-    }         }
+          std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
+              
- Commit::Commit(std::string path){         Commit::Commit(std::string path){
+          // Obtain the size of the file.        // Obtain the size of the file.
-     this->path = path;             this->path = path;
+          const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-    }         }
+          std::string result(sz, '\0');        std::string result(sz, '\0');
-              
+              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){         Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
+          // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     this->AuthorData=AuthorData;             this->AuthorData=AuthorData;
+          f.read(result.data(), sz);        f.read(result.data(), sz);
-     this->TreeOID=TreeOid;             this->TreeOID=TreeOid;
+              
-     this->CommitMessage=CommitMessage;             this->CommitMessage=CommitMessage;
+          return result;        return result;
-     this->parent=parent;             this->parent=parent;
+         }    }
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;             this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
+              
-    }         }
+      // Blob Class    // Blob Class
-              
+      Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-              
+          this->data = newdata;        this->data = newdata;
-              
+          // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-  /**         /**
+         }    }
-  * Helper function to get the content of a file into a string          * Helper function to get the content of a file into a string
+      std::string Blob::type(){    std::string Blob::type(){
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.         *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
+          return "blob";        return "blob";
- *  @return: a `string` with the content of the file;         *  @return: a `string` with the content of the file;
+         }    }
-   */         */
+              
- std::string Commit::readFile(fs::path path){         std::string Commit::readFile(fs::path path){
+      // Database Class    // Database Class
-     // Open the stream to 'lock' the file.             // Open the stream to 'lock' the file.
+      Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     std::ifstream f(path, std::ios::in);             std::ifstream f(path, std::ios::in);
+          this->path = path;        this->path = path;
-              
+         }    }
-     // Obtain the size of the file.             // Obtain the size of the file.
+              
-     const auto sz = fs::file_size(path);             const auto sz = fs::file_size(path);
+      // Creating Hash    // Creating Hash
-     std::string result(sz, '\0');             std::string result(sz, '\0');
+      std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-              
+          CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     // Read the whole file into the buffer.             // Read the whole file into the buffer.
+          std::string hash;        std::string hash;
-     f.read(result.data(), sz);             f.read(result.data(), sz);
+          // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-              
+          CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-     return result;             return result;
+              
-    }         }
+          return hash;        return hash;
-              
+         }    }
- // Blob Class         // Blob Class
+              
- Blob::Blob(std::string newdata){         Blob::Blob(std::string newdata){
+      void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     this->data = newdata;             this->data = newdata;
+          std::string Data = object.data;        std::string Data = object.data;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;             // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
+              
-    }         }
+          // TODO: make proper diff here        // TODO: make proper diff here
- std::string Blob::type(){         std::string Blob::type(){
+          // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     return "blob";             return "blob";
+          // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-    }         }
+                  
-              
+          std::string content = Data;        std::string content = Data;
- // Database Class         // Database Class
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
- Database::Database(std::filesystem::path path){         Database::Database(std::filesystem::path path){
+          Store[path] = object.oid;        Store[path] = object.oid;
-     this->path = path;             this->path = path;
+                  
-    }         }
+          // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-              
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
- // Creating Hash         // Creating Hash
+         }    }
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot         std::string calculateSHA1Hex(const std::string& content) { // used some copilot
+              
-     CryptoPP::SHA1 sha1;             CryptoPP::SHA1 sha1;
+      void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string hash;             std::string hash;
+          std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal             // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
+          std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));             CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-              
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     return hash;             return hash;
+          // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-    }         }
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-              
+         }    }
- void Database::storeContentInDB(Blob& object, const std::string& path){         void Database::storeContentInDB(Blob& object, const std::string& path){
+              
-     std::string Data = object.data;             std::string Data = object.data;
+      void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-              
+          std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     // ! I am putiing only the data in the content to simplify the process of diff             // ! I am putiing only the data in the content to simplify the process of diff
+          std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+          // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-                  
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     std::string content = Data;             std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
+          // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     Store[path] = object.oid;             Store[path] = object.oid;
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-                  
+         }    }
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<object.oid<<std::endl; // Hashes are coming out.
+              
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+      // Tree Class    // Tree Class
-    }         }
-              
+       /**    /**
- void Database::storeContentInDB(Tree& object){         void Database::storeContentInDB(Tree& object){
+       * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-     std::string Data = object.ReturnS_tring();             std::string Data = object.ReturnS_tring();
+       * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+       * The entries contains all the files commit info.     * The entries contains all the files commit info.
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
+        */     */
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+      std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
+          std::ostringstream result;        std::ostringstream result;
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+              
-    }         }
+          // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-              
+          // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
- void Database::storeContentInDB(Commit& object){         void Database::storeContentInDB(Commit& object){
+          // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     std::string Data = object.Writtenlines;             std::string Data = object.Writtenlines;
+          // Sort entries by name        // Sort entries by name
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.             std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
+              
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.             // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
+          std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
+              return a.name < b.name;            return a.name < b.name;
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+          });        });
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
+              
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+          for (const auto& entry : entries) {        for (const auto& entry : entries) {
-    }         }
+              std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-              
+              result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
- // Tree Class         // Tree Class
+          }        }
-              
+          // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-  /**         /**
+          return result.str();        return result.str();
-  * This function converts the vector<TreeEntry> to string          * This function converts the vector<TreeEntry> to string
+         }    }
-  * @return String, which will be used in storing the tree to Database.          * @return String, which will be used in storing the tree to Database.
+              
-  * The entries contains all the files commit info.          * The entries contains all the files commit info.
+              
-   */          */
+              
- std::string Tree::ReturnS_tring(){         std::string Tree::ReturnS_tring(){
+      // Helper Functions:    // Helper Functions:
-     std::ostringstream result;             std::ostringstream result;
+      std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-              
+          std::stringstream ss;         std::stringstream ss; 
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream             // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
+          ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     // Using the 'result' stream to concatenate strings and numbers             // Using the 'result' stream to concatenate strings and numbers
+          return ss.str();        return ss.str();
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";             // result << "The answer to life, the universe, and everything is " << 42 << ".";
+         }    }
-     // Sort entries by name             // Sort entries by name
-              
+              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {             std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
+      std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-         return a.name < b.name;                 return a.name < b.name;
+          std::string ans="";        std::string ans="";
-     });             });
+          ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-              
+          ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     for (const auto& entry : entries) {             for (const auto& entry : entries) {
+          return ans;        return ans;
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;                 std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
+         }    }
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";                 result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
+              
-     }             }
+      std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     // std::cout<<result.str()<<std::endl;             // std::cout<<result.str()<<std::endl;
+          std::string ans="";        std::string ans="";
-     return result.str();             return result.str();
+          for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-    }         }
+              if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-              
+                  break;                break;
-              
+              }            }
-              
+              ans+=Objpath[i];            ans+=Objpath[i];
- // Helper Functions:         // Helper Functions:
+          }        }
- std::string timeToString(time_t currtime) {          std::string timeToString(time_t currtime) { 
+          std::string act_ans="";        std::string act_ans="";
-     std::stringstream ss;              std::stringstream ss; 
+          for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.             ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
+              act_ans+=ans[i];            act_ans+=ans[i];
-     return ss.str();             return ss.str();
+          }        }
-    }         }
+          return act_ans;        return act_ans;
-              
+         }    }
-              
+              
- std::string Directory_name_Helper(std::string Objpath){         std::string Directory_name_Helper(std::string Objpath){
+      // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
-     std::string ans="";             std::string ans="";
+      //     z_stream stream;    //     z_stream stream;
-     ans+=Objpath[Objpath.size()-41];             ans+=Objpath[Objpath.size()-41];
+      //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
-     ans+=Objpath[Objpath.size()-40];             ans+=Objpath[Objpath.size()-40];
+      //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
-     return ans;             return ans;
+      //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
-    }         }
+      //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
-              
+      //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- std::string File_name_Helper(std::string Objpath){         std::string File_name_Helper(std::string Objpath){
+      //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
-     std::string ans="";             std::string ans="";
+      //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
-     for(int i=Objpath.size()-1;i>=0;i--){             for(int i=Objpath.size()-1;i>=0;i--){
+      //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
-         if(Objpath[i]=='/'){                 if(Objpath[i]=='/'){
+      //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-             break;                     break;
+              
-         }                 }
+      //     // intializing compression    //     // intializing compression
-         ans+=Objpath[i];                 ans+=Objpath[i];
+      //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-     }             }
+              
-     std::string act_ans="";             std::string act_ans="";
+      //     // compress:    //     // compress:
-     for(int i=ans.size()-1;i>=0;i--){             for(int i=ans.size()-1;i>=0;i--){
+      //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-         act_ans+=ans[i];                 act_ans+=ans[i];
+              
-     }             }
+      //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-     return act_ans;             return act_ans;
+              
-    }         }
+      //     deflateEnd(&stream);    //     deflateEnd(&stream);
-              
+      //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- // std::string Compressing_using_zlib(std::string content){         // std::string Compressing_using_zlib(std::string content){
+      //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     z_stream stream;         //     z_stream stream;
+      //     return compressed;    //     return compressed;
- //     stream.zalloc = nullptr;         //     stream.zalloc = nullptr;
+      // }    // }
- //     stream.zfree = nullptr;         //     stream.zfree = nullptr;
+              
- //     stream.opaque = nullptr;         //     stream.opaque = nullptr;
+      // refractored Compression Logic    // refractored Compression Logic
- //     stream.avail_in = content.size(); // input size         //     stream.avail_in = content.size(); // input size
+      std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
- //     uLongf compressed_size = compressBound(content.size());         //     uLongf compressed_size = compressBound(content.size());
+          if (content.empty()) return "";        if (content.empty()) return "";
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og         //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
+              
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil         //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
+          z_stream stream{};        z_stream stream{};
- //     Bytef* compressed_data = new Bytef[compressed_size];         //     Bytef* compressed_data = new Bytef[compressed_size];
+          stream.zalloc = nullptr;        stream.zalloc = nullptr;
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type         //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
+          stream.zfree = nullptr;        stream.zfree = nullptr;
-              
+          stream.opaque = nullptr;        stream.opaque = nullptr;
- //     // intializing compression         //     // intializing compression
+          stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.         //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
+          stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
+              
- //     // compress:         //     // compress:
+          if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
- //     deflate(&stream, Z_BEST_COMPRESSION);         //     deflate(&stream, Z_BEST_COMPRESSION);
+              throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-              
+          }        }
- //     compressed_size = stream.total_out;         //     compressed_size = stream.total_out;
-              
+          std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
- //     deflateEnd(&stream);         //     deflateEnd(&stream);
+          stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data);         //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
+          stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data         //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
+              
- //     return compressed;         //     return compressed;
+          if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
- // }         // }
+              deflateEnd(&stream);            deflateEnd(&stream);
-              
+              throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
- // refractored Compression Logic         // refractored Compression Logic
+          }        }
- std::string Compressing_using_zlib(std::string& content) {         std::string Compressing_using_zlib(std::string& content) {
+              
-     if (content.empty()) return "";             if (content.empty()) return "";
+          compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
+              
-     z_stream stream{};             z_stream stream{};
+          if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-     stream.zalloc = nullptr;             stream.zalloc = nullptr;
+              throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     stream.zfree = nullptr;             stream.zfree = nullptr;
+          }        }
-     stream.opaque = nullptr;             stream.opaque = nullptr;
+              
-     stream.avail_in = static_cast<uInt>(content.size());             stream.avail_in = static_cast<uInt>(content.size());
+          return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));             stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
+         }    }
-              
+              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {             if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
+              
-         throw std::runtime_error("Failed to initialize zlib deflate.");                 throw std::runtime_error("Failed to initialize zlib deflate.");
+      // Author Class:    // Author Class:
-     }             }
+      std::string Author::to_stringg(){    std::string Author::to_stringg(){
-              
+          std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     std::vector<unsigned char> compressedData(compressBound(content.size()));             std::vector<unsigned char> compressedData(compressBound(content.size()));
+          return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-     stream.avail_out = compressedData.size();             stream.avail_out = compressedData.size();
+         }    }
-     stream.next_out = compressedData.data();             stream.next_out = compressedData.data();
-              
+              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {             if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
+      // History    // History
-         deflateEnd(&stream);                 deflateEnd(&stream);
+      // Refs Class:    // Refs Class:
-         throw std::runtime_error("Failed to deflate data.");                 throw std::runtime_error("Failed to deflate data.");
+      // Constructor of Ref Class    // Constructor of Ref Class
-     }             }
+      Refs::Refs(std::string path){    Refs::Refs(std::string path){
-              
+          this->path = path;        this->path = path;
-     compressedData.resize(stream.total_out);             compressedData.resize(stream.total_out);
+         }    }
-              
+              
-     if (deflateEnd(&stream) != Z_OK) {             if (deflateEnd(&stream) != Z_OK) {
+      // @return the path to the HEAD file    // @return the path to the HEAD file
-         throw std::runtime_error("Failed to finalize zlib deflate.");                 throw std::runtime_error("Failed to finalize zlib deflate.");
+      std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     }             }
+          std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-              
+          return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-     return std::string(compressedData.begin(), compressedData.end());             return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
+      // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
+              
- // Author Class:         // Author Class:
+      void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
- std::string Author::to_stringg(){         std::string Author::to_stringg(){
+          // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::string thecurrTime=timeToString(time);             std::string thecurrTime=timeToString(time);
+          std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     return name+" <"+email+"> "+ thecurrTime;             return name+" <"+email+"> "+ thecurrTime;
+          if (headFile.is_open()) {        if (headFile.is_open()) {
-    }         }
+              headFile << oid;            headFile << oid;
-              
+              headFile.close();            headFile.close();
-              
+          } else {        } else {
- // History         // History
+              throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
- // Refs Class:         // Refs Class:
+          }        }
- // Constructor of Ref Class         // Constructor of Ref Class
+         }    }
- Refs::Refs(std::string path){         Refs::Refs(std::string path){
+              
-     this->path = path;             this->path = path;
+      std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-    }         }
+          std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-              
+          std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
- // @return the path to the HEAD file         // @return the path to the HEAD file
+          if(headFile){        if(headFile){
- std::string Refs::HEAD_path(){         std::string Refs::HEAD_path(){
+              headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");             std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
+          }        }
-     std::cout<<currBranch<<std::endl;             std::cout<<currBranch<<std::endl;
+          return FileContent;        return FileContent;
-     std::cout<<"current Branch: "<<std::endl;             std::cout<<"current Branch: "<<std::endl;
+         }    }
-     return path + "/.yeet/refs/heads/" + currBranch;             return path + "/.yeet/refs/heads/" + currBranch;
+              
-    }         }
+      void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-              
+          for(auto it:Store){        for(auto it:Store){
- // TODO: Updates the HEAD file to the latest commit according to the branch         // TODO: Updates the HEAD file to the latest commit according to the branch
+              std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-              
+          }        }
- void Refs::update_HEAD(std::string oid){         void Refs::update_HEAD(std::string oid){
+          std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     // std::cout<<path<<std::endl;             // std::cout<<path<<std::endl;
+          std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::ofstream headFile(HEAD_path());             std::ofstream headFile(HEAD_path());
+          std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-     if (headFile.is_open()) {             if (headFile.is_open()) {
+              
-         headFile << oid;                 headFile << oid;
+          std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-         headFile.close();                 headFile.close();
+          if(StoreFile.is_open()){        if(StoreFile.is_open()){
-     } else {             } else {
+              for(auto it:Store){            for(auto it:Store){
-         throw std::runtime_error("Failed to open .yeet/refs/heads/ file.\n");                 throw std::runtime_error("Failed to open .yeet/refs/heads/ file.\n");
+                  StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-     }             }
+              }            }
-    }         }
+              StoreFile.close();            StoreFile.close();
-              
+          }        }
- std::string Refs::Read_HEAD(){         std::string Refs::Read_HEAD(){
+              
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);             std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
+          else {        else {
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.             std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
+              throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     if(headFile){             if(headFile){
+          }        }
-         headFile>>FileContent; // All content of the file into the string                 headFile>>FileContent; // All content of the file into the string
+         }    }
-     }             }
+              
-     return FileContent;             return FileContent;
+              
-    }         }
+      // Helper Function for Listing Files:    // Helper Function for Listing Files:
-              
+      void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
- void writeStoreinDB(std::unordered_map<std::string, std::string> Store){         void writeStoreinDB(std::unordered_map<std::string, std::string> Store){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-     for(auto it:Store){             for(auto it:Store){
+              // This is my .yeetignore            // This is my .yeetignore
-         std::cout<<it.first<<" "<<it.second<<std::endl;                 std::cout<<it.first<<" "<<it.second<<std::endl;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-     }             }
+              
-     std::cout<<"Hello"<<std::endl;             std::cout<<"Hello"<<std::endl;
+              if(IGNORE){            if(IGNORE){
-     std::string _actualPath = fs::current_path();             std::string _actualPath = fs::current_path();
+                  continue;                continue;
-     std::cout<<_actualPath<<std::endl;             std::cout<<_actualPath<<std::endl;
+              }            }
-              
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");             std::ofstream StoreFile(_actualPath+"/.yeet/Store");
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-     if(StoreFile.is_open()){             if(StoreFile.is_open()){
+              }             } 
-         for(auto it:Store){                 for(auto it:Store){
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             StoreFile<<it.first<<" "<<it.second<<"\n";                     StoreFile<<it.first<<" "<<it.second<<"\n";
+                  continue;                continue;
-         }                 }
+              }            }
-         StoreFile.close();                 StoreFile.close();
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-              
+         }    }
-     else {             else {
+              
-         throw std::runtime_error("Failed to create .yeet/Store file.\n");                 throw std::runtime_error("Failed to create .yeet/Store file.\n");
+      std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     }             }
+          std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-    }         }
+          if (!file) {        if (!file) {
-              
+              std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-              
+              return {};            return {};
- // Helper Function for Listing Files:         // Helper Function for Listing Files:
+          }        }
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+         }    }
-         // This is my .gitignore                 // This is my .gitignore
+              
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+      std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-              
+          z_stream strm = {};        z_stream strm = {};
-         if(IGNORE){                 if(IGNORE){
+          strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-             continue;                     continue;
+          strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-         }                 }
+              
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+          std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+              
-         }                  } 
+          if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-             continue;                     continue;
+              return {};            return {};
-         }                 }
+          }        }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              
-     }             }
+          int ret;        int ret;
-    }         }
+          do {        do {
-              
+              strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
- std::vector<unsigned char> readFile(const std::string& filename) {         std::vector<unsigned char> readFile(const std::string& filename) {
+              strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-     std::ifstream file(filename, std::ios::binary);             std::ifstream file(filename, std::ios::binary);
+              
-     if (!file) {             if (!file) {
+              ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-         std::cerr << "Cannot open file: " << filename << std::endl;                 std::cerr << "Cannot open file: " << filename << std::endl;
+              
-         return {};                 return {};
+              switch (ret) {            switch (ret) {
-     }             }
+                  case Z_NEED_DICT:                case Z_NEED_DICT:
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());             return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
+                  case Z_DATA_ERROR:                case Z_DATA_ERROR:
-    }         }
+                  case Z_MEM_ERROR:                case Z_MEM_ERROR:
-              
+                      std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {         std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
+                      inflateEnd(&strm);                    inflateEnd(&strm);
-     z_stream strm = {};             z_stream strm = {};
+                      return {};                    return {};
-     strm.total_in = strm.avail_in = compressedData.size();             strm.total_in = strm.avail_in = compressedData.size();
+                  case Z_BUF_ERROR:                case Z_BUF_ERROR:
-     strm.next_in = (Bytef*)compressedData.data();             strm.next_in = (Bytef*)compressedData.data();
+                  case Z_OK:                case Z_OK:
-              
+                      if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size             std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
+                          // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-              
+                          decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-     if (inflateInit(&strm) != Z_OK) {             if (inflateInit(&strm) != Z_OK) {
+                      }                    }
-         std::cerr << "inflateInit failed" << std::endl;                 std::cerr << "inflateInit failed" << std::endl;
+                      break;                    break;
-         return {};                 return {};
+              }            }
-     }             }
+          } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
+              
-     int ret;             int ret;
+          inflateEnd(&strm);        inflateEnd(&strm);
-     do {             do {
+          decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-         strm.avail_out = decompressedData.size() - strm.total_out;                 strm.avail_out = decompressedData.size() - strm.total_out;
+          return decompressedData;        return decompressedData;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);                 strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
+         }    }
-              
+              
-         ret = inflate(&strm, Z_NO_FLUSH);                 ret = inflate(&strm, Z_NO_FLUSH);
+      std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
+              
-         switch (ret) {                 switch (ret) {
+          std::string inputFilename = path;         std::string inputFilename = path; 
-             case Z_NEED_DICT:                     case Z_NEED_DICT:
+          std::string response = "";        std::string response = "";
-             case Z_DATA_ERROR:                     case Z_DATA_ERROR:
+              
-             case Z_MEM_ERROR:                     case Z_MEM_ERROR:
+          auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-                 std::cerr << "inflate error: " << ret << std::endl;                         std::cerr << "inflate error: " << ret << std::endl;
+          if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-                 inflateEnd(&strm);                         inflateEnd(&strm);
+              
-                 return {};                         return {};
+          auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-             case Z_BUF_ERROR:                     case Z_BUF_ERROR:
+          if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-             case Z_OK:                     case Z_OK:
+              
-                 if (strm.avail_out == 0) {                         if (strm.avail_out == 0) {
+          for(auto it:decompressedData){        for(auto it:decompressedData){
-                     // Output buffer is full, increase its size                             // Output buffer is full, increase its size
+              response+=it;            response+=it;
-                     decompressedData.resize(decompressedData.size() * 2);                             decompressedData.resize(decompressedData.size() * 2);
+          }        }
-                 }                         }
+              
-                 break;                         break;
+          return response;        return response;
-         }                 }
+         }    }
-     } while (ret != Z_STREAM_END);             } while (ret != Z_STREAM_END);
-              
+      // Diffs Algo    // Diffs Algo
-     inflateEnd(&strm);             inflateEnd(&strm);
+              
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size             decompressedData.resize(strm.total_out); // Resize to actual decompressed size
+      // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
-     return decompressedData;             return decompressedData;
+      std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-    }         }
+          std::vector<std::string> lines;        std::vector<std::string> lines;
-              
+          std::string temp;        std::string temp;
- std::string Inflate(std::string path){         std::string Inflate(std::string path){
+          for (char c : str) {        for (char c : str) {
-              
+              if (c == '\n') {            if (c == '\n') {
-     std::string inputFilename = path;              std::string inputFilename = path; 
+                  lines.push_back(temp);                lines.push_back(temp);
-     std::string response = "";             std::string response = "";
+                  temp.clear();                temp.clear();
-              
+              } else {            } else {
-     auto compressedData = readFile(inputFilename);             auto compressedData = readFile(inputFilename);
+                  temp += c;                temp += c;
-     if (compressedData.empty()) return "Error in compressed data";             if (compressedData.empty()) return "Error in compressed data";
+              }            }
-              
+          }        }
-     auto decompressedData = decompressData(compressedData);             auto decompressedData = decompressData(compressedData);
+          if (!temp.empty()) {        if (!temp.empty()) {
-     if (decompressedData.empty()) return "Error in decompresssion";             if (decompressedData.empty()) return "Error in decompresssion";
+              lines.push_back(temp);            lines.push_back(temp);
-              
+          }        }
-     for(auto it:decompressedData){             for(auto it:decompressedData){
+          return lines;        return lines;
-         response+=it;                 response+=it;
+         }    }
-     }             }
-              
+      int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-     return response;             return response;
+                               std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-    }         }
+          int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-              
+          if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
- // Diffs Algo         // Diffs Algo
+          if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
+              
- // A function to convert a string to differnt lines. like a vector of strings         // A function to convert a string to differnt lines. like a vector of strings
+          int max_distance = n + m;        int max_distance = n + m;
- std::vector<std::string> splitIntoLines(const std::string& str) {         std::vector<std::string> splitIntoLines(const std::string& str) {
+          int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<std::string> lines;             std::vector<std::string> lines;
+          std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     std::string temp;             std::string temp;
+          trace.clear();        trace.clear();
-     for (char c : str) {             for (char c : str) {
+              
-         if (c == '\n') {                 if (c == '\n') {
+          diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-             lines.push_back(temp);                     lines.push_back(temp);
+              
-             temp.clear();                     temp.clear();
+          for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         } else {                 } else {
+              for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             temp += c;                     temp += c;
+                  int x;                int x;
-         }                 }
+                  if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-     }             }
+                      // Move down                    // Move down
-     if (!temp.empty()) {             if (!temp.empty()) {
+                      x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-         lines.push_back(temp);                 lines.push_back(temp);
+                  } else {                } else {
-     }             }
+                      // Move right                    // Move right
-     return lines;             return lines;
+                      x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-    }         }
+                  }                }
-              
+              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,          int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
+                  int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-                          std::vector<std::vector<int>>& trace) {                                  std::vector<std::vector<int>>& trace) {
+                  while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-     int n = a.size(), m = b.size();             int n = a.size(), m = b.size();
+                      ++x;                    ++x;
-     if (n == 0) return m;  // All insertions if `a` is empty             if (n == 0) return m;  // All insertions if `a` is empty
+                      ++y;                    ++y;
-     if (m == 0) return n;  // All deletions if `b` is empty             if (m == 0) return n;  // All deletions if `b` is empty
+                  }                }
-              
+              
-     int max_distance = n + m;             int max_distance = n + m;
+                  diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array             int diagonal_offset = max_distance;  // To shift diagonals into the array
+              
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal             std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
+                  // If we've reached the end of both strings                // If we've reached the end of both strings
-     trace.clear();             trace.clear();
+                  if (x >= n && y >= m) {                if (x >= n && y >= m) {
-              
+                      trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1             diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
+                      return d;                    return d;
-              
+                  }                }
-     for (int d = 0; d <= max_distance; ++d) {             for (int d = 0; d <= max_distance; ++d) {
+              }            }
-         for (int k = -d; k <= d; k += 2) {                 for (int k = -d; k <= d; k += 2) {
+              trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-             int x;                     int x;
+          }        }
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                     if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
+              
-                 // Move down                         // Move down
+          return -1;  // This should never happen        return -1;  // This should never happen
-                 x = diagonals[diagonal_offset + k + 1];                         x = diagonals[diagonal_offset + k + 1];
+         }    }
-             } else {                     } else {
+              
-                 // Move right                         // Move right
+              
-                 x = diagonals[diagonal_offset + k - 1] + 1;                         x = diagonals[diagonal_offset + k - 1] + 1;
+              
-             }                     }
+      std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-              
+                            const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-             int y = x - k;  // Corresponding y-coordinate                     int y = x - k;  // Corresponding y-coordinate
+                            const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-             while (x < n && y < m && a[x] == b[y]) {                     while (x < n && y < m && a[x] == b[y]) {
+                            int d) {                          int d) {
-                 ++x;                         ++x;
+          std::vector<Edit> result;        std::vector<Edit> result;
-                 ++y;                         ++y;
+          if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-             }                     }
+                  
-              
+          int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-             diagonals[diagonal_offset + k] = x;                     diagonals[diagonal_offset + k] = x;
+          int offset = x + y;        int offset = x + y;
-              
+                  
-             // If we've reached the end of both strings                     // If we've reached the end of both strings
+          for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-             if (x >= n && y >= m) {                     if (x >= n && y >= m) {
+              const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-                 trace.push_back(diagonals);  // Store the final state                         trace.push_back(diagonals);  // Store the final state
+              int k = x - y;            int k = x - y;
-                 return d;                         return d;
+                          
-             }                     }
+              bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         }                 }
+              int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-         trace.push_back(diagonals);  // Store the state for this edit distance                 trace.push_back(diagonals);  // Store the state for this edit distance
+              
-     }             }
+              int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-              
+              int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-     return -1;  // This should never happen             return -1;  // This should never happen
+              
-    }         }
+              while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-              
+                  if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-              
+                      result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-              
+                  } else {                } else {
- std::vector<Edit> diff(const std::vector<std::string>& a,          std::vector<Edit> diff(const std::vector<std::string>& a, 
+                      result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                       const std::vector<std::string>& b,                               const std::vector<std::string>& b,
+                      result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-                       const std::vector<std::vector<int>>& trace,                               const std::vector<std::vector<int>>& trace,
+                  }                }
-                       int d) {                               int d) {
+                  --x;                --x;
-     std::vector<Edit> result;             std::vector<Edit> result;
+                  --y;                --y;
-     if (trace.empty() || d < 0) return result;             if (trace.empty() || d < 0) return result;
+              }            }
-                  
+              
-     int x = a.size(), y = b.size();             int x = a.size(), y = b.size();
+              while (x > x_prev) {            while (x > x_prev) {
-     int offset = x + y;             int offset = x + y;
+                  result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                  
+                  --x;                --x;
-     for (int i = d; i > 0; --i) {             for (int i = d; i > 0; --i) {
+              }            }
-         const std::vector<int>& v = trace[i];                 const std::vector<int>& v = trace[i];
+              
-         int k = x - y;                 int k = x - y;
+              while (y > y_prev) {            while (y > y_prev) {
-                          
+                  result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));                 bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
+                  --y;                --y;
-         int k_prev = down ? k + 1 : k - 1;                 int k_prev = down ? k + 1 : k - 1;
+              }            }
-              
+          }        }
-         int x_prev = v[offset + k_prev];                 int x_prev = v[offset + k_prev];
+              
-         int y_prev = x_prev - k_prev;                 int y_prev = x_prev - k_prev;
+          while (x > 0) {        while (x > 0) {
-              
+              result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         while (x > x_prev && y > y_prev) {                 while (x > x_prev && y > y_prev) {
+              --x;            --x;
-             if (a[x - 1] == b[y - 1]) {                     if (a[x - 1] == b[y - 1]) {
+          }        }
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                         result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
+              
-             } else {                     } else {
+          while (y > 0) {        while (y > 0) {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                         result.push_back(Edit(Edit::DEL, a[x - 1], ""));
+              result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                         result.push_back(Edit(Edit::INS, "", b[y - 1]));
+              --y;            --y;
-             }                     }
+          }        }
-             --x;                     --x;
+              
-             --y;                     --y;
+          std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-         }                 }
-              
+          // for (const auto& edit : result) {        // for (const auto& edit : result) {
-         while (x > x_prev) {                 while (x > x_prev) {
+          //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                     result.push_back(Edit(Edit::DEL, a[x - 1], ""));
+          //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-             --x;                     --x;
+          //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-         }                 }
+          //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-              
+          //             << std::endl;        //             << std::endl;
-         while (y > y_prev) {                 while (y > y_prev) {
+          // }        // }
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));                     result.push_back(Edit(Edit::INS, "", b[y - 1]));
+              
-             --y;                     --y;
+          return result;        return result;
-         }                 }
+         }    }
-     }             }
-              
+              
-     while (x > 0) {             while (x > 0) {
+      // Storing diffs in file    // Storing diffs in file
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));
+      void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-         --x;                 --x;
+          std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     }             }
+          if (diff_file.is_open()) {        if (diff_file.is_open()) {
-              
+              for (const auto& edit : edits) {            for (const auto& edit : edits) {
-     while (y > 0) {             while (y > 0) {
+                  std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));
+                  std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-         --y;                 --y;
+                  std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-     }             }
+                  diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-              
+              }            }
-     std::reverse(result.begin(), result.end());             std::reverse(result.begin(), result.end());
+              diff_file.close();            diff_file.close();
-              
+          } else {        } else {
-     // for (const auto& edit : result) {             // for (const auto& edit : result) {
+              std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :              //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
+          }        }
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))             //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
+         }    }
-     //             << ", Orig: " << edit.old_line             //             << ", Orig: " << edit.old_line
+              
-     //             << ", Updated: " << edit.new_line             //             << ", Updated: " << edit.new_line
+      namespace Branch{    namespace Branch{
-     //             << std::endl;             //             << std::endl;
+          void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-     // }             // }
+              // check if the names is valid:            // check if the names is valid:
-              
+              if(BranchName.empty()) return;            if(BranchName.empty()) return;
-     return result;             return result;
+                          
-    }         }
+              std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-              
+              if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
- // Storing diffs in file         // Storing diffs in file
+                  // invalid name of the branch                // invalid name of the branch
- void storeDiff(const std::vector<Edit>& edits) {         void storeDiff(const std::vector<Edit>& edits) {
+                  std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);             std::ofstream diff_file(".yeet/Diffs", std::ios::app);
+                  return;                return;
-     if (diff_file.is_open()) {             if (diff_file.is_open()) {
+              }            }
-         for (const auto& edit : edits) {                 for (const auto& edit : edits) {
+              
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                     std::string tag = (edit.type == Edit::INS) ? "+" : "-";
+              std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                     std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
+              
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                     std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
+              if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                     diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
+                  std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-         }                 }
+                  return;                return;
-         diff_file.close();                 diff_file.close();
+              }            }
-     } else {             } else {
+              
-         std::cerr << "Unable to open file for writing diffs" << std::endl;                 std::cerr << "Unable to open file for writing diffs" << std::endl;
+              // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-     }             }
+              // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-    }         }
+              // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-              
+                          
- namespace Branch{         namespace Branch{
+              
-     void createBranch(std::string BranchName, fs::path currPath){             void createBranch(std::string BranchName, fs::path currPath){
+              // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // check if the names is valid:                 // check if the names is valid:
+              // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-         if(BranchName.empty()) return;                 if(BranchName.empty()) return;
+              
-                          
+              // creating the new bracnh file:            // creating the new bracnh file:
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");                 std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
+              std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
+              
-         if(std::regex_match(BranchName, reg)){                 if(std::regex_match(BranchName, reg)){
+              // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-             // invalid name of the branch                     // invalid name of the branch
+              // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-             std::cout<<"Invalid name of the Branch"<<std::endl;                     std::cout<<"Invalid name of the Branch"<<std::endl;
+                          
-             return;                     return;
+              std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         }                 }
+              // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-              
+                          
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;                 std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
+              // TODO: Test this function            // TODO: Test this function
-              
+              Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-         if(fs::exists(actPath)){                 if(fs::exists(actPath)){
+              
-             std::cout<<"ERROR::Branch with this name already exists"<<std::endl;                     std::cout<<"ERROR::Branch with this name already exists"<<std::endl;
+              std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-             return;                     return;
+              if(f.is_open()){            if(f.is_open()){
-         }                 }
+                  f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-              
+                  f.close();                f.close();
-         // TODO: store the current commit in the new file                 // TODO: store the current commit in the new file
+              }            }
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.                 // get the oid, update the update_HEAD function of the REfs classs. make refs object.
+              else {            else {
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig                 // then pass the branch name also to the function to get telll which branch it shoul upate. ig
+                  throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-                          
+              }                   }       
-         // setting up the refs obj                 // setting up the refs obj
+              
-         Refs ref(currPath);                 Refs ref(currPath);
+          }        }
-              
+          void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         // updating the head file with the latest commit.                 // updating the head file with the latest commit.
+              std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-         // putting content of the master into the new branch file.                 // putting content of the master into the new branch file.
+                          
-              
+              std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         // creating the new bracnh file:                 // creating the new bracnh file:
+              int count = 1;            int count = 1;
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");                 std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
+              for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-                          
+                  std::cout << count <<" ";                std::cout << count <<" ";
-         std::cout<<"PrevBranch "<<PrevBranch<<std::endl;                 std::cout<<"PrevBranch "<<PrevBranch<<std::endl;
+                  std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-                          
+                  std::fstream ff(it.path());                std::fstream ff(it.path());
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);                 std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
+                  if(ff.is_open()){                if(ff.is_open()){
-         // making the file for the new Branch and storing the prevBranch ID into it.                 // making the file for the new Branch and storing the prevBranch ID into it.
+                      std::string line;                    std::string line;
-                          
+                      while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-         ref.update_HEAD(CommitID_ofPrevBranch);                 ref.update_HEAD(CommitID_ofPrevBranch);
+                          std::cout << line << std::endl;                        std::cout << line << std::endl;
-              
+                      }                    }
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.                 std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
+                      ff.close();                    ff.close();
-         if(f.is_open()){                 if(f.is_open()){
+                  }                }
-             f<<CommitID_ofPrevBranch;                     f<<CommitID_ofPrevBranch;
+                  count++;                count++;
-             f.close();                     f.close();
-         }         }            }
+              
-         else {                 else {
+          }        }
-             throw std::runtime_error("Failed to create new Branch file.\n");                     throw std::runtime_error("Failed to create new Branch file.\n");
+              
-         }                        }       
+          void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-              
+              std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-     }             }
+              std::stringstream ss;            std::stringstream ss;
-     void SeeBranches(std::filesystem::path path){             void SeeBranches(std::filesystem::path path){
+              if(ff.is_open()){            if(ff.is_open()){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";                 std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
+                  ss << ff.rdbuf();                ss << ff.rdbuf();
-                          
+                  ff.close();                ff.close();
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {                 for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
+              }            }
-             std::cout << it.path().filename().string() << " ";                     std::cout << it.path().filename().string() << " ";
+              std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-             std::fstream ff(it.path());                     std::fstream ff(it.path());
+          }        }
-             if(ff.is_open()){                     if(ff.is_open()){
+         }    }
-                 std::string line;                         std::string line;
+              
-                 while (std::getline(ff, line)) {                         while (std::getline(ff, line)) {
+              
-                     std::cout << line << std::endl;                             std::cout << line << std::endl;
+      namespace CheckOut{    namespace CheckOut{
-                 }                         }
+          void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-                 ff.close();                         ff.close();
+              std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-             }                     }
+              
-         }                 }
+              if(fs::exists(actPath)){            if(fs::exists(actPath)){
-              
+                  std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-     }             }
+                  std::stringstream ss;                std::stringstream ss;
-    }         }
+                  if(ff.is_open()){                if(ff.is_open()){
-              
+                      ss << ff.rdbuf();                    ss << ff.rdbuf();
-              
+                      std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
- namespace CheckOut{         namespace CheckOut{
+                      if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){             void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
+                          std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;                 std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
+                          return;                        return;
-              
+                      }                    }
-         if(fs::exists(actPath)){                 if(fs::exists(actPath)){
+                      ff << swtichToBranchName;                     ff << swtichToBranchName; 
-             std::ofstream ff(path.string() + "/.yeet/Branch");                     std::ofstream ff(path.string() + "/.yeet/Branch");
+                      ff.close();                    ff.close();
-             if(ff.is_open()){                     if(ff.is_open()){
+                      std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-                 ff << swtichToBranchName;                          ff << swtichToBranchName; 
+                  }                }
-                 ff.close();                         ff.close();
+              
-             }                     }
-         }         }            }
-         else{         else{            else{
+                  std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             std::cout<<"ERROR::Branch with this name already exists"<<std::endl;                     std::cout<<"ERROR::Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
+      #include<string>    #include<string>
+      #include<vector>    #include<vector>
+      #include<filesystem>    #include<filesystem>
+      #include<zlib.h> // for database class    #include<zlib.h> // for database class
+      #include<cryptopp/sha.h> // for database class    #include<cryptopp/sha.h> // for database class
+      #include<iostream>    #include<iostream>
+      #include<fstream>    #include<fstream>
+      #include<sstream>    #include<sstream>
+      #include<iomanip> // for input/output manipulators    #include<iomanip> // for input/output manipulators
+      #include<algorithm>    #include<algorithm>
+      #include<unordered_set>    #include<unordered_set>
+      #include <iomanip>    #include <iomanip>
+              
+      // Structures:    // Structures:
+              
+      struct Edit    struct Edit
+         {    {
+          enum Type        enum Type
+          {        {
+              EQL,            EQL,
+              DEL,            DEL,
+              INS            INS
+          } type;        } type;
+          std::string old_line;        std::string old_line;
+          std::string new_line;        std::string new_line;
+              
+          Edit(Type t, const std::string &oldLine, const std::string &newLine)        Edit(Type t, const std::string &oldLine, const std::string &newLine)
+              : type(t), old_line(oldLine), new_line(newLine) {}            : type(t), old_line(oldLine), new_line(newLine) {}
+        };    };
+              
+              
+      // Helper Functions    // Helper Functions
- #include<string>         #include<string>
- #include<vector>         #include<vector>
- #include<filesystem>         #include<filesystem>
- #include<zlib.h> // for database class         #include<zlib.h> // for database class
- #include<cryptopp/sha.h> // for database class         #include<cryptopp/sha.h> // for database class
- #include<iostream>         #include<iostream>
- #include<fstream>         #include<fstream>
- #include<sstream>         #include<sstream>
- #include<iomanip> // for input/output manipulators         #include<iomanip> // for input/output manipulators
- #include<algorithm>         #include<algorithm>
- #include<unordered_set>         #include<unordered_set>
- #include <iomanip>         #include <iomanip>
-              
- // Structures:         // Structures:
-              
- struct Edit         struct Edit
-    {         {
-     enum Type             enum Type
-     {             {
-         EQL,                 EQL,
-         DEL,                 DEL,
-         INS                 INS
-     } type;             } type;
-     std::string old_line;             std::string old_line;
-     std::string new_line;             std::string new_line;
-              
-     Edit(Type t, const std::string &oldLine, const std::string &newLine)             Edit(Type t, const std::string &oldLine, const std::string &newLine)
-         : type(t), old_line(oldLine), new_line(newLine) {}                 : type(t), old_line(oldLine), new_line(newLine) {}
-   };         };
-              
-              
- // Helper Functions         // Helper Functions
- void writeStoreinDB(std::unordered_map<std::string, std::string> Store);         void writeStoreinDB(std::unordered_map<std::string, std::string> Store);
+      void writeStoreinDB(std::map<std::string, std::string> Store);    void writeStoreinDB(std::map<std::string, std::string> Store);
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath); void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath);    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath);
- std::string Inflate(std::string path); std::string Inflate(std::string path);    std::string Inflate(std::string path);
- std::vector<std::string> splitIntoLines(const std::string& str); std::vector<std::string> splitIntoLines(const std::string& str);    std::vector<std::string> splitIntoLines(const std::string& str);
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace);                          std::vector<std::vector<int>>& trace);                             std::vector<std::vector<int>>& trace);
- void Backtrack(std::string a, std::string b, std::vector<std::vector<int>> trace); void Backtrack(std::string a, std::string b, std::vector<std::vector<int>> trace);    void Backtrack(std::string a, std::string b, std::vector<std::vector<int>> trace);
- std::vector<Edit> diff(const std::vector<std::string> &a, const std::vector<std::string> &b, const std::vector<std::vector<int>> &trace, int d); std::vector<Edit> diff(const std::vector<std::string> &a, const std::vector<std::string> &b, const std::vector<std::vector<int>> &trace, int d);    std::vector<Edit> diff(const std::vector<std::string> &a, const std::vector<std::string> &b, const std::vector<std::vector<int>> &trace, int d);
- void storeDiff(const std::vector<Edit>& edits); void storeDiff(const std::vector<Edit>& edits);    void storeDiff(const std::vector<Edit>& edits);
-              
- void YeetAdd(); void YeetAdd();    void YeetAdd();
-              
- void YeetStatus(std::string path); void YeetStatus(std::string path);    void YeetStatus(std::string path);
-              
- void YeetInit(std::string path); void YeetInit(std::string path);    void YeetInit(std::string path);
-              
- class Tree; class Tree;    class Tree;
- class Blob{ class Blob{    class Blob{
-     public:     public:        public:
-         std::string oid;         std::string oid;            std::string oid;
-         std::string data;         std::string data;            std::string data;
-         // Will not work, As I have to make a custom hash function for this         // Will not work, As I have to make a custom hash function for this            // Will not work, As I have to make a custom hash function for this
-         // std::unordered_set<std::pair<std::string, std::string>> BlobStore;          // std::unordered_set<std::pair<std::string, std::string>> BlobStore;             // std::unordered_set<std::pair<std::string, std::string>> BlobStore; 
-         Blob(std::string data);         Blob(std::string data);            Blob(std::string data);
-         std::string type();         std::string type();            std::string type();
-   };   };    };
-              
- class Commit{ class Commit{    class Commit{
-     public:     public:        public:
-         std::string path;         std::string path;            std::string path;
-         std::string TreeOID;         std::string TreeOID;            std::string TreeOID;
-         std::string AuthorData;         std::string AuthorData;            std::string AuthorData;
-         std::string CommitMessage;         std::string CommitMessage;            std::string CommitMessage;
-         std::string Writtenlines;         std::string Writtenlines;            std::string Writtenlines;
-         std::string oid;         std::string oid;            std::string oid;
-         std::string parent;         std::string parent;            std::string parent;
-         std::vector<std::string> IGNORE = {".","..",".git",".yeet"};         std::vector<std::string> IGNORE = {".","..",".git",".yeet"};            std::vector<std::string> IGNORE = {".","..",".git",".yeet"};
-         Commit(std::string path);         Commit(std::string path);            Commit(std::string path);
-         Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);         Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);            Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage, std::string parent);
-         void CommitMain(std::string path);         void CommitMain(std::string path);            void CommitMain(std::string path);
-         void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);         void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);            void ListFiles(std::string path,std::vector<std::filesystem::path>& FilePath);
-         std::string readFile(std::filesystem::path path);         std::string readFile(std::filesystem::path path);            std::string readFile(std::filesystem::path path);
-     };     };        };
-              
- std::string Directory_name_Helper(std::string Objpath); std::string Directory_name_Helper(std::string Objpath);    std::string Directory_name_Helper(std::string Objpath);
- std::string File_name_Helper(std::string Objpath); std::string File_name_Helper(std::string Objpath);    std::string File_name_Helper(std::string Objpath);
-  /**  /**    /**
-  * The below code is setup of zlib compression  * The below code is setup of zlib compression     * The below code is setup of zlib compression
-     https://www.zlib.net/manual.html#Basic     https://www.zlib.net/manual.html#Basic        https://www.zlib.net/manual.html#Basic
-     @param the content of be compressed     @param the content of be compressed        @param the content of be compressed
-     @return The compressed string     @return The compressed string        @return The compressed string
-   */   */    */
- std::string Compressing_using_zlib(std::string& content); std::string Compressing_using_zlib(std::string& content);    std::string Compressing_using_zlib(std::string& content);
- class Database{ class Database{    class Database{
-     private:     private:        private:
-         /**         /**            /**
-          *  writing the object to disk          *  writing the object to disk             *  writing the object to disk
-          *  @param `oid`: The object id that is the hexadecimal hash of file content.          *  @param `oid`: The object id that is the hexadecimal hash of file content.             *  @param `oid`: The object id that is the hexadecimal hash of file content.
-          *  @param `content`: The content of the file          *  @param `content`: The content of the file             *  @param `content`: The content of the file
-          */          */             */
-         void write_object(std::string oid,std::string content){         void write_object(std::string oid,std::string content){            void write_object(std::string oid,std::string content){
-             try             try                try
-             {             {                {
-                 std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);                 std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);                    std::string obj_path = this->path.generic_string() + "/" + oid.substr(0,2) + "/" + oid.substr(2,oid.size()-1);
-                 // std::cout<<"The obj path"<<obj_path<<std::endl;                 // std::cout<<"The obj path"<<obj_path<<std::endl;                    // std::cout<<"The obj path"<<obj_path<<std::endl;
-                 std::string Dir_name = Directory_name_Helper(obj_path);                 std::string Dir_name = Directory_name_Helper(obj_path);                    std::string Dir_name = Directory_name_Helper(obj_path);
-                 /** Actual File Path to the object created. */                 /** Actual File Path to the object created. */                    /** Actual File Path to the object created. */
-                 std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();                 std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();                    std::string File_Path = (this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str();
-                 if(std::filesystem::exists(File_Path)) return;                 if(std::filesystem::exists(File_Path)) return;                    if(std::filesystem::exists(File_Path)) return;
-                 // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;                 // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;                    // std::cout<<"Hello, I am the directory: "<<Dir_name<<std::endl;
-                 std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);                 std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);                    std::filesystem::create_directory(this->path.generic_string()+"/"+Dir_name);
-                 /** res contains the return value of the `touch` command. */                 /** res contains the return value of the `touch` command. */                    /** res contains the return value of the `touch` command. */
-                 int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());                 int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());                    int res = std::system(("touch " + this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path)).c_str());
-                 if(res != 0) std::runtime_error("touch is not working \n");                 if(res != 0) std::runtime_error("touch is not working \n");                    if(res != 0) std::runtime_error("touch is not working \n");
-                 // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;                 // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;                    // std::cout<<"Hello, I am the File: "<<this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path).c_str()<<std::endl;
-                 // Compressing the content                 // Compressing the content                    // Compressing the content
-                 std::string compressed_data = Compressing_using_zlib(content);                 std::string compressed_data = Compressing_using_zlib(content);                    std::string compressed_data = Compressing_using_zlib(content);
-                 std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);                 std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);                    std::ofstream f(this->path.generic_string()+"/"+Dir_name+"/"+File_name_Helper(obj_path),std::ios::out | std::ios::binary);
-                 if(f.is_open()){                 if(f.is_open()){                    if(f.is_open()){
-                     f.write(compressed_data.c_str(),compressed_data.size());                     f.write(compressed_data.c_str(),compressed_data.size());                        f.write(compressed_data.c_str(),compressed_data.size());
-                     f.close();                     f.close();                        f.close();
-                 }                 }                    }
-                 else{                 else{                    else{
-                     std::runtime_error("Unable to write in Commit Blob Files!!");                     std::runtime_error("Unable to write in Commit Blob Files!!");                        std::runtime_error("Unable to write in Commit Blob Files!!");
-                 }                 }                    }
-             }             }                }
-             catch(const std::exception& e)             catch(const std::exception& e)                catch(const std::exception& e)
-             {             {                {
-                 std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';                    std::cerr << e.what() << '\n';
-             }             }                }
-         }         }            }
-     public:     public:        public:
-         std::filesystem::path path;         std::filesystem::path path;            std::filesystem::path path;
-         std::unordered_map<std::string, std::string> Store;                 std::unordered_map<std::string, std::string> Store;
+              std::map<std::string, std::string> Store;            std::map<std::string, std::string> Store;
-         Database(std::filesystem::path path);         Database(std::filesystem::path path);            Database(std::filesystem::path path);
-         // Its storing the blob store also. ie the pair of file path and its oid.         // Its storing the blob store also. ie the pair of file path and its oid.            // Its storing the blob store also. ie the pair of file path and its oid.
-         void storeContentInDB(Blob& object,const std::string &path);         void storeContentInDB(Blob& object,const std::string &path);            void storeContentInDB(Blob& object,const std::string &path);
-         void storeContentInDB(Tree& object);         void storeContentInDB(Tree& object);            void storeContentInDB(Tree& object);
-         void storeContentInDB(Commit& object);         void storeContentInDB(Commit& object);            void storeContentInDB(Commit& object);
-   };   };    };
-              
-  /**  /**    /**
-  * An TreeEntry is a simple structure that exists to package up the information that Tree needs to  * An TreeEntry is a simple structure that exists to package up the information that Tree needs to     * An TreeEntry is a simple structure that exists to package up the information that Tree needs to
- know about its contents: the filename, and the object ID. Tree will also need to know the mode know about its contents: the filename, and the object ID. Tree will also need to know the mode    know about its contents: the filename, and the object ID. Tree will also need to know the mode
- of each file, but for now all our source code is in non-executable regular files, so we will hard- of each file, but for now all our source code is in non-executable regular files, so we will hard-    of each file, but for now all our source code is in non-executable regular files, so we will hard-
- code the 100644 mode string that appears in the tree file. code the 100644 mode string that appears in the tree file.    code the 100644 mode string that appears in the tree file.
-   */   */    */
- class TreeEntry { class TreeEntry {    class TreeEntry {
- public: public:    public:
-     // operator overloaded     // operator overloaded        // operator overloaded
-     TreeEntry& operator=(const TreeEntry& other) {     TreeEntry& operator=(const TreeEntry& other) {        TreeEntry& operator=(const TreeEntry& other) {
-         if (this != &other) { // Protect against self-assignment         if (this != &other) { // Protect against self-assignment            if (this != &other) { // Protect against self-assignment
-             this->name = other.name;             this->name = other.name;                this->name = other.name;
-             this->oid = other.oid;             this->oid = other.oid;                this->oid = other.oid;
-             this->stat = other.stat;             this->stat = other.stat;                this->stat = other.stat;
-         }         }            }
-         return *this;         return *this;            return *this;
-     }     }        }
-     // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below     // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below        // TreeEntry(const std::string& name, const std::string& oid) : name(name), oid(oid) {} // same as below
-     TreeEntry(std::string name, std::string oid,std::string stat) {     TreeEntry(std::string name, std::string oid,std::string stat) {        TreeEntry(std::string name, std::string oid,std::string stat) {
-         this->name = name;         this->name = name;            this->name = name;
-         this->oid = oid;         this->oid = oid;            this->oid = oid;
-         this->stat = stat;         this->stat = stat;            this->stat = stat;
-     }     }        }
-              
-     // copy constructor     // copy constructor        // copy constructor
-     TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}     TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}        TreeEntry(const TreeEntry& other) : name(other.name), oid(other.oid), stat(other.stat) {}
-     std::string name;     std::string name;        std::string name;
-     std::string oid;     std::string oid;        std::string oid;
-     // TODO: Customize these codes later for yeet.     // TODO: Customize these codes later for yeet.        // TODO: Customize these codes later for yeet.
-     const std::string REGULAR_MODE = "100644";     const std::string REGULAR_MODE = "100644";        const std::string REGULAR_MODE = "100644";
-     const std::string EXE_MODE = "100755";     const std::string EXE_MODE = "100755";        const std::string EXE_MODE = "100755";
-              
-     std::string stat;     std::string stat;        std::string stat;
-              
-   };   };    };
-              
-              
- class Tree{ class Tree{    class Tree{
-     // const std::string ENTRY_FORMAT = "Z*H40"; no need     // const std::string ENTRY_FORMAT = "Z*H40"; no need        // const std::string ENTRY_FORMAT = "Z*H40"; no need
-     public:     public:        public:
-              
-         std::string oid;         std::string oid;            std::string oid;
-         std::vector<TreeEntry> entries;         std::vector<TreeEntry> entries;            std::vector<TreeEntry> entries;
-         Tree(std::vector<TreeEntry>& entries){         Tree(std::vector<TreeEntry>& entries){            Tree(std::vector<TreeEntry>& entries){
-             this->entries = entries;             this->entries = entries;                this->entries = entries;
-         }         }            }
-              
-         std::string Type(){ return "tree"; }         std::string Type(){ return "tree"; }            std::string Type(){ return "tree"; }
-         std::string ReturnS_tring();         std::string ReturnS_tring();            std::string ReturnS_tring();
-   };   };    };
-              
-              
- class Author{ class Author{    class Author{
-     public:     public:        public:
-         std::string name;         std::string name;            std::string name;
-         std::string email;         std::string email;            std::string email;
-         time_t time;         time_t time;            time_t time;
-         Author(std::string name,std::string email,time_t& time){         Author(std::string name,std::string email,time_t& time){            Author(std::string name,std::string email,time_t& time){
-             this->email=email;             this->email=email;                this->email=email;
-             this->name=name;             this->name=name;                this->name=name;
-             this->time=time;             this->time=time;                this->time=time;
-         }         }            }
-         std::string to_stringg();         std::string to_stringg();            std::string to_stringg();
-   };   };    };
-              
-              
- // For History: // For History:    // For History:
- class Refs{ class Refs{    class Refs{
-     public:     public:        public:
-         std::string path;         std::string path;            std::string path;
-         std::string oid;         std::string oid;            std::string oid;
-         Refs(std::string path);         Refs(std::string path);            Refs(std::string path);
-         void update_HEAD(std::string oid);         void update_HEAD(std::string oid);            void update_HEAD(std::string oid);
-         std::string HEAD_path();         std::string HEAD_path();            std::string HEAD_path();
-         std::string Read_HEAD();         std::string Read_HEAD();            std::string Read_HEAD();
-   };   };    };
-              
-              
- class Index{ class Index{    class Index{
-     public:     public:        public:
-         std::vector<std::filesystem::path> Entries;         std::vector<std::filesystem::path> Entries;            std::vector<std::filesystem::path> Entries;
-   };   };    };
-              
- class Diffs{ class Diffs{    class Diffs{
-     public:     public:        public:
-         std::string path;         std::string path;            std::string path;
-         std::string diffs;         std::string diffs;            std::string diffs;
-                              
-   };   };    };
-              
- // For Diffs // For Diffs    // For Diffs
-              
- class Printer { class Printer {    class Printer {
- public: public:    public:
-     Printer(std::ostream& output = std::cout) : output(output) {}     Printer(std::ostream& output = std::cout) : output(output) {}        Printer(std::ostream& output = std::cout) : output(output) {}
-     void print(const std::vector<Edit> &diff)     void print(const std::vector<Edit> &diff)        void print(const std::vector<Edit> &diff)
-     {     {        {
-         // Store in Diff file         // Store in Diff file            // Store in Diff file
-         storeDiff(diff);          storeDiff(diff);             storeDiff(diff); 
-         // for (const auto &edit : diff)         // for (const auto &edit : diff)            // for (const auto &edit : diff)
-         // {         // {            // {
-                                          
-         //     // Print out in the terminal         //     // Print out in the terminal            //     // Print out in the terminal
-         //     // print_edit(edit);         //     // print_edit(edit);            //     // print_edit(edit);
-         // }         // }            // }
-     }     }        }
-                  
-              
- private: private:    private:
-     std::ostream& output;     std::ostream& output;        std::ostream& output;
-     void print_edit(const Edit &edit)     void print_edit(const Edit &edit)        void print_edit(const Edit &edit)
-     {     {        {
-         std::string col, reset = "\033[39m";         std::string col, reset = "\033[39m";            std::string col, reset = "\033[39m";
-         std::string tag;         std::string tag;            std::string tag;
-                              
-              
-         switch (edit.type)         switch (edit.type)            switch (edit.type)
-         {         {            {
-         case Edit::EQL:         case Edit::EQL:            case Edit::EQL:
-             col = "";             col = "";                col = "";
-             tag = " ";             tag = " ";                tag = " ";
-             break;             break;                break;
-         case Edit::DEL:         case Edit::DEL:            case Edit::DEL:
-             col = "\033[31m";             col = "\033[31m";                col = "\033[31m";
-             tag = "-";             tag = "-";                tag = "-";
-             break;             break;                break;
-         case Edit::INS:         case Edit::INS:            case Edit::INS:
-             col = "\033[32m";             col = "\033[32m";                col = "\033[32m";
-             tag = "+";             tag = "+";                tag = "+";
-             break;             break;                break;
-         }         }            }
-              
-         std::string old_line = edit.old_line.empty() ? "" : edit.old_line;         std::string old_line = edit.old_line.empty() ? "" : edit.old_line;            std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-         std::string new_line = edit.new_line.empty() ? "" : edit.new_line;         std::string new_line = edit.new_line.empty() ? "" : edit.new_line;            std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-              
-         // output << col << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << reset << std::endl;         // output << col << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << reset << std::endl;            // output << col << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << reset << std::endl;
-              
-     }     }        }
-   };   };    };
-              
-              
- namespace Branch{ namespace Branch{    namespace Branch{
+          void currBranch(std::filesystem::path currPath);        void currBranch(std::filesystem::path currPath);
+          void HandleBranch();        void HandleBranch();
+          void createBranch(std::string BranchName, std::filesystem::path currPath);        void createBranch(std::string BranchName, std::filesystem::path currPath);
-     void HandleBranch();             void HandleBranch();
+          void deleteBranch();        void deleteBranch();
-     void createBranch(std::string BranchName, std::filesystem::path currPath);             void createBranch(std::string BranchName, std::filesystem::path currPath);
+          void SeeBranches(std::filesystem::path path);        void SeeBranches(std::filesystem::path path);
-     void deleteBranch();             void deleteBranch();
+         }    }
-     void SeeBranches(std::filesystem::path path);             void SeeBranches(std::filesystem::path path);
+              
-    }         }
+      namespace Helper{    namespace Helper{
-              
+          std::string readFile(std::string path);        std::string readFile(std::string path);
- namespace Helper{         namespace Helper{
+          void update_HEAD(std::string oid, std::string NewBranchPath);        void update_HEAD(std::string oid, std::string NewBranchPath);
-     std::string readFile(std::string path);             std::string readFile(std::string path);
-    }    }    }
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName);     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName);        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName);
-    }    }    }
+      ### Notice:     ### Notice: 
+      This has not been fully tested on Windows yet, so if you are using Windows and have found some issues, please give me feedback. :)    This has not been fully tested on Windows yet, so if you are using Windows and have found some issues, please give me feedback. :)
+      using the filesystem library to work with different filesystems.    using the filesystem library to work with different filesystems.
+              
+      # Introduction:    # Introduction:
+      - This is a project to make my own git with some improvements.    - This is a project to make my own git with some improvements.
+      - Through this, I also want to learn the backend of version control and make my grasp stronger on C++.    - Through this, I also want to learn the backend of version control and make my grasp stronger on C++.
+      - I am trying to solve some of my personal problems and gain an understanding of the Computer filesystem and its management.    - I am trying to solve some of my personal problems and gain an understanding of the Computer filesystem and its management.
+              
+      ## HOW TO USE IN LINUX/UNIX ENVIRONMENT    ## HOW TO USE IN LINUX/UNIX ENVIRONMENT
+      1. Clone/Download this repository.    1. Clone/Download this repository.
+      2. Open the terminal and navigate to this directory.    2. Open the terminal and navigate to this directory.
+      3. Run the following command:    3. Run the following command:
+      ```bash    ```bash
+       g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet      g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet 
+       ```    ```
+      4. Set the permissions for the executable file:    4. Set the permissions for the executable file:
+      ```bash    ```bash
+      chmod a+x yeet    chmod a+x yeet
+       ```    ```
+      5. Set the environment variable:    5. Set the environment variable:
+      ```bash    ```bash
+      export PATH=$PATH:/path/to/yeet/repo/    export PATH=$PATH:/path/to/yeet/repo/
+       ```    ```
+      6. Run the executable file and initialize an empty yeet repo:    6. Run the executable file and initialize an empty yeet repo:
+      ```bash    ```bash
+      yeet init .    yeet init .
+       ```    ```
+              
+      ## CAREFUL    ## CAREFUL
+      - For now, You can only make git init in the pwd, You can not do git init /home/abc/some/folder. This will not work. It will be executed but will give to rise complications. If you want to init in a folder, you have to cd to that folder and then run the command.     - For now, You can only make git init in the pwd, You can not do git init /home/abc/some/folder. This will not work. It will be executed but will give to rise complications. If you want to init in a folder, you have to cd to that folder and then run the command. 
+      - You can only yeet init in a already made directory. You can not yeet init in a directory that does not exist.    - You can only yeet init in a already made directory. You can not yeet init in a directory that does not exist.
+              
+      ## FUTURE PLANS    ## FUTURE PLANS
+      - Implement diffs algo on the full repository.    - Implement diffs algo on the full repository.
+      -  Check using diffs algo that whether there are any changes in the files before letting the user to commit it changes.    -  Check using diffs algo that whether there are any changes in the files before letting the user to commit it changes.
+              
+              
+      ## USE COMMAND:    ## USE COMMAND:
+      - For Commit:    - For Commit:
+      ` g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`    ` g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`
+              
+      ## Make Sure:    ## Make Sure:
+      you have lcryptopp installed in your system. I am using fedora and I installed it using:    you have lcryptopp installed in your system. I am using fedora and I installed it using:
+      ```bash    ```bash
+      sudo dnf install cryptopp-devel    sudo dnf install cryptopp-devel
+       ```    ```
+      Search according to your OS.    Search according to your OS.
+              
+      ## Testing The compression:    ## Testing The compression:
+      Use the Testing_inflating.cpp file as follow for decompressing your blob data:     Use the Testing_inflating.cpp file as follow for decompressing your blob data: 
+      ` g++ -lz Testing_Inflating.cpp -o Testing_inflate && ./Testing_inflate`    ` g++ -lz Testing_Inflating.cpp -o Testing_inflate && ./Testing_inflate`
+              
+      You can also use the following command:    You can also use the following command:
+      `zlib-flate -uncompress < .yeet/objects/5d/8d5a1314ec0f6a5b7f8ac27dfbf53ed82bf3fe > test-abc`    `zlib-flate -uncompress < .yeet/objects/5d/8d5a1314ec0f6a5b7f8ac27dfbf53ed82bf3fe > test-abc`
+              
+              
+              
+              
+      `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet init .`    `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet init .`
+      `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`    `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`
+              
+      ## FOR BETTER DEBUGGING:    ## FOR BETTER DEBUGGING:
+      `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -fdiagnostics-all-candidates`    `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -fdiagnostics-all-candidates`
+              
+      ## COMMENTS/TODO:    ## COMMENTS/TODO:
+      - For now, I am leaving the locks and concurrency of file system and other stuff that I learnt in OS. I will implement them later.    - For now, I am leaving the locks and concurrency of file system and other stuff that I learnt in OS. I will implement them later.
+      - I am also leaving the error handling for now.    - I am also leaving the error handling for now.
+      - Temparary Path approach for storing objects will do it later.    - Temparary Path approach for storing objects will do it later.
+              
+      ## Brach Flow:    ## Brach Flow:
+      1. Get the current branch name from the `Branch` file in the /.yeet  dir.    1. Get the current branch name from the `Branch` file in the /.yeet  dir.
+      2. Then use that to store the commit at the desired place.    2. Then use that to store the commit at the desired place.
- ### Notice:          ### Notice: 
- This has not been fully tested on Windows yet, so if you are using Windows and have found some issues, please give me feedback. :)         This has not been fully tested on Windows yet, so if you are using Windows and have found some issues, please give me feedback. :)
- using the filesystem library to work with different filesystems.         using the filesystem library to work with different filesystems.
-              
- # Introduction:         # Introduction:
- - This is a project to make my own git with some improvements.         - This is a project to make my own git with some improvements.
- - Through this, I also want to learn the backend of version control and make my grasp stronger on C++.         - Through this, I also want to learn the backend of version control and make my grasp stronger on C++.
- - I am trying to solve some of my personal problems and gain an understanding of the Computer filesystem and its management.         - I am trying to solve some of my personal problems and gain an understanding of the Computer filesystem and its management.
-              
- ## HOW TO USE IN LINUX/UNIX ENVIRONMENT         ## HOW TO USE IN LINUX/UNIX ENVIRONMENT
- 1. Clone/Download this repository.         1. Clone/Download this repository.
- 2. Open the terminal and navigate to this directory.         2. Open the terminal and navigate to this directory.
- 3. Run the following command:         3. Run the following command:
- ```bash         ```bash
-  g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet           g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet 
-  ```         ```
- 4. Set the permissions for the executable file:         4. Set the permissions for the executable file:
- ```bash         ```bash
- chmod a+x yeet         chmod a+x yeet
-  ```         ```
- 5. Set the environment variable:         5. Set the environment variable:
- ```bash         ```bash
- export PATH=$PATH:/path/to/yeet/repo/         export PATH=$PATH:/path/to/yeet/repo/
-  ```         ```
- 6. Run the executable file and initialize an empty yeet repo:         6. Run the executable file and initialize an empty yeet repo:
- ```bash         ```bash
- yeet init .         yeet init .
-  ```         ```
-              
- ## CAREFUL         ## CAREFUL
- - For now, You can only make git init in the pwd, You can not do git init /home/abc/some/folder. This will not work. It will be executed but will give to rise complications. If you want to init in a folder, you have to cd to that folder and then run the command.          - For now, You can only make git init in the pwd, You can not do git init /home/abc/some/folder. This will not work. It will be executed but will give to rise complications. If you want to init in a folder, you have to cd to that folder and then run the command. 
- - You can only yeet init in a already made directory. You can not yeet init in a directory that does not exist.         - You can only yeet init in a already made directory. You can not yeet init in a directory that does not exist.
-              
- ## FUTURE PLANS         ## FUTURE PLANS
- - Implement diffs algo on the full repository.         - Implement diffs algo on the full repository.
- -  Check using diffs algo that whether there are any changes in the files before letting the user to commit it changes.         -  Check using diffs algo that whether there are any changes in the files before letting the user to commit it changes.
-              
-              
- ## USE COMMAND:         ## USE COMMAND:
- - For Commit:         - For Commit:
- ` g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`         ` g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`
-              
- ## Make Sure:         ## Make Sure:
- you have lcryptopp installed in your system. I am using fedora and I installed it using:         you have lcryptopp installed in your system. I am using fedora and I installed it using:
- ```bash         ```bash
- sudo dnf install cryptopp-devel         sudo dnf install cryptopp-devel
-  ```         ```
- Search according to your OS.         Search according to your OS.
-              
- ## Testing The compression:         ## Testing The compression:
- Use the Testing_inflating.cpp file as follow for decompressing your blob data:          Use the Testing_inflating.cpp file as follow for decompressing your blob data: 
- ` g++ -lz Testing_Inflating.cpp -o Testing_inflate && ./Testing_inflate`         ` g++ -lz Testing_Inflating.cpp -o Testing_inflate && ./Testing_inflate`
-              
- You can also use the following command:         You can also use the following command:
- `zlib-flate -uncompress < .yeet/objects/5d/8d5a1314ec0f6a5b7f8ac27dfbf53ed82bf3fe > test-abc`         `zlib-flate -uncompress < .yeet/objects/5d/8d5a1314ec0f6a5b7f8ac27dfbf53ed82bf3fe > test-abc`
-              
-              
-              
-              
- `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet init .`         `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet init .`
- `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`         `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -o yeet && ./yeet commit`
-              
- ## FOR BETTER DEBUGGING:         ## FOR BETTER DEBUGGING:
- `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -fdiagnostics-all-candidates`         `g++ main.cpp controllers.cpp -std=c++17 -lcryptopp -lz -fdiagnostics-all-candidates`
-              
- ## COMMENTS/TODO:         ## COMMENTS/TODO:
- - For now, I am leaving the locks and concurrency of file system and other stuff that I learnt in OS. I will implement them later.         - For now, I am leaving the locks and concurrency of file system and other stuff that I learnt in OS. I will implement them later.
- - I am also leaving the error handling for now.         - I am also leaving the error handling for now.
- - Temparary Path approach for storing objects will do it later.         - Temparary Path approach for storing objects will do it later.
-              
- ## Brach Flow:         ## Brach Flow:
- 1. Get the current branch name from the `Branch` file in the /.yeet  dir.         1. Get the current branch name from the `Branch` file in the /.yeet  dir.
- 2. Then use that to store the commit at the desired place.         2. Then use that to store the commit at the desired place.
+              
+              
+      ## Branch:    ## Branch:
+      [x] Branch Creation    [x] Branch Creation
+      [x] Current Branch storage    [x] Current Branch storage
+      [x] Changing Branches (Checkout)    [x] Changing Branches (Checkout)
+      [x] See all branches with commit ids    [x] See all branches with commit ids
+      [x] Commits on the active branch.    [x] Commits on the active branch.
+      [ ] Option to choose which branch I want to make my new branch from. (Currently the new branch will automatically start from the prev branch ie the branch you were in)    [ ] Option to choose which branch I want to make my new branch from. (Currently the new branch will automatically start from the prev branch ie the branch you were in)
+              
+      ## Checkout:    ## Checkout:
+      [ ]logic to reset the working directory to the target branch’s commit using tree traversal.    [ ]logic to reset the working directory to the target branch’s commit using tree traversal.
+      #include <iostream>    #include <iostream>
+      #include "controllers.hpp"    #include "controllers.hpp"
+      #include <filesystem>    #include <filesystem>
+      #define fs std::filesystem    #define fs std::filesystem
+      #define ll long long    #define ll long long
+      using namespace std;    using namespace std;
+              
+              
+      int main(int argc, char* argv[]) {    int main(int argc, char* argv[]) {
+          // Flushing the cout and cerr.        // Flushing the cout and cerr.
+          cout<<unitbuf;         cout<<unitbuf; 
+          cerr<<unitbuf;        cerr<<unitbuf;
+          cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version        cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version
+          string path = fs::current_path();        string path = fs::current_path();
+          cout<<path<<endl;        cout<<path<<endl;
+          try{        try{
+              if(argc==1){            if(argc==1){
+                  // TODO Add some useful string in this case. As is for user to know the different types of commands.                // TODO Add some useful string in this case. As is for user to know the different types of commands.
+                  cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";                cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";
+                  return EXIT_FAILURE;                return EXIT_FAILURE;
+                  }                }
+              string arg=argv[1];            string arg=argv[1];
+              
+              if (argc==3) {            if (argc==3) {
+                  // TODO Add if-else conditions to distinguish different argument that the user is passing.                // TODO Add if-else conditions to distinguish different argument that the user is passing.
+                                  
+                  // cout<<subArg<<endl;                // cout<<subArg<<endl;
+                  // cout<<arg<<endl;                // cout<<arg<<endl;
+                  string subArg=argv[2];                string subArg=argv[2];
+                  if(arg=="init"){                if(arg=="init"){
+                      YeetInit(subArg);                    YeetInit(subArg);
+                  }                }
+              
+                  else if(arg=="add"){                else if(arg=="add"){
+                      YeetAdd();                    YeetAdd();
+                  }                }
+              
+              }             } 
+              
+              if(argc==2){            if(argc==2){
+                  if(arg=="status"){                if(arg=="status"){
+                      YeetStatus(path);                    YeetStatus(path);
+                  }                }
+                  else if(arg=="commit"){                else if(arg=="commit"){
+                      Commit myCommitObject(path);                    Commit myCommitObject(path);
+                      myCommitObject.CommitMain(path);                    myCommitObject.CommitMain(path);
+                  }                }
+                  else if(arg=="branch"){                else if(arg=="branch"){
- #include <iostream>         #include <iostream>
- #include "controllers.hpp"         #include "controllers.hpp"
- #include <filesystem>         #include <filesystem>
- #define fs std::filesystem         #define fs std::filesystem
- #define ll long long         #define ll long long
- using namespace std;         using namespace std;
-              
-              
- int main(int argc, char* argv[]) {         int main(int argc, char* argv[]) {
-     // Flushing the cout and cerr.             // Flushing the cout and cerr.
-     cout<<unitbuf;              cout<<unitbuf; 
-     cerr<<unitbuf;             cerr<<unitbuf;
-     cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version             cout<<"Using cpp version: "<<__cplusplus<<endl; // To know my cpp version
-     string path = fs::current_path();             string path = fs::current_path();
-     cout<<path<<endl;             cout<<path<<endl;
-     try{             try{
-         if(argc==1){                 if(argc==1){
-             // TODO Add some useful string in this case. As is for user to know the different types of commands.                     // TODO Add some useful string in this case. As is for user to know the different types of commands.
-             cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";                     cerr<<"No argument Provied \n Use Command: yeet init. or yeet commit etc.\n";
-             return EXIT_FAILURE;                     return EXIT_FAILURE;
-             }                     }
-         string arg=argv[1];                 string arg=argv[1];
-              
-         if (argc==3) {                 if (argc==3) {
-             // TODO Add if-else conditions to distinguish different argument that the user is passing.                     // TODO Add if-else conditions to distinguish different argument that the user is passing.
-                                  
-             // cout<<subArg<<endl;                     // cout<<subArg<<endl;
-             // cout<<arg<<endl;                     // cout<<arg<<endl;
-             string subArg=argv[2];                     string subArg=argv[2];
-             if(arg=="init"){                     if(arg=="init"){
-                 YeetInit(subArg);                         YeetInit(subArg);
-             }                     }
-              
-             else if(arg=="add"){                     else if(arg=="add"){
-                 YeetAdd();                         YeetAdd();
-             }                     }
-              
-         }                  } 
-              
-         if(argc==2){                 if(argc==2){
-             if(arg=="status"){                     if(arg=="status"){
-                 YeetStatus(path);                         YeetStatus(path);
-             }                     }
-             else if(arg=="commit"){                     else if(arg=="commit"){
-                 Commit myCommitObject(path);                         Commit myCommitObject(path);
-                 myCommitObject.CommitMain(path);                         myCommitObject.CommitMain(path);
-             }                     }
-             else if(arg=="branch"){                     else if(arg=="branch"){
-                 std::cout<<"What you want to do?\ncreate a branch[1]\nsee all branches[2]\ndelete a branch[3]"<<std::endl;                         std::cout<<"What you want to do?\ncreate a branch[1]\nsee all branches[2]\ndelete a branch[3]"<<std::endl;
+                      std::cout<<"What you want to do?\ncreate a branch[1]\nsee all branches[2]\ndelete a branch[3]\nCurrent Branch[4]"<<std::endl;                    std::cout<<"What you want to do?\ncreate a branch[1]\nsee all branches[2]\ndelete a branch[3]\nCurrent Branch[4]"<<std::endl;
-                 int in;                 int in;                    int in;
-                 cin>>in;                 cin>>in;                    cin>>in;
-                 if(in == 1){                 if(in == 1){                    if(in == 1){
-                     std::cout<<"Tell us the name of the branch (NO SPACES)"<<std::endl;                             std::cout<<"Tell us the name of the branch (NO SPACES)"<<std::endl;
+                          std::cout<<"BRANCH::Tell us the name of the branch (NO SPACES)"<<std::endl;                        std::cout<<"BRANCH::Tell us the name of the branch (NO SPACES)"<<std::endl;
-                     std::string BranchName;                     std::string BranchName;                        std::string BranchName;
-                     cin>>BranchName;                     cin>>BranchName;                        cin>>BranchName;
-                     Branch::createBranch(BranchName , fs::current_path());                     Branch::createBranch(BranchName , fs::current_path());                        Branch::createBranch(BranchName , fs::current_path());
-                 }                 }                    }
-                 else if(in == 2){                 else if(in == 2){                    else if(in == 2){
+                          Branch::SeeBranches(fs::current_path());                        Branch::SeeBranches(fs::current_path());
+                      }                    }
-                     // TODO: Call the show all branches function                             // TODO: Call the show all branches function
+                      else if(in == 3){                    else if(in == 3){
-                     Branch::SeeBranches(fs::current_path());                             Branch::SeeBranches(fs::current_path());
+                          // TODO: Select what branch you want to delete. // idk if it's possible or not                        // TODO: Select what branch you want to delete. // idk if it's possible or not
-                 }                         }
+                          std::cout<<"BRANCH:: This feature is currently under development"<<std::endl;                        std::cout<<"BRANCH:: This feature is currently under development"<<std::endl;
-                 else if(in == 3){                         else if(in == 3){
-                     // TODO: Select what branch you want to delete. // idk if it's possible or not                             // TODO: Select what branch you want to delete. // idk if it's possible or not
+                      }                    }
+                      else if(in == 4){                    else if(in == 4){
-                     std::cout<<"Under development"<<std::endl;                             std::cout<<"Under development"<<std::endl;
-                 }                         }
-              
-             }                     }
+                          Branch::currBranch(fs::current_path());                        Branch::currBranch(fs::current_path());
-             else if(arg == "checkout"){                     else if(arg == "checkout"){
+                      }                    }
-                 // TODO: implement a function which switches the current branch to the desired branch                         // TODO: implement a function which switches the current branch to the desired branch
+              
-                 // It can be done by changing the value in the `Branch` file.                         // It can be done by changing the value in the `Branch` file.
+                  }                }
+                  else if(arg == "checkout"){                else if(arg == "checkout"){
-                 // `Branch` file should contain the name of the current branch we are in.                         // `Branch` file should contain the name of the current branch we are in.
+                      // It can be done by changing the value in the `Branch` file.                    // It can be done by changing the value in the `Branch` file.
-                 std::cout<<"Which branch you want to swithc into:? (TYPE FULL EXACT NAME OF THAT BRANCH)"<<std::endl;                         std::cout<<"Which branch you want to swithc into:? (TYPE FULL EXACT NAME OF THAT BRANCH)"<<std::endl;
-                 Branch::SeeBranches(std::filesystem::current_path());                         Branch::SeeBranches(std::filesystem::current_path());
+                      // `Branch` file should contain the name of the current branch we are in.                    // `Branch` file should contain the name of the current branch we are in.
+                      std::cout << "\033[1m\033[3mWhich branch you want to switch into:? (TYPE FULL EXACT NAME OF THAT BRANCH)\033[0m" << std::endl;                    std::cout << "\033[1m\033[3mWhich branch you want to switch into:? (TYPE FULL EXACT NAME OF THAT BRANCH)\033[0m" << std::endl;
-                 std::string BranchName;                         std::string BranchName;
+                      Branch::SeeBranches(std::filesystem::current_path());                    Branch::SeeBranches(std::filesystem::current_path());
-                 cin>>BranchName;                         cin>>BranchName;
+                      std::string BranchName;                    std::string BranchName;
-                                          
-             }                     }
+                      cin>>BranchName;                    cin>>BranchName;
+                      CheckOut::SwitchBranch(fs::current_path(), BranchName);                    CheckOut::SwitchBranch(fs::current_path(), BranchName);
-         }                 }
+                  }                }
+                  else if(arg == "init"){                else if(arg == "init"){
+                      std::cout<<"ERROR::INIT::Add . after the init to initialise a yeet repo in the pwd. Like \nyeet init ."<<std::endl;                    std::cout<<"ERROR::INIT::Add . after the init to initialise a yeet repo in the pwd. Like \nyeet init ."<<std::endl;
+                  }                }
+              }            }
-              
-         // else if(argc > 2) print("only one argiment is supported for now!");         // else if(argc > 2) print("only one argiment is supported for now!");            // else if(argc > 2) print("only one argiment is supported for now!");
-                              
-     }     }        }
-     catch(const std::exception& e){     catch(const std::exception& e){        catch(const std::exception& e){
-         // TODO write the number of arguments and the argv required for each command in the Documentation.         // TODO write the number of arguments and the argv required for each command in the Documentation.            // TODO write the number of arguments and the argv required for each command in the Documentation.
+              std::cout<<"ERROR:: ";            std::cout<<"ERROR:: ";
-         std::cout<<"Wtf ";                 std::cout<<"Wtf ";
-         std::cerr << e.what() << "\nException Happened somewhere! Error:501 \n";         std::cerr << e.what() << "\nException Happened somewhere! Error:501 \n";            std::cerr << e.what() << "\nException Happened somewhere! Error:501 \n";
-     }     }        }
-                  
-     return EXIT_SUCCESS;     return EXIT_SUCCESS;        return EXIT_SUCCESS;
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
+              std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;            std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
+          }        }
+              
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
+              std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+              return;            return;
+          }        }
+              
+          bool space = false;        bool space = false;
+          std::string PathofFile, oid;        std::string PathofFile, oid;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
+          std::vector<std::string> oids;        std::vector<std::string> oids;
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
+                  PathofFile = "";                PathofFile = "";
+                  space = !space; continue;                space = !space; continue;
+              }                   }       
+              
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
+                  oids.push_back(oid);                oids.push_back(oid);
+                  oid = "";                oid = "";
+                  space = !space; continue;                space = !space; continue;
+              }                 }     
+                          
+              if(!space){            if(!space){
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
+              }            }
+              else{            else{
+                  oid += StoreData[i];                oid += StoreData[i];
+              }            }
+          }        }
+              
+          // Main Loop        // Main Loop
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
+              
+              int additions,deletions;            int additions,deletions;
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
+              
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
+                  std::string NewFileContent="";                std::string NewFileContent="";
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
+              
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
+                      std::string line;                    std::string line;
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
+                      }                    }
+                      NowFile.close();                    NowFile.close();
+                  }                }
+              
+                  // Call Diffs algo here                // Call Diffs algo here
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
+                  if(ans==0) {                if(ans==0) {
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
+                      continue;                    continue;
+                  }                            }            
+                                  
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                  for(auto it:diff_result){                for(auto it:diff_result){
+                                          
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      }                    }
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+              
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
+              
+                  // don't show file if nothing changed                // don't show file if nothing changed
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
+                      continue;                    continue;
+                  }                }
+              
+                  // The file we are checking:                // The file we are checking:
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
+                                  
+                  // Printing the diffs                // Printing the diffs
+                  Printer printer;                Printer printer;
+                  printer.print(diff_result);                printer.print(diff_result);
+              
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
+              } else {            } else {
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
+              }            }
+          }        }
+              
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
+                      std::string line;                    std::string line;
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                      newFile.close();                    newFile.close();
+                  }                }
+              }            }
+          }        }
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
+              std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;            std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
+          }        }
+          else{        else{
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+          }        }
+              
+              
+         }    }
+              
+              
+       /**    /**
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
+         *     *
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
+       * @return Nothing for now     * @return Nothing for now
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
+          try        try
+          {        {
+              // std::cout<<path;            // std::cout<<path;
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
+              }            }
+              
+              if(path.back()=='.')             if(path.back()=='.') 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
+              
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                          
+              // std::system("tree .");            // std::system("tree .");
+              
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
+              
+              // Make HEAD file.            // Make HEAD file.
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
+                      headFile.close();                    headFile.close();
+                  } else {                } else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                  }                }
+              
+              // Making Description file.            // Making Description file.
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
+                  if(descFile.is_open()){                if(descFile.is_open()){
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile.close();                    descFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                  }                }
+                          
+              // Making config file            // Making config file
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
+                  if(configFile.is_open()){                if(configFile.is_open()){
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
+                      configFile.close();                    configFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                  }                }
+              
+              // Making Store File            // Making Store File
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
+                  StoreFile.close();                StoreFile.close();
+              }            }
+              else {            else {
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+              }            }
+              
+              // Make Diff file.            // Make Diff file.
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
+                  DiffFile.close();                DiffFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+              }            }
+              
+              // Make Current Branch file.            // Make Current Branch file.
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
+                  BranchFile << "master";                BranchFile << "master";
+                  BranchFile.close();                BranchFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+              }            }
+              
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
+          }        }
+          catch(const std::exception& e){        catch(const std::exception& e){
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
+          }        }
+                  
+         }    }
+              
+      void YeetAdd(){    void YeetAdd(){
+              
+         }    }
+              
+              
+      // Commit Class:    // Commit Class:
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+       /**    /**
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
+              // This is my .gitignore            // This is my .gitignore
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              
+              if(IGNORE){            if(IGNORE){
+                  continue;                continue;
+              }            }
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
+              }             } 
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  continue;                continue;
+              }            }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
+          }        }
+         }    }
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
+          try        try
+          {        {
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
-         }                 }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
-              
-              
-  /**         /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
-    *          *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
-     try             try
-     {             {
-         // std::cout<<path;                 // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
-         }                 }
-              
-         if(path.back()=='.')                  if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
-              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
-         // std::system("tree .");                 // std::system("tree .");
-              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
-         // Make HEAD file.                 // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
-             } else {                     } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
-              
-         // Making Description file.                 // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
-             }                     }
-             else {                     else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
-                          
-         // Making config file                 // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
-             }                     }
-             else {                     else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
-              
-         // Making Store File                 // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
-         }                 }
-         else {                 else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
-              
-         // Make Diff file.                 // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
-              
-         // Make Current Branch file.                 // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
-              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
-     }             }
-     catch(const std::exception& e){             catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
-     }             }
-                  
-    }         }
-              
- void YeetAdd(){         void YeetAdd(){
-              
-    }         }
-              
-              
- // Commit Class:         // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){                 if(IGNORE){
-             continue;                     continue;
-         }                 }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
-         }                  } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
-             continue;                     continue;
-         }                 }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
-     }             }
-    }         }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
-     try             try
-     {             {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
-              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";             std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                 _stat = "Exe";                    _stat = "Exe";
-             }             }                }
-              // content of Current FiLe.              // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);             std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data             // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);              Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob             // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());              DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob             // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);              TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);              TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }         }            }
-         for(auto it:DbObj.Store){         for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;             std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }         }            }
-         // Save the store in /Store file         // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);         writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
-         if (!TreeEntries.empty()) {         if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);             Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);             DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");             std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");             std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);             time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);             Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();             std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
+      void YeetStatus(std::string path) {    void YeetStatus(std::string path) {
+          try {        try {
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
+              std::vector<std::filesystem::path> FilePath;            std::vector<std::filesystem::path> FilePath;
+                          
+              // Getting list of all files            // Getting list of all files
+              ListFiles(path, FilePath);            ListFiles(path, FilePath);
+                          
+              if (FilePath.empty()) {            if (FilePath.empty()) {
+                  std::cout << "No files found in directory\n";                std::cout << "No files found in directory\n";
+                  return;                return;
+              }            }
+              
+              // Making a visited map for later            // Making a visited map for later
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
+              for (const auto& it : FilePath) {            for (const auto& it : FilePath) {
+                  visited[it] = false;                visited[it] = false;
+              }            }
+                          
+              int Totaladditions = 0, Totaldeletions = 0;            int Totaladditions = 0, Totaldeletions = 0;
+                  
+              // Read Store file content with error handling            // Read Store file content with error handling
+              std::string StoreData;            std::string StoreData;
+              std::ifstream Store(path + "/.yeet/Store");            std::ifstream Store(path + "/.yeet/Store");
+              if (!Store.is_open()) {            if (!Store.is_open()) {
+                  throw std::runtime_error("ERROR::STATUS::Error in opening Store File");                throw std::runtime_error("ERROR::STATUS::Error in opening Store File");
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
+              }            }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
+                          
+              std::stringstream buffer;            std::stringstream buffer;
+              buffer << Store.rdbuf();            buffer << Store.rdbuf();
+              StoreData = buffer.str();            StoreData = buffer.str();
+              Store.close();            Store.close();
+                  
+              if (StoreData.empty() || StoreData == "Empty Store\n") {            if (StoreData.empty() || StoreData == "Empty Store\n") {
+                  std::cout << "ERROR::STATUS::Nothing to Compare to. Make your first commit!!\n";                std::cout << "ERROR::STATUS::Nothing to Compare to. Make your first commit!!\n";
+                  return;                return;
+              }            }
+                  
+              // Parse Store data            // Parse Store data
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
+              std::vector<std::string> oids;            std::vector<std::string> oids;
+              std::string currentToken;            std::string currentToken;
+              bool isPath = true;            bool isPath = true;
+                          
+              std::istringstream storeStream(StoreData);            std::istringstream storeStream(StoreData);
+              std::string line;            std::string line;
+              while (std::getline(storeStream, line)) {            while (std::getline(storeStream, line)) {
+                  if (line.empty()) continue;                if (line.empty()) continue;
+                                  
+                  size_t spacePos = line.find(' ');                size_t spacePos = line.find(' ');
+                  if (spacePos == std::string::npos) continue;                if (spacePos == std::string::npos) continue;
+                                  
+                  FilePaths.push_back(line.substr(0, spacePos));                FilePaths.push_back(line.substr(0, spacePos));
+                  oids.push_back(line.substr(spacePos + 1));                oids.push_back(line.substr(spacePos + 1));
+              }            }
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
+                          
+              if (FilePaths.size() != oids.size()) {            if (FilePaths.size() != oids.size()) {
+                  throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");                throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
+              }            }
+                  
+              // Main Loop with bounds checking            // Main Loop with bounds checking
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+              for (size_t i = 0; i < oids.size(); i++) {            for (size_t i = 0; i < oids.size(); i++) {
+                  if (oids[i].length() < 2) {                if (oids[i].length() < 2) {
+                      std::cout << "WARNING: Invalid OID format for " << FilePaths[i] << "\n";                    std::cout << "WARNING: Invalid OID format for " << FilePaths[i] << "\n";
+                      continue;                    continue;
+                  }                }
+                                  
+                  std::string thePathOfOid = oids[i].substr(0, 2) + "/" + oids[i].substr(2);                std::string thePathOfOid = oids[i].substr(0, 2) + "/" + oids[i].substr(2);
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+                                  
+                  if (!std::filesystem::exists(FullPath)) {                if (!std::filesystem::exists(FullPath)) {
+                      std::cout << "WARNING: Object file not found: " << FullPath << "\n";                    std::cout << "WARNING: Object file not found: " << FullPath << "\n";
+                      continue;                    continue;
+                  }                }
+                                  
+                  std::string InflatedContent;                std::string InflatedContent;
+                  try {                try {
+                      InflatedContent = Inflate(FullPath);                    InflatedContent = Inflate(FullPath);
+                  } catch (const std::exception& e) {                } catch (const std::exception& e) {
+                      std::cout << "ERROR inflating " << FullPath << ": " << e.what() << "\n";                    std::cout << "ERROR inflating " << FullPath << ": " << e.what() << "\n";
+                      continue;                    continue;
+                  }                }
+                  
+                  if (!std::filesystem::exists(FilePaths[i])) {                if (!std::filesystem::exists(FilePaths[i])) {
+                      std::cout << "File deleted: " << FilePaths[i] << "\n";                    std::cout << "File deleted: " << FilePaths[i] << "\n";
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
+                      Totaldeletions++;                    Totaldeletions++;
+                      continue;                    continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                  }                }
+                                  
+                  // Read current file content                // Read current file content
-              
+                  std::string NewFileContent;                std::string NewFileContent;
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
+                  {                {
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
+                      if (!NowFile.is_open()) {                    if (!NowFile.is_open()) {
+                          std::cout << "WARNING: Cannot open current file: " << FilePaths[i] << "\n";                        std::cout << "WARNING: Cannot open current file: " << FilePaths[i] << "\n";
+                          continue;                        continue;
+                      }                    }
+                      std::stringstream buffer;                    std::stringstream buffer;
+                      buffer << NowFile.rdbuf();                    buffer << NowFile.rdbuf();
+                      NewFileContent = buffer.str();                    NewFileContent = buffer.str();
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
+                  }                }
+                  
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
+                  // Diff calculation with error handling                // Diff calculation with error handling
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                  
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);
+                  
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+                  if (ans < 0) {                if (ans < 0) {
-                 continue;                         continue;
-             }                     }
+                      std::cout << "WARNING: Diff calculation failed for " << FilePaths[i] << "\n";                    std::cout << "WARNING: Diff calculation failed for " << FilePaths[i] << "\n";
+                      continue;                    continue;
+                  }                }
-              
+                                  
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  if (ans == 0) continue; // Files are identical                if (ans == 0) continue; // Files are identical
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                                  
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                                  
+                  int additions = 0, deletions = 0;                int additions = 0, deletions = 0;
+                  for (const auto& edit : diff_result) {                for (const auto& edit : diff_result) {
+                      if (edit.type == Edit::DEL) {                    if (edit.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      } else if (edit.type == Edit::INS) {                    } else if (edit.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+                  
+                  // Skip executable files                // Skip executable files
+                  if (access(FilePaths[i].c_str(), X_OK) == 0) continue;                if (access(FilePaths[i].c_str(), X_OK) == 0) continue;
+                  
+                  // Only show files with changes                // Only show files with changes
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                  if (additions == 0 && deletions == 0) continue;                if (additions == 0 && deletions == 0) continue;
+                  
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
-         }                 }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
+                  std::cout << FilePaths[i] << std::endl;                std::cout << FilePaths[i] << std::endl;
+                                  
+                  // Print diffs safely                // Print diffs safely
+                  Printer printer;                Printer printer;
+                  try {                try {
+                      printer.print(diff_result);                    printer.print(diff_result);
+                  } catch (const std::exception& e) {                } catch (const std::exception& e) {
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
+                      std::cout << "ERROR printing diffs: " << e.what() << "\n";                    std::cout << "ERROR printing diffs: " << e.what() << "\n";
+                  }                }
-                 }                         }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
+                  
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
+                  std::cout << "This file additions: " << additions << "\n";                std::cout << "This file additions: " << additions << "\n";
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
-              
-              
+                  std::cout << "This file deletions: " << deletions << std::endl;                std::cout << "This file deletions: " << deletions << std::endl;
+              }            }
+                  
+              if (Totaladditions == 0 && Totaldeletions == 0) {            if (Totaladditions == 0 && Totaldeletions == 0) {
+                  std::cout << "No changes detected\n";                std::cout << "No changes detected\n";
+              } else {            } else {
+                  std::cout << "Total additions: " << Totaladditions << "\nTotal deletions: " << Totaldeletions << std::endl;                std::cout << "Total additions: " << Totaladditions << "\nTotal deletions: " << Totaldeletions << std::endl;
+              }            }
+                          
+          } catch (const std::exception& e) {        } catch (const std::exception& e) {
+              std::cerr << "ERROR in YeetStatus: " << e.what() << std::endl;            std::cerr << "ERROR in YeetStatus: " << e.what() << std::endl;
+          }        }
+         }    }
+              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
+      void YeetStatus(std::string path) {    void YeetStatus(std::string path) {
+          try {        try {
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
+              std::vector<std::filesystem::path> FilePath;            std::vector<std::filesystem::path> FilePath;
+                          
+              // Getting list of all files            // Getting list of all files
+              ListFiles(path, FilePath);            ListFiles(path, FilePath);
+                          
+              if (FilePath.empty()) {            if (FilePath.empty()) {
+                  std::cout << "No files found in directory\n";                std::cout << "No files found in directory\n";
+                  return;                return;
+              }            }
+              
+              // Making a visited map for later            // Making a visited map for later
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
+              for (const auto& it : FilePath) {            for (const auto& it : FilePath) {
+                  visited[it] = false;                visited[it] = false;
+              }            }
+                          
+              int Totaladditions = 0, Totaldeletions = 0;            int Totaladditions = 0, Totaldeletions = 0;
+                  
+              // Read Store file content with error handling            // Read Store file content with error handling
+              std::string StoreData;            std::string StoreData;
+              std::ifstream Store(path + "/.yeet/Store");            std::ifstream Store(path + "/.yeet/Store");
+              if (!Store.is_open()) {            if (!Store.is_open()) {
+                  throw std::runtime_error("ERROR::STATUS::Error in opening Store File");                throw std::runtime_error("ERROR::STATUS::Error in opening Store File");
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
+              }            }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
+                          
+              std::stringstream buffer;            std::stringstream buffer;
+              buffer << Store.rdbuf();            buffer << Store.rdbuf();
+              StoreData = buffer.str();            StoreData = buffer.str();
+              Store.close();            Store.close();
+                  
+              if (StoreData.empty() || StoreData == "Empty Store\n") {            if (StoreData.empty() || StoreData == "Empty Store\n") {
+                  std::cout << "ERROR::STATUS::Nothing to Compare to. Make your first commit!!\n";                std::cout << "ERROR::STATUS::Nothing to Compare to. Make your first commit!!\n";
+                  return;                return;
+              }            }
+                  
+              // Parse Store data            // Parse Store data
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
+              std::vector<std::string> oids;            std::vector<std::string> oids;
+              std::string currentToken;            std::string currentToken;
+              bool isPath = true;            bool isPath = true;
+                          
+              std::istringstream storeStream(StoreData);            std::istringstream storeStream(StoreData);
+              std::string line;            std::string line;
+              while (std::getline(storeStream, line)) {            while (std::getline(storeStream, line)) {
+                  if (line.empty()) continue;                if (line.empty()) continue;
+                                  
+                  size_t spacePos = line.find(' ');                size_t spacePos = line.find(' ');
+                  if (spacePos == std::string::npos) continue;                if (spacePos == std::string::npos) continue;
+                                  
+                  FilePaths.push_back(line.substr(0, spacePos));                FilePaths.push_back(line.substr(0, spacePos));
+                  oids.push_back(line.substr(spacePos + 1));                oids.push_back(line.substr(spacePos + 1));
+              }            }
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
+                          
+              if (FilePaths.size() != oids.size()) {            if (FilePaths.size() != oids.size()) {
+                  throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");                throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
+              }            }
+                  
+              // Main Loop with bounds checking            // Main Loop with bounds checking
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+              for (size_t i = 0; i < oids.size(); i++) {            for (size_t i = 0; i < oids.size(); i++) {
+                  if (oids[i].length() < 2) {                if (oids[i].length() < 2) {
+                      std::cout << "WARNING: Invalid OID format for " << FilePaths[i] << "\n";                    std::cout << "WARNING: Invalid OID format for " << FilePaths[i] << "\n";
+                      continue;                    continue;
+                  }                }
+                                  
+                  std::string thePathOfOid = oids[i].substr(0, 2) + "/" + oids[i].substr(2);                std::string thePathOfOid = oids[i].substr(0, 2) + "/" + oids[i].substr(2);
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+                                  
+                  if (!std::filesystem::exists(FullPath)) {                if (!std::filesystem::exists(FullPath)) {
+                      std::cout << "WARNING: Object file not found: " << FullPath << "\n";                    std::cout << "WARNING: Object file not found: " << FullPath << "\n";
+                      continue;                    continue;
+                  }                }
+                                  
+                  std::string InflatedContent;                std::string InflatedContent;
+                  try {                try {
+                      InflatedContent = Inflate(FullPath);                    InflatedContent = Inflate(FullPath);
+                  } catch (const std::exception& e) {                } catch (const std::exception& e) {
+                      std::cout << "ERROR inflating " << FullPath << ": " << e.what() << "\n";                    std::cout << "ERROR inflating " << FullPath << ": " << e.what() << "\n";
+                      continue;                    continue;
+                  }                }
+                  
+                  if (!std::filesystem::exists(FilePaths[i])) {                if (!std::filesystem::exists(FilePaths[i])) {
+                      std::cout << "File deleted: " << FilePaths[i] << "\n";                    std::cout << "File deleted: " << FilePaths[i] << "\n";
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
+                      Totaldeletions++;                    Totaldeletions++;
+                      continue;                    continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                  }                }
+                                  
+                  // Read current file content                // Read current file content
-              
+                  std::string NewFileContent;                std::string NewFileContent;
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
+                  {                {
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
+                      if (!NowFile.is_open()) {                    if (!NowFile.is_open()) {
+                          std::cout << "WARNING: Cannot open current file: " << FilePaths[i] << "\n";                        std::cout << "WARNING: Cannot open current file: " << FilePaths[i] << "\n";
+                          continue;                        continue;
+                      }                    }
+                      std::stringstream buffer;                    std::stringstream buffer;
+                      buffer << NowFile.rdbuf();                    buffer << NowFile.rdbuf();
+                      NewFileContent = buffer.str();                    NewFileContent = buffer.str();
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
+                  }                }
+                  
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
+                  // Diff calculation with error handling                // Diff calculation with error handling
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                  
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);
+                  
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+                  if (ans < 0) {                if (ans < 0) {
-                 continue;                         continue;
-             }                     }
+                      std::cout << "WARNING: Diff calculation failed for " << FilePaths[i] << "\n";                    std::cout << "WARNING: Diff calculation failed for " << FilePaths[i] << "\n";
+                      continue;                    continue;
+                  }                }
-              
+                                  
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  if (ans == 0) continue; // Files are identical                if (ans == 0) continue; // Files are identical
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                                  
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                                  
+                  int additions = 0, deletions = 0;                int additions = 0, deletions = 0;
+                  for (const auto& edit : diff_result) {                for (const auto& edit : diff_result) {
+                      if (edit.type == Edit::DEL) {                    if (edit.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      } else if (edit.type == Edit::INS) {                    } else if (edit.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+                  
+                  // Skip executable files                // Skip executable files
+                  if (access(FilePaths[i].c_str(), X_OK) == 0) continue;                if (access(FilePaths[i].c_str(), X_OK) == 0) continue;
+                  
+                  // Only show files with changes                // Only show files with changes
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                  if (additions == 0 && deletions == 0) continue;                if (additions == 0 && deletions == 0) continue;
+                  
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
-         }                 }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
+                  std::cout << FilePaths[i] << std::endl;                std::cout << FilePaths[i] << std::endl;
+                                  
+                  // Print diffs safely                // Print diffs safely
+                  Printer printer;                Printer printer;
+                  try {                try {
+                      printer.print(diff_result);                    printer.print(diff_result);
+                  } catch (const std::exception& e) {                } catch (const std::exception& e) {
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
+                      std::cout << "ERROR printing diffs: " << e.what() << "\n";                    std::cout << "ERROR printing diffs: " << e.what() << "\n";
+                  }                }
-                 }                         }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
+                  
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
+                  std::cout << "This file additions: " << additions << "\n";                std::cout << "This file additions: " << additions << "\n";
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
-              
-              
+                  std::cout << "This file deletions: " << deletions << std::endl;                std::cout << "This file deletions: " << deletions << std::endl;
+              }            }
+                  
+              if (Totaladditions == 0 && Totaldeletions == 0) {            if (Totaladditions == 0 && Totaldeletions == 0) {
+                  std::cout << "No changes detected\n";                std::cout << "No changes detected\n";
+              } else {            } else {
+                  std::cout << "Total additions: " << Totaladditions << "\nTotal deletions: " << Totaldeletions << std::endl;                std::cout << "Total additions: " << Totaladditions << "\nTotal deletions: " << Totaldeletions << std::endl;
+              }            }
+                          
+          } catch (const std::exception& e) {        } catch (const std::exception& e) {
+              std::cerr << "ERROR in YeetStatus: " << e.what() << std::endl;            std::cerr << "ERROR in YeetStatus: " << e.what() << std::endl;
+          }        }
+         }    }
+              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
+              std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;            std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
+          }        }
+              
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
+              std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+              return;            return;
+          }        }
+              
+          bool space = false;        bool space = false;
+          std::string PathofFile, oid;        std::string PathofFile, oid;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
+          std::vector<std::string> oids;        std::vector<std::string> oids;
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
+                  PathofFile = "";                PathofFile = "";
+                  space = !space; continue;                space = !space; continue;
+              }                   }       
+              
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
+                  oids.push_back(oid);                oids.push_back(oid);
+                  oid = "";                oid = "";
+                  space = !space; continue;                space = !space; continue;
+              }                 }     
+                          
+              if(!space){            if(!space){
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
+              }            }
+              else{            else{
+                  oid += StoreData[i];                oid += StoreData[i];
+              }            }
+          }        }
+              
+          // Main Loop        // Main Loop
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
+              
+              int additions,deletions;            int additions,deletions;
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
+              
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
+                  std::string NewFileContent="";                std::string NewFileContent="";
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
+              
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
+                      std::string line;                    std::string line;
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
+                      }                    }
+                      NowFile.close();                    NowFile.close();
+                  }                }
+              
+                  // Call Diffs algo here                // Call Diffs algo here
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
+                  if(ans==0) {                if(ans==0) {
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
+                      continue;                    continue;
+                  }                            }            
+                                  
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                  for(auto it:diff_result){                for(auto it:diff_result){
+                                          
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      }                    }
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+              
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
+              
+                  // don't show file if nothing changed                // don't show file if nothing changed
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
+                      continue;                    continue;
+                  }                }
+              
+                  // The file we are checking:                // The file we are checking:
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
+                                  
+                  // Printing the diffs                // Printing the diffs
+                  Printer printer;                Printer printer;
+                  printer.print(diff_result);                printer.print(diff_result);
+              
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
+              } else {            } else {
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
+              }            }
+          }        }
+              
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
+                      std::string line;                    std::string line;
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                      newFile.close();                    newFile.close();
+                  }                }
+              }            }
+          }        }
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
+              std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;            std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
+          }        }
+          else{        else{
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+          }        }
+              
+              
+         }    }
+              
+              
+       /**    /**
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
+         *     *
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
+       * @return Nothing for now     * @return Nothing for now
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
+          try        try
+          {        {
+              // std::cout<<path;            // std::cout<<path;
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
+              }            }
+              
+              if(path.back()=='.')             if(path.back()=='.') 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
+              
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                          
+              // std::system("tree .");            // std::system("tree .");
+              
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
+              
+              // Make HEAD file.            // Make HEAD file.
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
+                      headFile.close();                    headFile.close();
+                  } else {                } else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                  }                }
+              
+              // Making Description file.            // Making Description file.
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
+                  if(descFile.is_open()){                if(descFile.is_open()){
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile.close();                    descFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                  }                }
+                          
+              // Making config file            // Making config file
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
+                  if(configFile.is_open()){                if(configFile.is_open()){
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
+                      configFile.close();                    configFile.close();
+                  }                }
+                  else {                else {
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                  }                }
+              
+              // Making Store File            // Making Store File
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
+                  StoreFile.close();                StoreFile.close();
+              }            }
+              else {            else {
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+              }            }
+              
+              // Make Diff file.            // Make Diff file.
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
+                  DiffFile.close();                DiffFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+              }            }
+              
+              // Make Current Branch file.            // Make Current Branch file.
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
+                  BranchFile << "master";                BranchFile << "master";
+                  BranchFile.close();                BranchFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+              }            }
+              
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
+          }        }
+          catch(const std::exception& e){        catch(const std::exception& e){
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
+          }        }
+                  
+         }    }
+              
+      void YeetAdd(){    void YeetAdd(){
+              
+         }    }
+              
+              
+      // Commit Class:    // Commit Class:
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+       /**    /**
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
+       * @author Akhil Sharma     * @author Akhil Sharma
+        */     */
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
+              // This is my .gitignore            // This is my .gitignore
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              
+              if(IGNORE){            if(IGNORE){
+                  continue;                continue;
+              }            }
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
+              }             } 
+              if(entry.is_directory()) {            if(entry.is_directory()) {
+                  continue;                continue;
+              }            }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
+          }        }
+         }    }
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
+          try        try
+          {        {
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
-         }                 }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
-              
-              
-  /**         /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
-    *          *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
-     try             try
-     {             {
-         // std::cout<<path;                 // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
-         }                 }
-              
-         if(path.back()=='.')                  if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
-              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
-         // std::system("tree .");                 // std::system("tree .");
-              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
-         // Make HEAD file.                 // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
-             } else {                     } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
-              
-         // Making Description file.                 // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
-             }                     }
-             else {                     else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
-                          
-         // Making config file                 // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
-             }                     }
-             else {                     else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
-              
-         // Making Store File                 // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
-         }                 }
-         else {                 else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
-              
-         // Make Diff file.                 // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
-              
-         // Make Current Branch file.                 // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
-              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
-     }             }
-     catch(const std::exception& e){             catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
-     }             }
-                  
-    }         }
-              
- void YeetAdd(){         void YeetAdd(){
-              
-    }         }
-              
-              
- // Commit Class:         // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
-   */          */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){                 if(IGNORE){
-             continue;                     continue;
-         }                 }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
-         }                  } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
-             continue;                     continue;
-         }                 }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
-     }             }
-    }         }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
-     try             try
-     {             {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
-              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";             std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                 _stat = "Exe";                    _stat = "Exe";
-             }             }                }
-              // content of Current FiLe.              // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);             std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data             // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);              Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob             // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());              DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob             // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);              TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);              TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }         }            }
-         for(auto it:DbObj.Store){         for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;             std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }         }            }
-         // Save the store in /Store file         // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);         writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
-         if (!TreeEntries.empty()) {         if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);             Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);             DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");             std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");             std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);             time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);             Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();             std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
+          try        try
+          {        {
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
+              
+              // Getting list of all files            // Getting list of all files
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
+              
+              // Making a visited map for later            // Making a visited map for later
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
+              for(auto it:FilePath){            for(auto it:FilePath){
+                  visited[it] = false;                visited[it] = false;
+              }            }
+                          
+              int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
+              Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
+              
+              std::string StoreData;            std::string StoreData;
+              std::ifstream Store(path + "/.yeet/Store");            std::ifstream Store(path + "/.yeet/Store");
+              if (!Store.is_open()) {            if (!Store.is_open()) {
+                  throw std::runtime_error("ERROR::STATUS::Error in opening Store File");                throw std::runtime_error("ERROR::STATUS::Error in opening Store File");
+              }            }
+              std::stringstream buffer;            std::stringstream buffer;
+              buffer << Store.rdbuf();            buffer << Store.rdbuf();
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
+              StoreData = buffer.str();            StoreData = buffer.str();
-     }             }
+              Store.close();            Store.close();
+              
+              if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
+                  std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+                  return;                return;
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
+              }            }
+              
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
+              std::vector<std::string> oids;            std::vector<std::string> oids;
+              
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
+              // taking data line by line            // taking data line by line
+              std::istringstream storeStream(StoreData);            std::istringstream storeStream(StoreData);
+              std::string line;            std::string line;
+              while (std::getline(storeStream, line)) {            while (std::getline(storeStream, line)) {
+                  if (line.empty())                if (line.empty())
+                  continue;                continue;
+                  size_t spacePos = line.find(' ');                size_t spacePos = line.find(' ');
+                  if (spacePos == std::string::npos)                if (spacePos == std::string::npos)
+                  continue;                continue;
+                  FilePaths.push_back(line.substr(0, spacePos));                FilePaths.push_back(line.substr(0, spacePos));
+                  oids.push_back(line.substr(spacePos + 1));                oids.push_back(line.substr(spacePos + 1));
+              }            }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
+              
+              // Main Loop            // Main Loop
+              for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
+              
+                  int additions,deletions;                int additions,deletions;
+                  additions = 0, deletions = 0;                additions = 0, deletions = 0;
+                  std::string thePathOfOid = "";                std::string thePathOfOid = "";
+                  std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+                  thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
+              
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+                  std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
+              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
+                  if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
+                      std::string NewFileContent="";                    std::string NewFileContent="";
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
+              
+                      if(NowFile.is_open()){                    if(NowFile.is_open()){
+                          std::string line;                        std::string line;
+                          while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
+                              NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
+                          }                        }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
+                          NowFile.close();                        NowFile.close();
+                      }                    }
-         }                 }
-     }             }
+              
+                      // Call Diffs algo here                    // Call Diffs algo here
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
+                      std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                      std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                      std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                      // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
+                      if(ans==0) {                    if(ans==0) {
+                          // TODO: Don't add in commit                        // TODO: Don't add in commit
-              
+                          // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
+                          continue;                        continue;
+                      }                                }            
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
+                                          
+                      std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                      for(auto it:diff_result){                    for(auto it:diff_result){
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+                                                  
+                          // TODO: Add number of lines.                        // TODO: Add number of lines.
+                          if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                              deletions++;                            deletions++;
+                              Totaldeletions++;                            Totaldeletions++;
+                          }                        }
+                          else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
+                              additions++;                            additions++;
+                              Totaladditions++;                            Totaladditions++;
+                          }                        }
+                      }                    }
+              
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
+                      // Don't print exec file diffs.                    // Don't print exec file diffs.
+              
+                      // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                      // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                      if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
+                          continue;                        continue;
+                      }                    }
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                      // don't show file if nothing changed                    // don't show file if nothing changed
+                      if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
+                          continue;                        continue;
+                      }                    }
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
+                      // The file we are checking:                    // The file we are checking:
+                      std::cout<<FilePaths[i]<<std::endl;                    std::cout<<FilePaths[i]<<std::endl;
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
+                                          
+                      // Printing the diffs                    // Printing the diffs
+                      Printer printer;                    Printer printer;
+                      printer.print(diff_result);                    printer.print(diff_result);
+              
+                      std::cout<<"This file additions: "<<additions<<"\n";                    std::cout<<"This file additions: "<<additions<<"\n";
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
+                      std::cout<<"This file deletions: "<<deletions<<std::endl;                    std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                      visited[FilePaths[i]] = true;                    visited[FilePaths[i]] = true;
+                  } else {                } else {
+                      deletions+=InflatedContent.size();                    deletions+=InflatedContent.size();
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
+                  }                }
+              }            }
+              
+              for(int i=0;i<visited.size();i++){            for(int i=0;i<visited.size();i++){
+                  if(!visited[FilePaths[i]]){                if(!visited[FilePaths[i]]){
+                      std::ifstream newFile(FilePaths[i]);                    std::ifstream newFile(FilePaths[i]);
+                      if (newFile.is_open()) {                    if (newFile.is_open()) {
-             }                     }
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                          std::string line;                        std::string line;
+                          while (std::getline(newFile, line)) {                        while (std::getline(newFile, line)) {
+                              Totaladditions++;                            Totaladditions++;
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
+                          }                        }
+                          newFile.close();                        newFile.close();
+                      }                    }
+                  }                }
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+              }            }
+              if(Totaladditions == 0  && Totaldeletions == 0){            if(Totaladditions == 0  && Totaldeletions == 0){
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
+                  std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
+                  // TODO: Add a check so that no commit can happen;                // TODO: Add a check so that no commit can happen;
+              }            }
+              else{            else{
+                  std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+              }            }
+              
+                          
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+          }        }
+          catch (const std::exception& e) {        catch (const std::exception& e) {
-         }                 }
+              std::cerr << "ERROR::YeetStatus: " << e.what() << std::endl;            std::cerr << "ERROR::YeetStatus: " << e.what() << std::endl;
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
+          }        }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
+                  
+         }    }
-              
-              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
+          try        try
+          {        {
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
+              
+              // Getting list of all files            // Getting list of all files
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
+              
+              if (FilePath.empty()) {            if (FilePath.empty()) {
+                  std::cout << "No files found in directory\n";                std::cout << "No files found in directory\n";
+                  return;                return;
+              }            }
+              // Making a visited map for later            // Making a visited map for later
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
+              for(auto it:FilePath){            for(auto it:FilePath){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
+                  visited[it] = false;                visited[it] = false;
+              }            }
+                          
+              int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
+              Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
+              
+              std::string StoreData;            std::string StoreData;
+              std::ifstream Store(path + "/.yeet/Store");            std::ifstream Store(path + "/.yeet/Store");
+              if (!Store.is_open()) {            if (!Store.is_open()) {
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
+                  throw std::runtime_error("ERROR::STATUS::Error in opening Store File");                throw std::runtime_error("ERROR::STATUS::Error in opening Store File");
-              
+              }            }
+              std::stringstream buffer;            std::stringstream buffer;
+              buffer << Store.rdbuf();            buffer << Store.rdbuf();
+              StoreData = buffer.str();            StoreData = buffer.str();
+              Store.close();            Store.close();
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
+              
+              if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
+                  std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+                  return;                return;
+              }            }
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
+              
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
+              std::vector<std::string> oids;            std::vector<std::string> oids;
+              
+              // taking data line by line            // taking data line by line
+              std::istringstream storeStream(StoreData);            std::istringstream storeStream(StoreData);
+              std::string line;            std::string line;
+              while (std::getline(storeStream, line)) {            while (std::getline(storeStream, line)) {
+                  if (line.empty())                if (line.empty())
+                  continue;                continue;
+                  size_t spacePos = line.find(' ');                size_t spacePos = line.find(' ');
+                  if (spacePos == std::string::npos)                if (spacePos == std::string::npos)
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
+                  continue;                continue;
+                  FilePaths.push_back(line.substr(0, spacePos));                FilePaths.push_back(line.substr(0, spacePos));
+                  oids.push_back(line.substr(spacePos + 1));                oids.push_back(line.substr(spacePos + 1));
+              }            }
+              
+              if (FilePaths.size() != oids.size()) {            if (FilePaths.size() != oids.size()) {
+                  throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");                throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");
+              }            }
+              
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
+              // Main Loop            // Main Loop
+              for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
+              
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
+                  int additions,deletions;                int additions,deletions;
+                  additions = 0, deletions = 0;                additions = 0, deletions = 0;
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
+                  std::string thePathOfOid = "";                std::string thePathOfOid = "";
+                  std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+                  thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
+              
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+                  std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
+              
+                  if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
+                      std::string NewFileContent="";                    std::string NewFileContent="";
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              
+                      if(NowFile.is_open()){                    if(NowFile.is_open()){
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
+                          std::string line;                        std::string line;
+                          while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
+                              NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
+                          }                        }
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+                          NowFile.close();                        NowFile.close();
+                      }                    }
+              
+                      // Call Diffs algo here                    // Call Diffs algo here
+                      std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::string line;                         std::string line;
+                      std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                      std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
+                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                      // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
+                      if(ans==0) {                    if(ans==0) {
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
+                          // TODO: Don't add in commit                        // TODO: Don't add in commit
+                          // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
+                          continue;                        continue;
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
+                      }                                }            
+                                          
+                      std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                      for(auto it:diff_result){                    for(auto it:diff_result){
+                                                  
+                          // TODO: Add number of lines.                        // TODO: Add number of lines.
+                          if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
+                              deletions++;                            deletions++;
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
+                              Totaldeletions++;                            Totaldeletions++;
+                          }                        }
+                          else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
+                              additions++;                            additions++;
+                              Totaladditions++;                            Totaladditions++;
+                          }                        }
-                 }                 }                    }
+              
+                      // Don't print exec file diffs.                    // Don't print exec file diffs.
+              
+                      // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                      // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                      if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
+                          continue;                        continue;
+                      }                    }
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
+              
+                      // don't show file if nothing changed                    // don't show file if nothing changed
+                      if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
+                          continue;                        continue;
+                      }                    }
+              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
+                      // The file we are checking:                    // The file we are checking:
+                      std::cout<<FilePaths[i]<<std::endl;                    std::cout<<FilePaths[i]<<std::endl;
+                                          
+                      // Printing the diffs                    // Printing the diffs
+                      Printer printer;                    Printer printer;
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
+                      try {                    try {
+                          printer.print(diff_result);                        printer.print(diff_result);
+                      } catch (const std::exception& e) {                    } catch (const std::exception& e) {
+                          std::cout << "ERROR printing diffs: " << e.what() << "\n";                        std::cout << "ERROR printing diffs: " << e.what() << "\n";
+                      }                    }
+              
+                      std::cout<<"This file additions: "<<additions<<"\n";                    std::cout<<"This file additions: "<<additions<<"\n";
-             printer.print(diff_result);                     printer.print(diff_result);
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                      std::cout<<"This file deletions: "<<deletions<<std::endl;                    std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                      visited[FilePaths[i]] = true;                    visited[FilePaths[i]] = true;
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+                  } else {                } else {
+                      deletions+=InflatedContent.size();                    deletions+=InflatedContent.size();
+                  }                }
-         }         }            }
+              
+              for(int i=0;i<visited.size();i++){            for(int i=0;i<visited.size();i++){
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
+                  if(!visited[FilePaths[i]]){                if(!visited[FilePaths[i]]){
+                      std::ifstream newFile(FilePaths[i]);                    std::ifstream newFile(FilePaths[i]);
+                      if (newFile.is_open()) {                    if (newFile.is_open()) {
+                          std::string line;                        std::string line;
+                          while (std::getline(newFile, line)) {                        while (std::getline(newFile, line)) {
+                              Totaladditions++;                            Totaladditions++;
+                          }                        }
+                          newFile.close();                        newFile.close();
-                 newFile.close();                         newFile.close();
+                      }                    }
-             }             }                }
-         }         }            }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
+              if(Totaladditions == 0  && Totaldeletions == 0){            if(Totaladditions == 0  && Totaldeletions == 0){
-              
-    }         }
+                  std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
+                  // TODO: Add a check so that no commit can happen;                // TODO: Add a check so that no commit can happen;
+              }            }
+              else{            else{
+                  std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+              }            }
+              
+                          
+          }        }
+          catch (const std::exception& e) {        catch (const std::exception& e) {
+              std::cerr << "ERROR::YeetStatus: " << e.what() << std::endl;            std::cerr << "ERROR::YeetStatus: " << e.what() << std::endl;
+          }        }
+                  
+         }    }
-              
-              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
+          try        try
+          {        {
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
+              
+              // Getting list of all files            // Getting list of all files
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
+              
+              if (FilePath.empty()) {            if (FilePath.empty()) {
+                  std::cout << "No files found in directory\n";                std::cout << "No files found in directory\n";
+                  return;                return;
+              }            }
+              // Making a visited map for later            // Making a visited map for later
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
+              for(auto it:FilePath){            for(auto it:FilePath){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
+                  visited[it] = false;                visited[it] = false;
+              }            }
+                          
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
+              int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
+              Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
+              
+              if (!std::filesystem::exists(path + "/.yeet")) {            if (!std::filesystem::exists(path + "/.yeet")) {
+                  std::cout << "ERROR::STATUS::No .yeet directory found\n";                std::cout << "ERROR::STATUS::No .yeet directory found\n";
+                  return;                return;
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
+              }            }
-     bool space = false;             bool space = false;
+              
+              
+              std::string StoreData;            std::string StoreData;
+              std::ifstream Store(path + "/.yeet/Store");            std::ifstream Store(path + "/.yeet/Store");
+              if (!Store.is_open()) {            if (!Store.is_open()) {
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
+                  throw std::runtime_error("ERROR::STATUS::Error in opening Store File");                throw std::runtime_error("ERROR::STATUS::Error in opening Store File");
+              }            }
+              std::stringstream buffer;            std::stringstream buffer;
+              buffer << Store.rdbuf();            buffer << Store.rdbuf();
+              StoreData = buffer.str();            StoreData = buffer.str();
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
+              Store.close();            Store.close();
+              
+              if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
+                  std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+                  return;                return;
+              }            }
+              
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
+              std::vector<std::string> oids;            std::vector<std::string> oids;
+              
+              // taking data line by line            // taking data line by line
+              std::istringstream storeStream(StoreData);            std::istringstream storeStream(StoreData);
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
+              std::string line;            std::string line;
+              while (std::getline(storeStream, line)) {            while (std::getline(storeStream, line)) {
+                  if (line.empty())                if (line.empty())
+                  continue;                continue;
+                  size_t spacePos = line.find(' ');                size_t spacePos = line.find(' ');
+                  if (spacePos == std::string::npos)                if (spacePos == std::string::npos)
+                  continue;                continue;
+                  FilePaths.push_back(line.substr(0, spacePos));                FilePaths.push_back(line.substr(0, spacePos));
+                  oids.push_back(line.substr(spacePos + 1));                oids.push_back(line.substr(spacePos + 1));
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
+              }            }
+              
+              if (FilePaths.size() != oids.size()) {            if (FilePaths.size() != oids.size()) {
-              
+                  throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");                throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");
+              }            }
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
+              
+              // Main Loop            // Main Loop
+              for(size_t i=0;i<oids.size();i++){            for(size_t i=0;i<oids.size();i++){
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
+              
+                  if (i >= FilePaths.size()) break;                if (i >= FilePaths.size()) break;
+              
+                  if (oids[i].length() < 2) {                if (oids[i].length() < 2) {
+                      std::cerr << "WARNING: Malformed oid encountered, skipping...\n";                    std::cerr << "WARNING: Malformed oid encountered, skipping...\n";
+                      continue;                    continue;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+                  }                }
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
+                  int additions,deletions;                int additions,deletions;
+                  additions = 0, deletions = 0;                additions = 0, deletions = 0;
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+                  std::string thePathOfOid = "";                std::string thePathOfOid = "";
+                  std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+                  thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+                  // Check if object file exists                // Check if object file exists
+                  if (!std::filesystem::exists(FullPath)) {                if (!std::filesystem::exists(FullPath)) {
+                      std::cerr << "WARNING: Object file not found: " << FullPath << "\n";                    std::cerr << "WARNING: Object file not found: " << FullPath << "\n";
+                      continue;                    continue;
-             }             }                }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
+                  std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
+              
+                  if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
+                      std::string NewFileContent="";                    std::string NewFileContent="";
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
+              
+                      if(NowFile.is_open()){                    if(NowFile.is_open()){
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
+                          std::string line;                        std::string line;
+                          while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
+                              NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
+                          }                        }
+                          NowFile.close();                        NowFile.close();
+                      }                    }
+              
+                      // Call Diffs algo here                    // Call Diffs algo here
+                      std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                      std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                      std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
+                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                      // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
+                      if(ans==0) {                    if(ans==0) {
-             }                                 }            
+                          // TODO: Don't add in commit                        // TODO: Don't add in commit
+                          // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
+                          continue;                        continue;
+                      }                                }            
+                                          
+                      std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
+              
+                      for(auto it:diff_result){                    for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
+                                                  
+                          // TODO: Add number of lines.                        // TODO: Add number of lines.
+                          if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
+                              deletions++;                            deletions++;
+                              Totaldeletions++;                            Totaldeletions++;
+                          }                        }
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
-              
+                          else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
+                              additions++;                            additions++;
+                              Totaladditions++;                            Totaladditions++;
+                          }                        }
+                      }                    }
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
+              
+                      // Don't print exec file diffs.                    // Don't print exec file diffs.
+              
+                      // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                      // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                      if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
+                          continue;                        continue;
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+                      }                    }
+              
+                      // don't show file if nothing changed                    // don't show file if nothing changed
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                      if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
+                          continue;                        continue;
+                      }                    }
+              
+                      // The file we are checking:                    // The file we are checking:
+                      std::cout<<FilePaths[i]<<std::endl;                    std::cout<<FilePaths[i]<<std::endl;
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
+                                          
+                      // Printing the diffs                    // Printing the diffs
+                      Printer printer;                    Printer printer;
+                      try {                    try {
+                          printer.print(diff_result);                        printer.print(diff_result);
+                      } catch (const std::exception& e) {                    } catch (const std::exception& e) {
+                          std::cout << "ERROR printing diffs: " << e.what() << "\n";                        std::cout << "ERROR printing diffs: " << e.what() << "\n";
+                      }                    }
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+              
+                      std::cout<<"This file additions: "<<additions<<"\n";                    std::cout<<"This file additions: "<<additions<<"\n";
+                      std::cout<<"This file deletions: "<<deletions<<std::endl;                    std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
+                      if (visited.find(FilePaths[i]) != visited.end()) {                    if (visited.find(FilePaths[i]) != visited.end()) {
+                          visited[FilePaths[i]] = true;                        visited[FilePaths[i]] = true;
+                      }                    }
+              
+                  } else {                } else {
+                      deletions+=InflatedContent.size();                    deletions+=InflatedContent.size();
+                  }                }
-         }         }            }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
+              
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
+              for(int i=0;i<visited.size();i++){            for(int i=0;i<visited.size();i++){
+                  if(!visited[FilePaths[i]]){                if(!visited[FilePaths[i]]){
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
+                      std::ifstream newFile(FilePaths[i]);                    std::ifstream newFile(FilePaths[i]);
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
+                      if (newFile.is_open()) {                    if (newFile.is_open()) {
+                          std::string line;                        std::string line;
+                          while (std::getline(newFile, line)) {                        while (std::getline(newFile, line)) {
+                              Totaladditions++;                            Totaladditions++;
+                          }                        }
+                          newFile.close();                        newFile.close();
+                      }                    }
+                  }                }
+              }            }
+              if(Totaladditions == 0  && Totaldeletions == 0){            if(Totaladditions == 0  && Totaldeletions == 0){
+                  std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
+                  // TODO: Add a check so that no commit can happen;                // TODO: Add a check so that no commit can happen;
+              }            }
+              else{            else{
+                  std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+              }            }
+              
+                          
+          }        }
+          catch (const std::exception& e) {        catch (const std::exception& e) {
+              std::cerr << "ERROR::YeetStatus: " << e.what() << std::endl;            std::cerr << "ERROR::YeetStatus: " << e.what() << std::endl;
+          }        }
-              
+                  
-    }         }
+         }    }
-              
-              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
-     }     }        }
-              
-     if(StoreData == "Empty Store"){     if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;         return;            return;
-     }     }        }
-              
-     bool space = false;     bool space = false;        bool space = false;
-     std::string PathofFile, oid;     std::string PathofFile, oid;        std::string PathofFile, oid;
-     PathofFile = ""; oid = "";     PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;     std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;     std::vector<std::string> oids;        std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){      for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){         if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);             FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
-             PathofFile = "";             PathofFile = "";                PathofFile = "";
-             space = !space; continue;             space = !space; continue;                space = !space; continue;
-         }                }                   }       
-              
-         if(StoreData[i] == '\n'){         if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
-             oids.push_back(oid);             oids.push_back(oid);                oids.push_back(oid);
-             oid = "";             oid = "";                oid = "";
-             space = !space; continue;             space = !space; continue;                space = !space; continue;
-         }              }                 }     
-                              
-         if(!space){         if(!space){            if(!space){
-             PathofFile += StoreData[i];             PathofFile += StoreData[i];                PathofFile += StoreData[i];
-         }         }            }
-         else{         else{            else{
-             oid += StoreData[i];             oid += StoreData[i];                oid += StoreData[i];
-         }         }            }
-     }     }        }
-              
-     // Main Loop     // Main Loop        // Main Loop
-     for(int i=0;i<oids.size();i++){     for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;         int additions,deletions;            int additions,deletions;
-         additions = 0, deletions = 0;         additions = 0, deletions = 0;            additions = 0, deletions = 0;
-         std::string thePathOfOid = "";         std::string thePathOfOid = "";            std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);          std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);         std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {         if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";             std::string NewFileContent="";                std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);             std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){             if(NowFile.is_open()){                if(NowFile.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while(std::getline(NowFile,line)){                 while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                     NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
-                 }                 }                    }
-                 NowFile.close();                 NowFile.close();                    NowFile.close();
-             }             }                }
-              
-             // Call Diffs algo here             // Call Diffs algo here                // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;             std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);              int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;             // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
-             if(ans==0) {             if(ans==0) {                if(ans==0) {
-                 // TODO: Don't add in commit                 // TODO: Don't add in commit                    // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                 // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
-                 continue;                 continue;                    continue;
-             }                         }                            }            
-                                          
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){             for(auto it:diff_result){                for(auto it:diff_result){
-                                                      
-                 // TODO: Add number of lines.                 // TODO: Add number of lines.                    // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                 if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
-                     deletions++;                     deletions++;                        deletions++;
-                     Totaldeletions++;                     Totaldeletions++;                        Totaldeletions++;
-                 }                 }                    }
-                 else if(it.type == Edit::INS) {                 else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
-                     additions++;                     additions++;                        additions++;
-                     Totaladditions++;                     Totaladditions++;                        Totaladditions++;
-                 }                 }                    }
-             }             }                }
-              
-             // Don't print exec file diffs.             // Don't print exec file diffs.                // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if(! access (FilePaths[i].c_str(), X_OK)){             if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
-              
+                      continue;                    continue;
+                  }                }
+              
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  // don't show file if nothing changed                // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
-                 continue;                         continue;
+                      continue;                    continue;
-             }                     }
+                  }                }
-              
+              
-             // The file we are checking:                     // The file we are checking:
+                  // The file we are checking:                // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
-                                  
+                                  
-             // Printing the diffs                     // Printing the diffs
+                  // Printing the diffs                // Printing the diffs
-             Printer printer;                     Printer printer;
+                  Printer printer;                Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
+                  printer.print(diff_result);                printer.print(diff_result);
-              
+              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
+              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-         } else {                 } else {
+              } else {            } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
-         }                 }
+              }            }
-     }             }
+          }        }
-              
+              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
-                 std::string line;                         std::string line;
+                      std::string line;                    std::string line;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
+                          Totaladditions++;                        Totaladditions++;
-                 }                         }
+                      }                    }
-                 newFile.close();                         newFile.close();
+                      newFile.close();                    newFile.close();
-             }                     }
+                  }                }
-         }                 }
+              }            }
-     }             }
+          }        }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
+              std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-     }             }
+          }        }
-     else{             else{
+          else{        else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
+          }        }
-              
-              
+              
-    }         }
+         }    }
-              
-              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
-     }     }        }
-              
-     if(StoreData == "Empty Store"){     if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;         return;            return;
-     }     }        }
-              
-     bool space = false;     bool space = false;        bool space = false;
-     std::string PathofFile, oid;     std::string PathofFile, oid;        std::string PathofFile, oid;
-     PathofFile = ""; oid = "";     PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;     std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;     std::vector<std::string> oids;        std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){      for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){         if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);             FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
-             PathofFile = "";             PathofFile = "";                PathofFile = "";
-             space = !space; continue;             space = !space; continue;                space = !space; continue;
-         }                }                   }       
-              
-         if(StoreData[i] == '\n'){         if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
-             oids.push_back(oid);             oids.push_back(oid);                oids.push_back(oid);
-             oid = "";             oid = "";                oid = "";
-             space = !space; continue;             space = !space; continue;                space = !space; continue;
-         }              }                 }     
-                              
-         if(!space){         if(!space){            if(!space){
-             PathofFile += StoreData[i];             PathofFile += StoreData[i];                PathofFile += StoreData[i];
-         }         }            }
-         else{         else{            else{
-             oid += StoreData[i];             oid += StoreData[i];                oid += StoreData[i];
-         }         }            }
-     }     }        }
-              
-     // Main Loop     // Main Loop        // Main Loop
-     for(int i=0;i<oids.size();i++){     for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
-              
+              std::cout<<FilePaths[i]<<std::endl;            std::cout<<FilePaths[i]<<std::endl;
-         int additions,deletions;                 int additions,deletions;
+              
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
+              int additions,deletions;            int additions,deletions;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-              
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
+              
-             std::string NewFileContent="";                     std::string NewFileContent="";
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
+                  std::string NewFileContent="";                std::string NewFileContent="";
-              
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+              
-                 std::string line;                         std::string line;
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
+                      std::string line;                    std::string line;
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
-                 }                         }
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
-                 NowFile.close();                         NowFile.close();
+                      }                    }
-             }                     }
+                      NowFile.close();                    NowFile.close();
-              
+                  }                }
-             // Call Diffs algo here                     // Call Diffs algo here
+              
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  // Call Diffs algo here                // Call Diffs algo here
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-              
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
+              
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
-              
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+              
-             if(ans==0) {                     if(ans==0) {
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
+                  if(ans==0) {                if(ans==0) {
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
-                 continue;                         continue;
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
-             }                                 }            
+                      continue;                    continue;
-                                  
+                  }                            }            
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                                  
-              
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-             for(auto it:diff_result){                     for(auto it:diff_result){
+              
-                                          
+                  for(auto it:diff_result){                for(auto it:diff_result){
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
+                                          
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
-                     deletions++;                             deletions++;
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
-                     Totaldeletions++;                             Totaldeletions++;
+                          deletions++;                        deletions++;
-                 }                         }
+                          Totaldeletions++;                        Totaldeletions++;
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
+                      }                    }
-                     additions++;                             additions++;
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
-                     Totaladditions++;                             Totaladditions++;
+                          additions++;                        additions++;
-                 }                         }
+                          Totaladditions++;                        Totaladditions++;
-             }                     }
+                      }                    }
-              
+                  }                }
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+              
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // don't show file if nothing changed                // don't show file if nothing changed
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
-                 continue;                         continue;
+                      continue;                    continue;
-             }                     }
+                  }                }
-              
+              
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  // The file we are checking:                // The file we are checking:
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
-                 continue;                         continue;
+                                  
-             }                     }
+                  // Printing the diffs                // Printing the diffs
-              
+                  Printer printer;                Printer printer;
-             // The file we are checking:                     // The file we are checking:
+                  printer.print(diff_result);                printer.print(diff_result);
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+              
-                                  
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
-             // Printing the diffs                     // Printing the diffs
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-             Printer printer;                     Printer printer;
+              
-             printer.print(diff_result);                     printer.print(diff_result);
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-              
+              } else {            } else {
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+              }            }
-              
+          }        }
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
+              
-         } else {                 } else {
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
-         }                 }
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
-     }             }
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
-              
+                      std::string line;                    std::string line;
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
+                          Totaladditions++;                        Totaladditions++;
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
+                      }                    }
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
+                      newFile.close();                    newFile.close();
-                 std::string line;                         std::string line;
+                  }                }
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
+              }            }
-                     Totaladditions++;                             Totaladditions++;
+          }        }
-                 }                         }
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-                 newFile.close();                         newFile.close();
+              std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
-             }                     }
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-         }                 }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
+          }        }
-     else{             else{
+          else{        else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
+          }        }
-              
-              
+              
-    }         }
+         }    }
-              
-              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
-     }     }        }
-              
-     if(StoreData == "Empty Store"){     if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;         return;            return;
-     }     }        }
-              
-     bool space = false;     bool space = false;        bool space = false;
-     std::string PathofFile, oid;     std::string PathofFile, oid;        std::string PathofFile, oid;
-     PathofFile = ""; oid = "";     PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;     std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;     std::vector<std::string> oids;        std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){      for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){         if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);             FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
-             PathofFile = "";             PathofFile = "";                PathofFile = "";
-             space = !space; continue;             space = !space; continue;                space = !space; continue;
-         }                }                   }       
-              
-         if(StoreData[i] == '\n'){         if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
-             oids.push_back(oid);             oids.push_back(oid);                oids.push_back(oid);
-             oid = "";             oid = "";                oid = "";
-             space = !space; continue;             space = !space; continue;                space = !space; continue;
-         }              }                 }     
-                              
-         if(!space){         if(!space){            if(!space){
-             PathofFile += StoreData[i];             PathofFile += StoreData[i];                PathofFile += StoreData[i];
-         }         }            }
-         else{         else{            else{
-             oid += StoreData[i];             oid += StoreData[i];                oid += StoreData[i];
-         }         }            }
-     }     }        }
-              
-     // Main Loop     // Main Loop        // Main Loop
-     for(int i=0;i<oids.size();i++){     for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
-              
+              std::cout<<FilePaths[i]<<std::endl;            std::cout<<FilePaths[i]<<std::endl;
-         int additions,deletions;                 int additions,deletions;
+              
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
+              int additions,deletions;            int additions,deletions;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-              
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
+              
-             std::string NewFileContent="";                     std::string NewFileContent="";
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
+                  std::string NewFileContent="";                std::string NewFileContent="";
-              
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+              
-                 std::string line;                         std::string line;
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
+                      std::string line;                    std::string line;
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
-                 }                         }
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
-                 NowFile.close();                         NowFile.close();
+                      }                    }
-             }                     }
+                      NowFile.close();                    NowFile.close();
-              
+                  }                }
-             // Call Diffs algo here                     // Call Diffs algo here
+              
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  // Call Diffs algo here                // Call Diffs algo here
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-              
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
+              
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
-              
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+              
-             if(ans==0) {                     if(ans==0) {
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
+                  if(ans==0) {                if(ans==0) {
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
-                 continue;                         continue;
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
-             }                                 }            
+                      continue;                    continue;
-                                  
+                  }                            }            
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                                  
-              
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-             for(auto it:diff_result){                     for(auto it:diff_result){
+              
-                                          
+                  for(auto it:diff_result){                for(auto it:diff_result){
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
+                                          
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
-                     deletions++;                             deletions++;
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
-                     Totaldeletions++;                             Totaldeletions++;
+                          deletions++;                        deletions++;
-                 }                         }
+                          Totaldeletions++;                        Totaldeletions++;
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
+                      }                    }
-                     additions++;                             additions++;
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
-                     Totaladditions++;                             Totaladditions++;
+                          additions++;                        additions++;
-                 }                         }
+                          Totaladditions++;                        Totaladditions++;
-             }                     }
+                      }                    }
-              
+                  }                }
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+              
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // don't show file if nothing changed                // don't show file if nothing changed
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
-                 continue;                         continue;
+                      continue;                    continue;
-             }                     }
+                  }                }
-              
+              
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  // The file we are checking:                // The file we are checking:
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
-                 continue;                         continue;
+                                  
-             }                     }
+                  // Printing the diffs                // Printing the diffs
-              
+                  Printer printer;                Printer printer;
-             // The file we are checking:                     // The file we are checking:
+                  printer.print(diff_result);                printer.print(diff_result);
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+              
-                                  
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
-             // Printing the diffs                     // Printing the diffs
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-             Printer printer;                     Printer printer;
+                  std::cout<<visited[FilePaths[i]];                std::cout<<visited[FilePaths[i]];
-             printer.print(diff_result);                     printer.print(diff_result);
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+              } else {            } else {
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+              }            }
-              
+          }        }
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
+              
-         } else {                 } else {
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
-         }                 }
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
-     }             }
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
-              
+                      std::string line;                    std::string line;
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
+                          Totaladditions++;                        Totaladditions++;
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
+                      }                    }
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
+                      newFile.close();                    newFile.close();
-                 std::string line;                         std::string line;
+                  }                }
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
+              }            }
-                     Totaladditions++;                             Totaladditions++;
+          }        }
-                 }                         }
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-                 newFile.close();                         newFile.close();
+              std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
-             }                     }
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-         }                 }
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
+          }        }
-     else{             else{
+          else{        else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
+          }        }
-              
-              
+              
-    }         }
+         }    }
-              
-              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
+      void YeetStatus(std::string path) {    void YeetStatus(std::string path) {
+          try {        try {
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
+              std::vector<std::filesystem::path> FilePath;            std::vector<std::filesystem::path> FilePath;
+                          
+              // Getting list of all files            // Getting list of all files
+              ListFiles(path, FilePath);            ListFiles(path, FilePath);
+                          
+              if (FilePath.empty()) {            if (FilePath.empty()) {
+                  std::cout << "No files found in directory\n";                std::cout << "No files found in directory\n";
+                  return;                return;
+              }            }
+              
+              // Making a visited map for later            // Making a visited map for later
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
+              for (const auto& it : FilePath) {            for (const auto& it : FilePath) {
+                  visited[it] = false;                visited[it] = false;
+              }            }
+                          
+              int Totaladditions = 0, Totaldeletions = 0;            int Totaladditions = 0, Totaldeletions = 0;
+                  
+              // Read Store file content with error handling            // Read Store file content with error handling
+              std::string StoreData;            std::string StoreData;
+              std::ifstream Store(path + "/.yeet/Store");            std::ifstream Store(path + "/.yeet/Store");
+              if (!Store.is_open()) {            if (!Store.is_open()) {
+                  throw std::runtime_error("ERROR::STATUS::Error in opening Store File");                throw std::runtime_error("ERROR::STATUS::Error in opening Store File");
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                 std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-     }             }
+              }            }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
+                          
+              std::stringstream buffer;            std::stringstream buffer;
+              buffer << Store.rdbuf();            buffer << Store.rdbuf();
+              StoreData = buffer.str();            StoreData = buffer.str();
+              Store.close();            Store.close();
+                  
+              if (StoreData.empty() || StoreData == "Empty Store\n") {            if (StoreData.empty() || StoreData == "Empty Store\n") {
+                  std::cout << "ERROR::STATUS::Nothing to Compare to. Make your first commit!!\n";                std::cout << "ERROR::STATUS::Nothing to Compare to. Make your first commit!!\n";
+                  return;                return;
+              }            }
+                  
+              // Parse Store data            // Parse Store data
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
+              std::vector<std::string> oids;            std::vector<std::string> oids;
+              std::string currentToken;            std::string currentToken;
+              bool isPath = true;            bool isPath = true;
+                          
+              std::istringstream storeStream(StoreData);            std::istringstream storeStream(StoreData);
+              std::string line;            std::string line;
+              while (std::getline(storeStream, line)) {            while (std::getline(storeStream, line)) {
+                  if (line.empty()) continue;                if (line.empty()) continue;
+                                  
+                  size_t spacePos = line.find(' ');                size_t spacePos = line.find(' ');
+                  if (spacePos == std::string::npos) continue;                if (spacePos == std::string::npos) continue;
+                                  
+                  FilePaths.push_back(line.substr(0, spacePos));                FilePaths.push_back(line.substr(0, spacePos));
+                  oids.push_back(line.substr(spacePos + 1));                oids.push_back(line.substr(spacePos + 1));
+              }            }
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
+                          
+              if (FilePaths.size() != oids.size()) {            if (FilePaths.size() != oids.size()) {
+                  throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");                throw std::runtime_error("ERROR::STATUS::Mismatched paths and oids in Store file");
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
+              }            }
+                  
+              // Main Loop with bounds checking            // Main Loop with bounds checking
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+              for (size_t i = 0; i < oids.size(); i++) {            for (size_t i = 0; i < oids.size(); i++) {
+                  if (oids[i].length() < 2) {                if (oids[i].length() < 2) {
+                      std::cout << "WARNING: Invalid OID format for " << FilePaths[i] << "\n";                    std::cout << "WARNING: Invalid OID format for " << FilePaths[i] << "\n";
+                      continue;                    continue;
+                  }                }
+                                  
+                  std::string thePathOfOid = oids[i].substr(0, 2) + "/" + oids[i].substr(2);                std::string thePathOfOid = oids[i].substr(0, 2) + "/" + oids[i].substr(2);
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+                                  
+                  if (!std::filesystem::exists(FullPath)) {                if (!std::filesystem::exists(FullPath)) {
+                      std::cout << "WARNING: Object file not found: " << FullPath << "\n";                    std::cout << "WARNING: Object file not found: " << FullPath << "\n";
+                      continue;                    continue;
+                  }                }
+                                  
+                  std::string InflatedContent;                std::string InflatedContent;
+                  try {                try {
+                      InflatedContent = Inflate(FullPath);                    InflatedContent = Inflate(FullPath);
+                  } catch (const std::exception& e) {                } catch (const std::exception& e) {
+                      std::cout << "ERROR inflating " << FullPath << ": " << e.what() << "\n";                    std::cout << "ERROR inflating " << FullPath << ": " << e.what() << "\n";
+                      continue;                    continue;
+                  }                }
+                  
+                  if (!std::filesystem::exists(FilePaths[i])) {                if (!std::filesystem::exists(FilePaths[i])) {
+                      std::cout << "File deleted: " << FilePaths[i] << "\n";                    std::cout << "File deleted: " << FilePaths[i] << "\n";
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
+                      Totaldeletions++;                    Totaldeletions++;
+                      continue;                    continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                  }                }
+                                  
+                  // Read current file content                // Read current file content
-              
+                  std::string NewFileContent;                std::string NewFileContent;
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
+                  {                {
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
+                      if (!NowFile.is_open()) {                    if (!NowFile.is_open()) {
+                          std::cout << "WARNING: Cannot open current file: " << FilePaths[i] << "\n";                        std::cout << "WARNING: Cannot open current file: " << FilePaths[i] << "\n";
+                          continue;                        continue;
+                      }                    }
+                      std::stringstream buffer;                    std::stringstream buffer;
+                      buffer << NowFile.rdbuf();                    buffer << NowFile.rdbuf();
+                      NewFileContent = buffer.str();                    NewFileContent = buffer.str();
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
+                  }                }
+                  
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
+                  // Diff calculation with error handling                // Diff calculation with error handling
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-              
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                  
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);
+                  
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+                  if (ans < 0) {                if (ans < 0) {
-                 continue;                         continue;
-             }                     }
+                      std::cout << "WARNING: Diff calculation failed for " << FilePaths[i] << "\n";                    std::cout << "WARNING: Diff calculation failed for " << FilePaths[i] << "\n";
+                      continue;                    continue;
+                  }                }
-              
+                                  
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  if (ans == 0) continue; // Files are identical                if (ans == 0) continue; // Files are identical
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+                                  
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
-             printer.print(diff_result);                     printer.print(diff_result);
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                                  
+                  int additions = 0, deletions = 0;                int additions = 0, deletions = 0;
+                  for (const auto& edit : diff_result) {                for (const auto& edit : diff_result) {
+                      if (edit.type == Edit::DEL) {                    if (edit.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      } else if (edit.type == Edit::INS) {                    } else if (edit.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+                  
+                  // Skip executable files                // Skip executable files
+                  if (access(FilePaths[i].c_str(), X_OK) == 0) continue;                if (access(FilePaths[i].c_str(), X_OK) == 0) continue;
+                  
+                  // Only show files with changes                // Only show files with changes
-              
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                  if (additions == 0 && deletions == 0) continue;                if (additions == 0 && deletions == 0) continue;
+                  
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
-         } else {                 } else {
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
-         }                 }
-     }             }
-              
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
-                 std::string line;                         std::string line;
+                  std::cout << FilePaths[i] << std::endl;                std::cout << FilePaths[i] << std::endl;
+                                  
+                  // Print diffs safely                // Print diffs safely
+                  Printer printer;                Printer printer;
+                  try {                try {
+                      printer.print(diff_result);                    printer.print(diff_result);
+                  } catch (const std::exception& e) {                } catch (const std::exception& e) {
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
-                     Totaladditions++;                             Totaladditions++;
+                      std::cout << "ERROR printing diffs: " << e.what() << "\n";                    std::cout << "ERROR printing diffs: " << e.what() << "\n";
+                  }                }
-                 }                         }
-                 newFile.close();                         newFile.close();
-             }                     }
-         }                 }
+                  
-     }             }
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
+                  std::cout << "This file additions: " << additions << "\n";                std::cout << "This file additions: " << additions << "\n";
-         std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;                 std::cout<<"ERROR::COMMIT::No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
-     }             }
-     else{             else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }             }
-              
-              
-    }         }
-              
-              
+                  std::cout << "This file deletions: " << deletions << std::endl;                std::cout << "This file deletions: " << deletions << std::endl;
+              }            }
+                  
+              if (Totaladditions == 0 && Totaldeletions == 0) {            if (Totaladditions == 0 && Totaldeletions == 0) {
+                  std::cout << "No changes detected\n";                std::cout << "No changes detected\n";
+              } else {            } else {
+                  std::cout << "Total additions: " << Totaladditions << "\nTotal deletions: " << Totaldeletions << std::endl;                std::cout << "Total additions: " << Totaladditions << "\nTotal deletions: " << Totaldeletions << std::endl;
+              }            }
+                          
+          } catch (const std::exception& e) {        } catch (const std::exception& e) {
+              std::cerr << "ERROR in YeetStatus: " << e.what() << std::endl;            std::cerr << "ERROR in YeetStatus: " << e.what() << std::endl;
+          }        }
+         }    }
+              
+              
-  /**         /**
+       /**    /**
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *          *
+         *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now          * @return Nothing for now
+       * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try             try
+          try        try
-     {             {
+          {        {
-         // std::cout<<path;                 // std::cout<<path;
+              // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }                 }
+              }            }
-              
+              
-         if(path.back()=='.')                  if(path.back()=='.') 
+              if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
+              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                          
+                          
-         // std::system("tree .");                 // std::system("tree .");
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
+              
-         // Make HEAD file.                 // Make HEAD file.
+              // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                         headFile.close();
+                      headFile.close();                    headFile.close();
-             } else {                     } else {
+                  } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Description file.                 // Making Description file.
+              // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                  if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                         descFile.close();
+                      descFile.close();                    descFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }                     }
+                  }                }
-                          
+                          
-         // Making config file                 // Making config file
+              // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                         configFile.close();
+                      configFile.close();                    configFile.close();
-             }                     }
+                  }                }
-             else {                     else {
+                  else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }                     }
+                  }                }
-              
+              
-         // Making Store File                 // Making Store File
+              // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();                     StoreFile.close();
+                  StoreFile.close();                StoreFile.close();
-         }                 }
+              }            }
-         else {                 else {
+              else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Diff file.                 // Make Diff file.
+              // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();                     DiffFile.close();
+                  DiffFile.close();                DiffFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";                     BranchFile << "master";
+                  BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();                     BranchFile.close();
+                  BranchFile.close();                BranchFile.close();
-         } else {                 } else {
+              } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }                 }
+              }            }
-              
+              
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }             }
+          }        }
-     catch(const std::exception& e){             catch(const std::exception& e){
+          catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }             }
+          }        }
-                  
+                  
-    }         }
+         }    }
-              
+              
- void YeetAdd(){         void YeetAdd(){
+      void YeetAdd(){    void YeetAdd(){
-              
+              
-    }         }
+         }    }
-              
-              
+              
- // Commit Class:         // Commit Class:
+      // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**         /**
+       /**    /**
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma          * @author Akhil Sharma
+       * @author Akhil Sharma     * @author Akhil Sharma
-   */          */
+        */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore                 // This is my .gitignore
+              // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+              if(IGNORE){            if(IGNORE){
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }                  } 
+              }             } 
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;                     continue;
+                  continue;                continue;
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     }             }
+          }        }
-    }         }
+         }    }
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try             try
+          try        try
-     {             {
+          {        {
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         CommitHelper::YeetStatus(path, FilePath) ;                 CommitHelper::YeetStatus(path, FilePath) ;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // ListFiles(path,FilePath);                 // ListFiles(path,FilePath);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-             std::cout<<"path: "<<entry<<std::endl;                     std::cout<<"path: "<<entry<<std::endl;
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                         _stat = "Exe";
+                      _stat = "Exe";                    _stat = "Exe";
-             }                     }
+                  }                }
-              // content of Current FiLe.                      // content of Current FiLe.
+                   // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data                     // Blob of that Data
+                  // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob                     // Storing that Blob
+                  // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }                 }
+              }            }
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }                 }
+              }            }
-         // Save the store in /Store file                 // Save the store in /Store file
+              // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
+              
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
+              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                     std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-             std::getline(std::cin >> std::ws, message); // ws means white spaces.             std::getline(std::cin >> std::ws, message); // ws means white spaces.                std::getline(std::cin >> std::ws, message); // ws means white spaces.
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
+          }        }
+              
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
+              return;            return;
+          }        }
+              
+          bool space = false;        bool space = false;
+          std::string PathofFile, oid;        std::string PathofFile, oid;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
+          std::vector<std::string> oids;        std::vector<std::string> oids;
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
+                  PathofFile = "";                PathofFile = "";
+                  space = !space; continue;                space = !space; continue;
+              }                   }       
+              
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
+                  oids.push_back(oid);                oids.push_back(oid);
+                  oid = "";                oid = "";
+                  space = !space; continue;                space = !space; continue;
+              }                 }     
+                          
+              if(!space){            if(!space){
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
+              }            }
+              else{            else{
+                  oid += StoreData[i];                oid += StoreData[i];
+              }            }
+          }        }
+              
+          // Main Loop        // Main Loop
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
+              std::cout<<FilePaths[i]<<std::endl;            std::cout<<FilePaths[i]<<std::endl;
+              
+              int additions,deletions;            int additions,deletions;
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+              
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
+              
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
+                  std::string NewFileContent="";                std::string NewFileContent="";
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
+              
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
+                      std::string line;                    std::string line;
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
+                      }                    }
+                      NowFile.close();                    NowFile.close();
+                  }                }
+              
+                  // Call Diffs algo here                // Call Diffs algo here
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+              
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
+                  if(ans==0) {                if(ans==0) {
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
+                      continue;                    continue;
+                  }                            }            
+                                  
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+              
+                  for(auto it:diff_result){                for(auto it:diff_result){
+                                          
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
+                          deletions++;                        deletions++;
+                          Totaldeletions++;                        Totaldeletions++;
+                      }                    }
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
+                          additions++;                        additions++;
+                          Totaladditions++;                        Totaladditions++;
+                      }                    }
+                  }                }
+              
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
+                      continue;                    continue;
+                  }                }
+              
+                  // don't show file if nothing changed                // don't show file if nothing changed
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
+                      continue;                    continue;
+                  }                }
+              
+                  // The file we are checking:                // The file we are checking:
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
+                                  
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"Error in opening Store File"<<std::endl;                 std::cout<<"Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-         std::cout<<FilePaths[i]<<std::endl;                 std::cout<<FilePaths[i]<<std::endl;
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
-                     deletions++;                             deletions++;
-                     Totaldeletions++;                             Totaldeletions++;
-                 }                         }
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
-                     additions++;                             additions++;
-                     Totaladditions++;                             Totaladditions++;
-                 }                         }
-             }                     }
-              
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
-                 continue;                         continue;
-             }                     }
-              
-             // don't show file if nothing changed                     // don't show file if nothing changed
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
-                 continue;                         continue;
-             }                     }
-              
-             // The file we are checking:                     // The file we are checking:
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
-             Printer printer;                     Printer printer;
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
-             printer.print(diff_result);                     printer.print(diff_result);
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-              
+                  // Printing the diffs                // Printing the diffs
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+                  Printer printer;                Printer printer;
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+                  printer.print(diff_result);                printer.print(diff_result);
+              
-             visited[FilePaths[i]] = true;             visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-         } else {         } else {            } else {
-             deletions+=InflatedContent.size();             deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
-         }         }            }
-     }     }        }
-              
-     for(int i=0;i<visited.size();i++){     for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){         if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);             std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {             if (newFile.is_open()) {                if (newFile.is_open()) {
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(newFile, line)) {                 while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-                     Totaladditions++;                     Totaladditions++;                        Totaladditions++;
-                 }                 }                    }
-                 newFile.close();                 newFile.close();                    newFile.close();
-             }             }                }
-         }         }            }
-     }     }        }
-     if(Totaladditions == 0  && Totaldeletions == 0){     if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"No Change, Can't commit"<<std::endl;         std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;         // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-     }     }        }
-     else{     else{        else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }     }        }
-              
-              
-    }    }    }
-              
-              
-  /**  /**    /**
-  * Initializes a .yeet directory with default configs  * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *    *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.  * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now  * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma  * @author Akhil Sharma     * @author Akhil Sharma
-   */   */     */
- void YeetInit(std::string path="."){ void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try     try        try
-     {     {        {
-         // std::cout<<path;         // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work         // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work         // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();         std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;         std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";         std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){          if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";             _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;             temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }         }            }
-              
-         if(path.back()=='.')          if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";              _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))         if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                              
-         // std::system("tree .");         // std::system("tree .");            // std::system("tree .");
-              
-         std::filesystem::create_directory(_actualPath);         std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");         std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");         std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");         std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");         std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
-         // Make HEAD file.         // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");         std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {             if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                 headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                 headFile.close();                    headFile.close();
-             } else {             } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }             }                }
-              
-         // Making Description file.         // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");         std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){             if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                 descFile.close();                    descFile.close();
-             }             }                }
-             else {             else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }             }                }
-                              
-         // Making config file         // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");         std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){             if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                 // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                 configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                 configFile.close();                    configFile.close();
-             }             }                }
-             else {             else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }             }                }
-              
-         // Making Store File         // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");         std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){         if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";             StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();             StoreFile.close();                StoreFile.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }         }            }
-              
-         // Make Diff file.         // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");         std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {         if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";             DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();             DiffFile.close();                DiffFile.close();
-         } else {         } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }         }            }
-              
-         // Make Current Branch file.         // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");         std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {         if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";             BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();             BranchFile.close();                BranchFile.close();
-         } else {         } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }         }            }
-              
-         std::cout << "YEET::Initialized yeet directory\n";         std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }     }        }
-     catch(const std::exception& e){     catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';         std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }     }        }
-                  
-    }    }    }
-              
- void YeetAdd(){ void YeetAdd(){    void YeetAdd(){
-              
-    }    }    }
-              
-              
- // Commit Class: // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized. // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**  /**    /**
-  * Lists all the files in the current yeet repo.  * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma  * @author Akhil Sharma     * @author Akhil Sharma
-   */   */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore         // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
- void Commit::CommitMain(std::string path){ void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try     try        try
-     {     {        {
-         std::vector<TreeEntry> TreeEntries;         std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");         Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);         Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
-         std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";         std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         // store of the file which have any changes after the last commit         // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         std::getline(std::cin >> std::ws, message); // ws means white spaces.         std::getline(std::cin >> std::ws, message); // ws means white spaces.            std::getline(std::cin >> std::ws, message); // ws means white spaces.
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // CommitHelper::YeetStatus(path, FilePath) ;         // CommitHelper::YeetStatus(path, FilePath) ;            // CommitHelper::YeetStatus(path, FilePath) ;
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-         for (const auto & entry : FilePath){         for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";             std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                 _stat = "Exe";                    _stat = "Exe";
-             }             }                }
-              // content of Current FiLe.              // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);             std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data             // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);              Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob             // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());              DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob             // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);              TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);              TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }         }            }
-         for(auto it:DbObj.Store){         for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;             std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }         }            }
-         // Save the store in /Store file         // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);         writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
-         if (!TreeEntries.empty()) {         if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);             Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);             DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");             std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");             std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);             time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);             Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();             std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-                                          
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
+      namespace Helper{    namespace Helper{
+          std::string readFile(std::string path){        std::string readFile(std::string path){
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
+              
+              // Obtain the size of the file.            // Obtain the size of the file.
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
+              std::string result(sz, '\0');            std::string result(sz, '\0');
+              
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
+              f.read(result.data(), sz);            f.read(result.data(), sz);
+              
+              return result;            return result;
+          }        }
+              
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
+              if (headFile.is_open()) {            if (headFile.is_open()) {
+                  headFile << oid;                headFile << oid;
+                  headFile.close();                headFile.close();
+              } else {            } else {
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
+              }            }
+          }        }
+         }    }
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
+              
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
+              
+          // Getting list of all files        // Getting list of all files
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
+              
+          // Making a visited map for later        // Making a visited map for later
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
+          for(auto it:FilePath){        for(auto it:FilePath){
+              visited[it] = false;            visited[it] = false;
+          }        }
+                  
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
+              
+          std::string StoreData;        std::string StoreData;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
+              
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
+          if(Store.is_open()){        if(Store.is_open()){
+              std::string line;            std::string line;
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
+                  StoreData += line + "\n";                StoreData += line + "\n";
+              }            }
+              Store.close();            Store.close();
+          }        }
+          else{        else{
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
+          }        }
+              
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
+              return;            return;
+          }        }
+              
+          bool space = false;        bool space = false;
+          std::string PathofFile, oid;        std::string PathofFile, oid;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
+          std::vector<std::string> oids;        std::vector<std::string> oids;
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
+                  PathofFile = "";                PathofFile = "";
+                  space = !space; continue;                space = !space; continue;
+              }                   }       
+              
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
+                  oids.push_back(oid);                oids.push_back(oid);
+                  oid = "";                oid = "";
+                  space = !space; continue;                space = !space; continue;
+              }                 }     
+                          
+              if(!space){            if(!space){
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
+              }            }
+              else{            else{
+                  oid += StoreData[i];                oid += StoreData[i];
+              }            }
+          }        }
+              
+          // Main Loop        // Main Loop
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"Error in opening Store File"<<std::endl;                 std::cout<<"Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
+              
+              int additions,deletions;            int additions,deletions;
-         std::cout<<FilePaths[i]<<std::endl;                 std::cout<<FilePaths[i]<<std::endl;
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
-              
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
-         int additions,deletions;                 int additions,deletions;
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
+              
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
+                  std::string NewFileContent="";                std::string NewFileContent="";
-              
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
+              
-             std::string NewFileContent="";                     std::string NewFileContent="";
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
+                      std::string line;                    std::string line;
-              
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
-                 std::string line;                         std::string line;
+                      }                    }
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
+                      NowFile.close();                    NowFile.close();
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
+                  }                }
-                 }                         }
+              
-                 NowFile.close();                         NowFile.close();
+                  // Call Diffs algo here                // Call Diffs algo here
-             }                     }
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-              
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-             // Call Diffs algo here                     // Call Diffs algo here
+              
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
+              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+                  if(ans==0) {                if(ans==0) {
-              
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
-             if(ans==0) {                     if(ans==0) {
+                      continue;                    continue;
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
+                  }                            }            
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
+                                  
-                 continue;                         continue;
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-             }                                 }            
+              
-                                  
+                  for(auto it:diff_result){                for(auto it:diff_result){
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                                          
-              
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
-             for(auto it:diff_result){                     for(auto it:diff_result){
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
-                                          
+                          deletions++;                        deletions++;
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
+                          Totaldeletions++;                        Totaldeletions++;
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
+                      }                    }
-                     deletions++;                             deletions++;
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
-                     Totaldeletions++;                             Totaldeletions++;
+                          additions++;                        additions++;
-                 }                         }
+                          Totaladditions++;                        Totaladditions++;
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
+                      }                    }
-                     additions++;                             additions++;
+                  }                }
-                     Totaladditions++;                             Totaladditions++;
+              
-                 }                         }
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
-             }                     }
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
-              
+                      continue;                    continue;
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
+                  }                }
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+              
-                 continue;                         continue;
+                  // don't show file if nothing changed                // don't show file if nothing changed
-             }                     }
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
-              
+                      continue;                    continue;
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  }                }
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+              
-                 continue;                         continue;
+                  // The file we are checking:                // The file we are checking:
-             }                     }
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
-              
+                                  
-             // The file we are checking:                     // The file we are checking:
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
-                                  
-             // Printing the diffs                     // Printing the diffs
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-             Printer printer;                     Printer printer;
+                  // Printing the diffs                // Printing the diffs
-             printer.print(diff_result);                     printer.print(diff_result);
+                  Printer printer;                Printer printer;
-              
+                  printer.print(diff_result);                printer.print(diff_result);
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+              
-             visited[FilePaths[i]] = true;             visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-         } else {         } else {            } else {
-             deletions+=InflatedContent.size();             deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
-         }         }            }
-     }     }        }
-              
-     for(int i=0;i<visited.size();i++){     for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-         if(!visited[FilePaths[i]]){         if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
-             std::ifstream newFile(FilePaths[i]);             std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
-             if (newFile.is_open()) {             if (newFile.is_open()) {                if (newFile.is_open()) {
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(newFile, line)) {                 while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-                     Totaladditions++;                     Totaladditions++;                        Totaladditions++;
-                 }                 }                    }
-                 newFile.close();                 newFile.close();                    newFile.close();
-             }             }                }
-         }         }            }
-     }     }        }
-     if(Totaladditions == 0  && Totaldeletions == 0){     if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-         std::cout<<"No Change, Can't commit"<<std::endl;         std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
-         // TODO: Add a check so that no commit can happen;         // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-     }     }        }
-     else{     else{        else{
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-     }     }        }
-              
-              
-    }    }    }
-              
-              
-  /**  /**    /**
-  * Initializes a .yeet directory with default configs  * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-    *    *     *
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-  * @attention For now, You can only init in the directory which has already been made.  * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-  * @return Nothing for now  * @return Nothing for now     * @return Nothing for now
-  * @author Akhil Sharma  * @author Akhil Sharma     * @author Akhil Sharma
-   */   */     */
- void YeetInit(std::string path="."){ void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
-     try     try        try
-     {     {        {
-         // std::cout<<path;         // std::cout<<path;            // std::cout<<path;
-         // He can enter . --> init in pwd ------> Will Work         // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-         // He can enter full path from root --> init at that path ---------> will not work         // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-         std::string pwd = std::filesystem::current_path();         std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-         std::string temp_pwd = pwd;         std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-         std::string _actualPath=pwd+'/'+path+".yeet";         std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-         if(path.back()!='/' && path.back()!='.'){          if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-             _actualPath=pwd+'/'+path+"/.yeet";             _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-             temp_pwd=pwd+'/'+path;             temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
-         }         }            }
-              
-         if(path.back()=='.')          if(path.back()=='.')             if(path.back()=='.') 
-             _actualPath=pwd+"/.yeet";              _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-              
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))         if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
-                              
-         // std::system("tree .");         // std::system("tree .");            // std::system("tree .");
-              
-         std::filesystem::create_directory(_actualPath);         std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-         std::filesystem::create_directory(_actualPath+"/objects");         std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-         std::filesystem::create_directory(_actualPath+"/refs");         std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-         std::filesystem::create_directory(_actualPath+"/refs/heads");         std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-         std::filesystem::create_directory(_actualPath+"/refs/tags");         std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-              
-         // Make HEAD file.         // Make HEAD file.            // Make HEAD file.
-         std::ofstream headFile(_actualPath+"/HEAD");         std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-             if (headFile.is_open()) {             if (headFile.is_open()) {                if (headFile.is_open()) {
-                 headFile << "ref: refs/heads/main\n";                 headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-                 headFile.close();                 headFile.close();                    headFile.close();
-             } else {             } else {                } else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-             }             }                }
-              
-         // Making Description file.         // Making Description file.            // Making Description file.
-         std::ofstream descFile(_actualPath+"/description");         std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-             if(descFile.is_open()){             if(descFile.is_open()){                if(descFile.is_open()){
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
-                 descFile.close();                 descFile.close();                    descFile.close();
-             }             }                }
-             else {             else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-             }             }                }
-                              
-         // Making config file         // Making config file            // Making config file
-         std::ofstream configFile(_actualPath+"/config");         std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
-             if(configFile.is_open()){             if(configFile.is_open()){                if(configFile.is_open()){
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                 // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-                 configFile<<"Demo Config\n";                 configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-                 configFile.close();                 configFile.close();                    configFile.close();
-             }             }                }
-             else {             else {                else {
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
-             }             }                }
-              
-         // Making Store File         // Making Store File            // Making Store File
-         std::ofstream StoreFile(_actualPath+"/Store");         std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-         if(StoreFile.is_open()){         if(StoreFile.is_open()){            if(StoreFile.is_open()){
-             StoreFile<<"Empty Store\n";             StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-             StoreFile.close();             StoreFile.close();                StoreFile.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         }         }            }
-              
-         // Make Diff file.         // Make Diff file.            // Make Diff file.
-         std::ofstream DiffFile(_actualPath+"/Diff");         std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-         if (DiffFile.is_open()) {         if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
-             DiffFile << "No Diffs Yet\n";             DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
-             DiffFile.close();             DiffFile.close();                DiffFile.close();
-         } else {         } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }         }            }
-              
-         // Make Current Branch file.         // Make Current Branch file.            // Make Current Branch file.
-         std::ofstream BranchFile(_actualPath+"/Branch");         std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
-         if (BranchFile.is_open()) {         if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
-             BranchFile << "master";             BranchFile << "master";                BranchFile << "master";
-             BranchFile.close();             BranchFile.close();                BranchFile.close();
-         } else {         } else {            } else {
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
-         }         }            }
-              
-         std::cout << "YEET::Initialized yeet directory\n";         std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
-     }     }        }
-     catch(const std::exception& e){     catch(const std::exception& e){        catch(const std::exception& e){
-         std::cerr << e.what() << '\n';         std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-     }     }        }
-                  
-    }    }    }
-              
- void YeetAdd(){ void YeetAdd(){    void YeetAdd(){
-              
-    }    }    }
-              
-              
- // Commit Class: // Commit Class:    // Commit Class:
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized. // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-  /**  /**    /**
-  * Lists all the files in the current yeet repo.  * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-  * @author Akhil Sharma  * @author Akhil Sharma     * @author Akhil Sharma
-   */   */     */
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .gitignore         // This is my .gitignore            // This is my .gitignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
- void Commit::CommitMain(std::string path){ void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     try     try        try
-     {     {        {
-         std::vector<TreeEntry> TreeEntries;         std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-         Database DbObj(Commit::path+"/.yeet/objects");         Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-         Refs RefObj(Commit::path);         Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-              
-         std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";         std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-         // store of the file which have any changes after the last commit         // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
-         std::getline(std::cin >> std::ws, message); // ws means white spaces.         std::getline(std::cin >> std::ws, message); // ws means white spaces.            std::getline(std::cin >> std::ws, message); // ws means white spaces.
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-         // CommitHelper::YeetStatus(path, FilePath) ;         // CommitHelper::YeetStatus(path, FilePath) ;            // CommitHelper::YeetStatus(path, FilePath) ;
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-         for (const auto & entry : FilePath){         for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-             std::string _stat = "Non-Exe";             std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
-                 _stat = "Exe";                 _stat = "Exe";                    _stat = "Exe";
-             }             }                }
-              // content of Current FiLe.              // content of Current FiLe.                 // content of Current FiLe.
-             std::string data = readFile(entry);             std::string data = readFile(entry);                std::string data = readFile(entry);
-             // Blob of that Data             // Blob of that Data                // Blob of that Data
-             Blob newBlobObject(data);              Blob newBlobObject(data);                 Blob newBlobObject(data); 
-             // Storing that Blob             // Storing that Blob                // Storing that Blob
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());              DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-             // Making a TreeEntry with path of that Blob             // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);              TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-             TreeEntries.push_back(TreeEntryObj);              TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
-         }         }            }
-         for(auto it:DbObj.Store){         for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
-             std::cout<<it.first<<" "<<it.second<<std::endl;             std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-         }         }            }
-         // Save the store in /Store file         // Save the store in /Store file            // Save the store in /Store file
-         writeStoreinDB(DbObj.Store);         writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-              
-         if (!TreeEntries.empty()) {         if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-             Tree TreeObject(TreeEntries);             Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-             DbObj.storeContentInDB(TreeObject);             DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-              
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
-             std::string name = getenv("YEET_AUTHOR_NAME");             std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-             std::string email = getenv("YEET_AUTHOR_EMAIL");             std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-             time_t currtime = time(nullptr);             time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-             Author NewAuthorObj(name,email,currtime);             Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-             std::string author = NewAuthorObj.to_stringg();             std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-             // std::cin>>message; // This doesn't takes any spaces " "             // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-                                          
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);             Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
-             DbObj.storeContentInDB(MainCommitObj);             DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-             // std::cout<<"the parent value: "<<parent<<std::endl;             // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-             bool is_RootCommit = false;             bool is_RootCommit = false;                bool is_RootCommit = false;
-             if(parent=="ref:") is_RootCommit=true;             if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-         }         }            }
-     }     }        }
-     catch(const std::exception& e)     catch(const std::exception& e)        catch(const std::exception& e)
-     {     {        {
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-     }     }        }
-                  
-                  
-    }    }    }
-              
- Commit::Commit(std::string path){ Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){ Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
-     this->AuthorData=AuthorData;     this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
-     this->TreeOID=TreeOid;     this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     this->CommitMessage=CommitMessage;     this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-     this->parent=parent;     this->parent=parent;        this->parent=parent;
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-    }    }    }
-              
-              
-              
-  /**  /**    /**
-  * Helper function to get the content of a file into a string  * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it. *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
- *  @return: a `string` with the content of the file; *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-   */   */    */
- std::string Commit::readFile(fs::path path){ std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-     // Open the stream to 'lock' the file.     // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     std::ifstream f(path, std::ios::in);     std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-              
-     // Obtain the size of the file.     // Obtain the size of the file.        // Obtain the size of the file.
-     const auto sz = fs::file_size(path);     const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::string result(sz, '\0');     std::string result(sz, '\0');        std::string result(sz, '\0');
-              
-     // Read the whole file into the buffer.     // Read the whole file into the buffer.        // Read the whole file into the buffer.
-     f.read(result.data(), sz);     f.read(result.data(), sz);        f.read(result.data(), sz);
-              
-     return result;     return result;        return result;
-    }    }    }
-              
- // Blob Class // Blob Class    // Blob Class
- Blob::Blob(std::string newdata){ Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     this->data = newdata;     this->data = newdata;        this->data = newdata;
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-    }    }    }
- std::string Blob::type(){ std::string Blob::type(){    std::string Blob::type(){
-     return "blob";     return "blob";        return "blob";
-    }    }    }
-              
- // Database Class // Database Class    // Database Class
- Database::Database(std::filesystem::path path){ Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // Creating Hash // Creating Hash    // Creating Hash
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-     CryptoPP::SHA1 sha1;     CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-     std::string hash;     std::string hash;        std::string hash;
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-              
-     return hash;     return hash;        return hash;
-    }    }    }
-              
- void Database::storeContentInDB(Blob& object, const std::string& path){ void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-     std::string Data = object.data;     std::string Data = object.data;        std::string Data = object.data;
-              
-     // TODO: make proper diff here     // TODO: make proper diff here        // TODO: make proper diff here
-     // ! I am putiing only the data in the content to simplify the process of diff     // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                  
-     std::string content = Data;     std::string content = Data;        std::string content = Data;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     Store[path] = object.oid;     Store[path] = object.oid;        Store[path] = object.oid;
-                  
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Tree& object){ void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-     std::string Data = object.ReturnS_tring();     std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- void Database::storeContentInDB(Commit& object){ void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     std::string Data = object.Writtenlines;     std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     // std::cout<<"the content: "<<content<<std::endl;     // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     object.oid = calculateSHA1Hex(content);     object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob     write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }    }    }
-              
- // Tree Class // Tree Class    // Tree Class
-              
-  /**  /**    /**
-  * This function converts the vector<TreeEntry> to string  * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
-  * @return String, which will be used in storing the tree to Database.  * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-  * The entries contains all the files commit info.  * The entries contains all the files commit info.     * The entries contains all the files commit info.
-   */   */     */
- std::string Tree::ReturnS_tring(){ std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-     std::ostringstream result;     std::ostringstream result;        std::ostringstream result;
-              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-     // Using the 'result' stream to concatenate strings and numbers     // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";     // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-     // Sort entries by name     // Sort entries by name        // Sort entries by name
-              
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         return a.name < b.name;         return a.name < b.name;            return a.name < b.name;
-     });     });        });
-              
-     for (const auto& entry : entries) {     for (const auto& entry : entries) {        for (const auto& entry : entries) {
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-     }     }        }
-     // std::cout<<result.str()<<std::endl;     // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     return result.str();     return result.str();        return result.str();
-    }    }    }
-              
-              
-              
- // Helper Functions: // Helper Functions:    // Helper Functions:
- std::string timeToString(time_t currtime) {  std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-     std::stringstream ss;      std::stringstream ss;         std::stringstream ss; 
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-     return ss.str();     return ss.str();        return ss.str();
-    }    }    }
-              
-              
- std::string Directory_name_Helper(std::string Objpath){ std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     ans+=Objpath[Objpath.size()-41];     ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-     ans+=Objpath[Objpath.size()-40];     ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-     return ans;     return ans;        return ans;
-    }    }    }
-              
- std::string File_name_Helper(std::string Objpath){ std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-     std::string ans="";     std::string ans="";        std::string ans="";
-     for(int i=Objpath.size()-1;i>=0;i--){     for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-         if(Objpath[i]=='/'){         if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-             break;             break;                break;
-         }         }            }
-         ans+=Objpath[i];         ans+=Objpath[i];            ans+=Objpath[i];
-     }     }        }
-     std::string act_ans="";     std::string act_ans="";        std::string act_ans="";
-     for(int i=ans.size()-1;i>=0;i--){     for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-         act_ans+=ans[i];         act_ans+=ans[i];            act_ans+=ans[i];
-     }     }        }
-     return act_ans;     return act_ans;        return act_ans;
-    }    }    }
-              
- // std::string Compressing_using_zlib(std::string content){ // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
- //     z_stream stream; //     z_stream stream;    //     z_stream stream;
- //     stream.zalloc = nullptr; //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
- //     stream.zfree = nullptr; //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
- //     stream.opaque = nullptr; //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
- //     stream.avail_in = content.size(); // input size //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
- //     uLongf compressed_size = compressBound(content.size()); //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
- //     Bytef* compressed_data = new Bytef[compressed_size]; //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-              
- //     // intializing compression //     // intializing compression    //     // intializing compression
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual. //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-              
- //     // compress: //     // compress:    //     // compress:
- //     deflate(&stream, Z_BEST_COMPRESSION); //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-              
- //     compressed_size = stream.total_out; //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-              
- //     deflateEnd(&stream); //     deflateEnd(&stream);    //     deflateEnd(&stream);
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data); //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
- //     return compressed; //     return compressed;    //     return compressed;
- // } // }    // }
-              
- // refractored Compression Logic // refractored Compression Logic    // refractored Compression Logic
- std::string Compressing_using_zlib(std::string& content) { std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-     if (content.empty()) return "";     if (content.empty()) return "";        if (content.empty()) return "";
-              
-     z_stream stream{};     z_stream stream{};        z_stream stream{};
-     stream.zalloc = nullptr;     stream.zalloc = nullptr;        stream.zalloc = nullptr;
-     stream.zfree = nullptr;     stream.zfree = nullptr;        stream.zfree = nullptr;
-     stream.opaque = nullptr;     stream.opaque = nullptr;        stream.opaque = nullptr;
-     stream.avail_in = static_cast<uInt>(content.size());     stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-              
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-     }     }        }
-              
-     std::vector<unsigned char> compressedData(compressBound(content.size()));     std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-     stream.avail_out = compressedData.size();     stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-     stream.next_out = compressedData.data();     stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-              
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-         deflateEnd(&stream);         deflateEnd(&stream);            deflateEnd(&stream);
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }     }        }
-              
-     compressedData.resize(stream.total_out);     compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-              
-     if (deflateEnd(&stream) != Z_OK) {     if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-     }     }        }
-              
-     return std::string(compressedData.begin(), compressedData.end());     return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-    }    }    }
-              
-              
- // Author Class: // Author Class:    // Author Class:
- std::string Author::to_stringg(){ std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     std::string thecurrTime=timeToString(time);     std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     return name+" <"+email+"> "+ thecurrTime;     return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-    }    }    }
-              
-              
- // History // History    // History
- // Refs Class: // Refs Class:    // Refs Class:
- // Constructor of Ref Class // Constructor of Ref Class    // Constructor of Ref Class
- Refs::Refs(std::string path){ Refs::Refs(std::string path){    Refs::Refs(std::string path){
-     this->path = path;     this->path = path;        this->path = path;
-    }    }    }
-              
- // @return the path to the HEAD file // @return the path to the HEAD file    // @return the path to the HEAD file
- std::string Refs::HEAD_path(){ std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     return path + "/.yeet/refs/heads/" + currBranch;     return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-    }    }    }
-              
- // TODO: Updates the HEAD file to the latest commit according to the branch // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-              
- void Refs::update_HEAD(std::string oid){ void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-     // std::cout<<path<<std::endl;     // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-     std::ofstream headFile(HEAD_path());     std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     if (headFile.is_open()) {     if (headFile.is_open()) {        if (headFile.is_open()) {
-         headFile << oid;         headFile << oid;            headFile << oid;
-         headFile.close();         headFile.close();            headFile.close();
-     } else {     } else {        } else {
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
-     }     }        }
-    }    }    }
-              
- std::string Refs::Read_HEAD(){ std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-     if(headFile){     if(headFile){        if(headFile){
-         headFile>>FileContent; // All content of the file into the string         headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-     }     }        }
-     return FileContent;     return FileContent;        return FileContent;
-    }    }    }
-              
- void writeStoreinDB(std::map<std::string, std::string> Store){ void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-     for(auto it:Store){     for(auto it:Store){        for(auto it:Store){
-         std::cout<<it.first<<" "<<it.second<<std::endl;         std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-     }     }        }
-     std::cout<<"Hello"<<std::endl;     std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-     std::string _actualPath = fs::current_path();     std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-     std::cout<<_actualPath<<std::endl;     std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");     std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-     if(StoreFile.is_open()){     if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         for(auto it:Store){         for(auto it:Store){            for(auto it:Store){
-             StoreFile<<it.first<<" "<<it.second<<"\n";             StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-         }         }            }
-         StoreFile.close();         StoreFile.close();            StoreFile.close();
-     }     }        }
-              
-     else {     else {        else {
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-     }     }        }
-    }    }    }
-              
-              
- // Helper Function for Listing Files: // Helper Function for Listing Files:    // Helper Function for Listing Files:
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){ void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     for (const auto & entry : fs::directory_iterator(path)){     for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // This is my .yeetignore         // This is my .yeetignore            // This is my .yeetignore
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
-         if(IGNORE){         if(IGNORE){            if(IGNORE){
-             continue;             continue;                continue;
-         }         }            }
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             ListFiles(entry.path(),FilePath);             ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         }          }             } 
-         if(entry.is_directory()) {         if(entry.is_directory()) {            if(entry.is_directory()) {
-             continue;             continue;                continue;
-         }         }            }
-         FilePath.push_back(entry);         FilePath.push_back(entry);            FilePath.push_back(entry);
-     }     }        }
-    }    }    }
-              
- std::vector<unsigned char> readFile(const std::string& filename) { std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-     std::ifstream file(filename, std::ios::binary);     std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-     if (!file) {     if (!file) {        if (!file) {
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    }    }    }
-              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) { std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-     z_stream strm = {};     z_stream strm = {};        z_stream strm = {};
-     strm.total_in = strm.avail_in = compressedData.size();     strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-     strm.next_in = (Bytef*)compressedData.data();     strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-              
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
-     if (inflateInit(&strm) != Z_OK) {     if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-         std::cerr << "inflateInit failed" << std::endl;         std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-         return {};         return {};            return {};
-     }     }        }
-              
-     int ret;     int ret;        int ret;
-     do {     do {        do {
-         strm.avail_out = decompressedData.size() - strm.total_out;         strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-              
-         ret = inflate(&strm, Z_NO_FLUSH);         ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-              
-         switch (ret) {         switch (ret) {            switch (ret) {
-             case Z_NEED_DICT:             case Z_NEED_DICT:                case Z_NEED_DICT:
-             case Z_DATA_ERROR:             case Z_DATA_ERROR:                case Z_DATA_ERROR:
-             case Z_MEM_ERROR:             case Z_MEM_ERROR:                case Z_MEM_ERROR:
-                 std::cerr << "inflate error: " << ret << std::endl;                 std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-                 inflateEnd(&strm);                 inflateEnd(&strm);                    inflateEnd(&strm);
-                 return {};                 return {};                    return {};
-             case Z_BUF_ERROR:             case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             case Z_OK:             case Z_OK:                case Z_OK:
-                 if (strm.avail_out == 0) {                 if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                     // Output buffer is full, increase its size                     // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                     decompressedData.resize(decompressedData.size() * 2);                     decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 }                 }                    }
-                 break;                 break;                    break;
-         }         }            }
-     } while (ret != Z_STREAM_END);     } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-              
-     inflateEnd(&strm);     inflateEnd(&strm);        inflateEnd(&strm);
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size     decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-     return decompressedData;     return decompressedData;        return decompressedData;
-    }    }    }
-              
- std::string Inflate(std::string path){ std::string Inflate(std::string path){    std::string Inflate(std::string path){
-              
-     std::string inputFilename = path;      std::string inputFilename = path;         std::string inputFilename = path; 
-     std::string response = "";     std::string response = "";        std::string response = "";
-              
-     auto compressedData = readFile(inputFilename);     auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-     if (compressedData.empty()) return "Error in compressed data";     if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
-              
-     auto decompressedData = decompressData(compressedData);     auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-     if (decompressedData.empty()) return "Error in decompresssion";     if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-              
-     for(auto it:decompressedData){     for(auto it:decompressedData){        for(auto it:decompressedData){
-         response+=it;         response+=it;            response+=it;
-     }     }        }
-              
-     return response;     return response;        return response;
-    }    }    }
-              
- // Diffs Algo // Diffs Algo    // Diffs Algo
-              
- // A function to convert a string to differnt lines. like a vector of strings // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
- std::vector<std::string> splitIntoLines(const std::string& str) { std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-     std::vector<std::string> lines;     std::vector<std::string> lines;        std::vector<std::string> lines;
-     std::string temp;     std::string temp;        std::string temp;
-     for (char c : str) {     for (char c : str) {        for (char c : str) {
-         if (c == '\n') {         if (c == '\n') {            if (c == '\n') {
-             lines.push_back(temp);             lines.push_back(temp);                lines.push_back(temp);
-             temp.clear();             temp.clear();                temp.clear();
-         } else {         } else {            } else {
-             temp += c;             temp += c;                temp += c;
-         }         }            }
-     }     }        }
-     if (!temp.empty()) {     if (!temp.empty()) {        if (!temp.empty()) {
-         lines.push_back(temp);         lines.push_back(temp);            lines.push_back(temp);
-     }     }        }
-     return lines;     return lines;        return lines;
-    }    }    }
-              
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,  int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-                          std::vector<std::vector<int>>& trace) {                          std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-     int n = a.size(), m = b.size();     int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-     if (n == 0) return m;  // All insertions if `a` is empty     if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-     if (m == 0) return n;  // All deletions if `b` is empty     if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-              
-     int max_distance = n + m;     int max_distance = n + m;        int max_distance = n + m;
-     int diagonal_offset = max_distance;  // To shift diagonals into the array     int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-     trace.clear();     trace.clear();        trace.clear();
-              
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-              
-     for (int d = 0; d <= max_distance; ++d) {     for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-         for (int k = -d; k <= d; k += 2) {         for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-             int x;             int x;                int x;
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                 // Move down                 // Move down                    // Move down
-                 x = diagonals[diagonal_offset + k + 1];                 x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-             } else {             } else {                } else {
-                 // Move right                 // Move right                    // Move right
-                 x = diagonals[diagonal_offset + k - 1] + 1;                 x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }             }                }
-              
-             int y = x - k;  // Corresponding y-coordinate             int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-             while (x < n && y < m && a[x] == b[y]) {             while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-                 ++x;                 ++x;                    ++x;
-                 ++y;                 ++y;                    ++y;
-             }             }                }
-              
-             diagonals[diagonal_offset + k] = x;             diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-              
-             // If we've reached the end of both strings             // If we've reached the end of both strings                // If we've reached the end of both strings
-             if (x >= n && y >= m) {             if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                 trace.push_back(diagonals);  // Store the final state                 trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-                 return d;                 return d;                    return d;
-             }             }                }
-         }         }            }
-         trace.push_back(diagonals);  // Store the state for this edit distance         trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-     }     }        }
-              
-     return -1;  // This should never happen     return -1;  // This should never happen        return -1;  // This should never happen
-    }    }    }
-              
-              
-              
- std::vector<Edit> diff(const std::vector<std::string>& a,  std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                       const std::vector<std::string>& b,                       const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                       const std::vector<std::vector<int>>& trace,                       const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                       int d) {                       int d) {                          int d) {
-     std::vector<Edit> result;     std::vector<Edit> result;        std::vector<Edit> result;
-     if (trace.empty() || d < 0) return result;     if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                  
-     int x = a.size(), y = b.size();     int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-     int offset = x + y;     int offset = x + y;        int offset = x + y;
-                  
-     for (int i = d; i > 0; --i) {     for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-         const std::vector<int>& v = trace[i];         const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-         int k = x - y;         int k = x - y;            int k = x - y;
-                              
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-         int k_prev = down ? k + 1 : k - 1;         int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-              
-         int x_prev = v[offset + k_prev];         int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-         int y_prev = x_prev - k_prev;         int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-              
-         while (x > x_prev && y > y_prev) {         while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-             if (a[x - 1] == b[y - 1]) {             if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-             } else {             } else {                } else {
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             }             }                }
-             --x;             --x;                --x;
-             --y;             --y;                --y;
-         }         }            }
-              
-         while (x > x_prev) {         while (x > x_prev) {            while (x > x_prev) {
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-             --x;             --x;                --x;
-         }         }            }
-              
-         while (y > y_prev) {         while (y > y_prev) {            while (y > y_prev) {
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));             result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-             --y;             --y;                --y;
-         }         }            }
-     }     }        }
-              
-     while (x > 0) {     while (x > 0) {        while (x > 0) {
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));         result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-         --x;         --x;            --x;
-     }     }        }
-              
-     while (y > 0) {     while (y > 0) {        while (y > 0) {
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));         result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-         --y;         --y;            --y;
-     }     }        }
-              
-     std::reverse(result.begin(), result.end());     std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-              
-     // for (const auto& edit : result) {     // for (const auto& edit : result) {        // for (const auto& edit : result) {
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :      //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-     //             << ", Orig: " << edit.old_line     //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
-     //             << ", Updated: " << edit.new_line     //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
-     //             << std::endl;     //             << std::endl;        //             << std::endl;
-     // }     // }        // }
-              
-     return result;     return result;        return result;
-    }    }    }
-              
-              
- // Storing diffs in file // Storing diffs in file    // Storing diffs in file
- void storeDiff(const std::vector<Edit>& edits) { void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);     std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
-     if (diff_file.is_open()) {     if (diff_file.is_open()) {        if (diff_file.is_open()) {
-         for (const auto& edit : edits) {         for (const auto& edit : edits) {            for (const auto& edit : edits) {
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
-         }         }            }
-         diff_file.close();         diff_file.close();            diff_file.close();
-     } else {     } else {        } else {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
-     }     }        }
-    }    }    }
-              
- namespace Branch{ namespace Branch{    namespace Branch{
-     void createBranch(std::string BranchName, fs::path currPath){     void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
-         // check if the names is valid:         // check if the names is valid:            // check if the names is valid:
-         if(BranchName.empty()) return;         if(BranchName.empty()) return;            if(BranchName.empty()) return;
-                              
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
-              
-         if(std::regex_match(BranchName, reg)){         if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
-             // invalid name of the branch             // invalid name of the branch                // invalid name of the branch
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-              
-         // TODO: store the current commit in the new file         // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.         // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig         // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
-                              
-              
-         // updating the head file with the latest commit.         // updating the head file with the latest commit.            // updating the head file with the latest commit.
-         // putting content of the master into the new branch file.         // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
-              
-         // creating the new bracnh file:         // creating the new bracnh file:            // creating the new bracnh file:
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
-              
-         // TODO: add option to choose the base branch         // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
-         // ! Currently making the prev branch as base branch.         // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
-                              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
-         // making the file for the new Branch and storing the prevBranch ID into it.         // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
-                              
-         // TODO: Test this function         // TODO: Test this function            // TODO: Test this function
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
-              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
-         if(f.is_open()){         if(f.is_open()){            if(f.is_open()){
-             f<<CommitID_ofPrevBranch;             f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
-             f.close();             f.close();                f.close();
-         }         }            }
-         else {         else {            else {
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
-         }                }                   }       
-              
-     }     }        }
-     void SeeBranches(std::filesystem::path path){     void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
-                              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
-         int count = 1;         int count = 1;            int count = 1;
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
-             std::cout << count <<" ";             std::cout << count <<" ";                std::cout << count <<" ";
-             std::cout << it.path().filename().string() << " ";             std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
-             std::fstream ff(it.path());             std::fstream ff(it.path());                std::fstream ff(it.path());
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 std::string line;                 std::string line;                    std::string line;
-                 while (std::getline(ff, line)) {                 while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
-                     std::cout << line << std::endl;                     std::cout << line << std::endl;                        std::cout << line << std::endl;
-                 }                 }                    }
-                 ff.close();                 ff.close();                    ff.close();
-             }             }                }
-             count++;             count++;                count++;
-         }         }            }
-              
-     }     }        }
-              
-     void currBranch(std::filesystem::path currPath){     void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
-         std::fstream ff(currPath.string() + "/.yeet/Branch");         std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
-         std::stringstream ss;         std::stringstream ss;            std::stringstream ss;
-         if(ff.is_open()){         if(ff.is_open()){            if(ff.is_open()){
-             ss << ff.rdbuf();             ss << ff.rdbuf();                ss << ff.rdbuf();
-             ff.close();             ff.close();                ff.close();
-         }         }            }
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
-     }     }        }
-    }    }    }
-              
-              
- namespace CheckOut{ namespace CheckOut{    namespace CheckOut{
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
-              
-         if(fs::exists(actPath)){         if(fs::exists(actPath)){            if(fs::exists(actPath)){
-             std::fstream ff(path.string() + "/.yeet/Branch");             std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
-             std::stringstream ss;             std::stringstream ss;                std::stringstream ss;
-             if(ff.is_open()){             if(ff.is_open()){                if(ff.is_open()){
-                 ss << ff.rdbuf();                 ss << ff.rdbuf();                    ss << ff.rdbuf();
-                 std::cout<<ss.str()<<std::endl;                 std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
-                 if(ss.str() == swtichToBranchName){                 if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
-                     return;                     return;                        return;
-                 }                 }                    }
-                 ff << swtichToBranchName;                  ff << swtichToBranchName;                     ff << swtichToBranchName; 
-                 ff.close();                 ff.close();                    ff.close();
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
-             }             }                }
-              
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
-             return;             return;                return;
-         }         }            }
-     }     }        }
-    }    }    }
-              
- namespace CommitHelper{ namespace CommitHelper{    namespace CommitHelper{
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-              
-         std::vector<std::filesystem::path>FilePath;         std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                  
-         // Getting list of all files         // Getting list of all files            // Getting list of all files
-         ListFiles(path,FilePath);         ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                  
-         // Making a visited map for later         // Making a visited map for later            // Making a visited map for later
-         std::unordered_map<std::filesystem::path, bool> visited;         std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-         for(auto it:FilePath){         for(auto it:FilePath){            for(auto it:FilePath){
-             visited[it] = false;             visited[it] = false;                visited[it] = false;
-         }         }            }
-                              
-         int Totaladditions,Totaldeletions;         int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-         Totaladditions = 0, Totaldeletions = 0;         Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-                  
-         std::string StoreData;         std::string StoreData;            std::string StoreData;
-         std::fstream Store(path+"/.yeet/Store");         std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-                  
-         // Putting content of the Store file in the string StoreData         // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-         if(Store.is_open()){         if(Store.is_open()){            if(Store.is_open()){
-             std::string line;             std::string line;                std::string line;
-             while (std::getline(Store, line)) {             while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-                 StoreData += line + "\n";                 StoreData += line + "\n";                    StoreData += line + "\n";
-             }             }                }
-             Store.close();             Store.close();                Store.close();
-         }         }            }
-         else{         else{            else{
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-         }         }            }
-                  
-         if(StoreData == "Empty Store"){         if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-             return ;             return ;                return ;
-         }         }            }
-                  
-         bool space = false;         bool space = false;            bool space = false;
-         std::string PathofFile, oid;         std::string PathofFile, oid;            std::string PathofFile, oid;
-         PathofFile = ""; oid = "";         PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-         std::vector<std::string> FilePaths;         std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-         std::vector<std::string> oids;         std::vector<std::string> oids;            std::vector<std::string> oids;
-         for(int i=0;i<StoreData.size();i++){          for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-             if(StoreData[i] == ' '){             if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 FilePaths.push_back(PathofFile);                 FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-                 PathofFile = "";                 PathofFile = "";                    PathofFile = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                    }                       }       
-                  
-             if(StoreData[i] == '\n'){             if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-                 oids.push_back(oid);                 oids.push_back(oid);                    oids.push_back(oid);
-                 oid = "";                 oid = "";                    oid = "";
-                 space = !space; continue;                 space = !space; continue;                    space = !space; continue;
-             }                  }                     }     
-                                          
-             if(!space){             if(!space){                if(!space){
-                 PathofFile += StoreData[i];                 PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-             }             }                }
-             else{             else{                else{
-                 oid += StoreData[i];                 oid += StoreData[i];                    oid += StoreData[i];
-             }             }                }
-         }         }            }
-                  
-         // Main Loop         // Main Loop            // Main Loop
-         for(int i=0;i<oids.size();i++){         for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-                  
-             int additions,deletions;             int additions,deletions;                int additions,deletions;
-             additions = 0, deletions = 0;             additions = 0, deletions = 0;                additions = 0, deletions = 0;
-             std::string thePathOfOid = "";             std::string thePathOfOid = "";                std::string thePathOfOid = "";
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);              std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-                  
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-                  
-             std::string InflatedContent = Inflate(FullPath);             std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-                  
-             if (std::filesystem::exists(FilePaths[i])) {             if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-                 std::string NewFileContent="";                 std::string NewFileContent="";                    std::string NewFileContent="";
-                 std::ifstream NowFile(FilePaths[i]);                 std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-                  
-                 if(NowFile.is_open()){                 if(NowFile.is_open()){                    if(NowFile.is_open()){
-                     std::string line;                     std::string line;                        std::string line;
-                     while(std::getline(NowFile,line)){                     while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-                         NewFileContent+=line+"\n";                         NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-                     }                     }                        }
-                     NowFile.close();                     NowFile.close();                        NowFile.close();
-                 }                 }                    }
-                  
-                 // Call Diffs algo here                 // Call Diffs algo here                    // Call Diffs algo here
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-                  
-                 std::vector<std::vector<int>> trace;                 std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
-                 // std::cout<<ans<<std::endl;                 // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-                 if(ans==0) {                 if(ans==0) {                    if(ans==0) {
-                     // TODO: Don't add in commit                     // TODO: Don't add in commit                        // TODO: Don't add in commit
-                     // std::cout<<"Files are identical."<<std::endl;                     // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-                     continue;                     continue;                        continue;
-                 }                             }                                }            
-                                                      
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                  
-                 for(auto it:diff_result){                 for(auto it:diff_result){                    for(auto it:diff_result){
-                                                                  
-                     // TODO: Add number of lines.                     // TODO: Add number of lines.                        // TODO: Add number of lines.
-                     if(it.type == Edit::DEL) {                     if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-                         deletions++;                         deletions++;                            deletions++;
-                         Totaldeletions++;                         Totaldeletions++;                            Totaldeletions++;
-                     }                     }                        }
-                     else if(it.type == Edit::INS) {                     else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                         additions++;                         additions++;                            additions++;
-                         Totaladditions++;                         Totaladditions++;                            Totaladditions++;
-                     }                     }                        }
-                 }                 }                    }
-                  
-                 // Don't print exec file diffs.                 // Don't print exec file diffs.                    // Don't print exec file diffs.
-                  
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 if(! access (FilePaths[i].c_str(), X_OK)){                 if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 // don't show file if nothing changed                 // don't show file if nothing changed                    // don't show file if nothing changed
-                 if(additions == 0 && deletions == 0){                 if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-                     continue;                     continue;                        continue;
-                 }                 }                    }
-                  
-                 FilesWithChanges.push_back(FilePaths[i]);                 FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-             }             }                }
-         }         }            }
-     }     }        }
-              
-    }    }    }
+      #include"controllers.hpp"    #include"controllers.hpp"
+      #include<bits/stdc++.h>    #include<bits/stdc++.h>
+      #include<filesystem>    #include<filesystem>
+      #include <cryptopp/sha.h>    #include <cryptopp/sha.h>
+      #include <cryptopp/filters.h>    #include <cryptopp/filters.h>
+      #include <cryptopp/hex.h>    #include <cryptopp/hex.h>
+              
+      #define fs std::filesystem    #define fs std::filesystem
+              
- #include"controllers.hpp"         #include"controllers.hpp"
- #include<bits/stdc++.h>         #include<bits/stdc++.h>
- #include<filesystem>         #include<filesystem>
- #include <cryptopp/sha.h>         #include <cryptopp/sha.h>
- #include <cryptopp/filters.h>         #include <cryptopp/filters.h>
- #include <cryptopp/hex.h>         #include <cryptopp/hex.h>
-              
- #define fs std::filesystem         #define fs std::filesystem
-              
- namespace Helper{         namespace Helper{
-     std::string readFile(std::string path){             std::string readFile(std::string path){
-         // Open the stream to 'lock' the file.                 // Open the stream to 'lock' the file.
-         std::ifstream f(path, std::ios::in);                 std::ifstream f(path, std::ios::in);
-              
-         // Obtain the size of the file.                 // Obtain the size of the file.
-         const auto sz = fs::file_size(path);                 const auto sz = fs::file_size(path);
-         std::string result(sz, '\0');                 std::string result(sz, '\0');
-              
-         // Read the whole file into the buffer.                 // Read the whole file into the buffer.
-         f.read(result.data(), sz);                 f.read(result.data(), sz);
-              
-         return result;                 return result;
-     }             }
-              
-     // For the branch namespace to store the commit id to the new branch file.             // For the branch namespace to store the commit id to the new branch file.
-     void update_HEAD(std::string oid, std::string NewBranchPath){             void update_HEAD(std::string oid, std::string NewBranchPath){
-         // std::cout<<path<<std::endl;                 // std::cout<<path<<std::endl;
-         std::ofstream headFile(NewBranchPath);                 std::ofstream headFile(NewBranchPath);
-         if (headFile.is_open()) {                 if (headFile.is_open()) {
-             headFile << oid;                     headFile << oid;
-             headFile.close();                     headFile.close();
-         } else {                 } else {
-             throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                     throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-         }                 }
-     }             }
-    }         }
-              
-              
- void YeetStatus(std::string path){         void YeetStatus(std::string path){
-              
-     std::vector<std::filesystem::path>FilePath;             std::vector<std::filesystem::path>FilePath;
-              
-     // Getting list of all files             // Getting list of all files
-     ListFiles(path,FilePath);             ListFiles(path,FilePath);
-              
-     // Making a visited map for later             // Making a visited map for later
-     std::unordered_map<std::filesystem::path, bool> visited;             std::unordered_map<std::filesystem::path, bool> visited;
-     for(auto it:FilePath){             for(auto it:FilePath){
-         visited[it] = false;                 visited[it] = false;
-     }             }
-                  
-     int Totaladditions,Totaldeletions;             int Totaladditions,Totaldeletions;
-     Totaladditions = 0, Totaldeletions = 0;             Totaladditions = 0, Totaldeletions = 0;
-              
-     std::string StoreData;             std::string StoreData;
-     std::fstream Store(path+"/.yeet/Store");             std::fstream Store(path+"/.yeet/Store");
-              
-     // Putting content of the Store file in the string StoreData             // Putting content of the Store file in the string StoreData
-     if(Store.is_open()){             if(Store.is_open()){
-         std::string line;                 std::string line;
-         while (std::getline(Store, line)) {                 while (std::getline(Store, line)) {
-             StoreData += line + "\n";                     StoreData += line + "\n";
-         }                 }
-         Store.close();                 Store.close();
-     }             }
-     else{             else{
-         std::cout<<"Error in opening Store File"<<std::endl;                 std::cout<<"Error in opening Store File"<<std::endl;
-     }             }
-              
-     if(StoreData == "Empty Store"){             if(StoreData == "Empty Store"){
-         std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;                 std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         return;                 return;
-     }             }
-              
-     bool space = false;             bool space = false;
-     std::string PathofFile, oid;             std::string PathofFile, oid;
-     PathofFile = ""; oid = "";             PathofFile = ""; oid = "";
-     std::vector<std::string> FilePaths;             std::vector<std::string> FilePaths;
-     std::vector<std::string> oids;             std::vector<std::string> oids;
-     for(int i=0;i<StoreData.size();i++){              for(int i=0;i<StoreData.size();i++){ 
-         if(StoreData[i] == ' '){                 if(StoreData[i] == ' '){
-             FilePaths.push_back(PathofFile);                     FilePaths.push_back(PathofFile);
-             PathofFile = "";                     PathofFile = "";
-             space = !space; continue;                     space = !space; continue;
-         }                        }       
-              
-         if(StoreData[i] == '\n'){                 if(StoreData[i] == '\n'){
-             oids.push_back(oid);                     oids.push_back(oid);
-             oid = "";                     oid = "";
-             space = !space; continue;                     space = !space; continue;
-         }                      }     
-                          
-         if(!space){                 if(!space){
-             PathofFile += StoreData[i];                     PathofFile += StoreData[i];
-         }                 }
-         else{                 else{
-             oid += StoreData[i];                     oid += StoreData[i];
-         }                 }
-     }             }
-              
-     // Main Loop             // Main Loop
-     for(int i=0;i<oids.size();i++){             for(int i=0;i<oids.size();i++){
-         std::cout<<FilePaths[i]<<std::endl;                 std::cout<<FilePaths[i]<<std::endl;
-              
-         int additions,deletions;                 int additions,deletions;
-         additions = 0, deletions = 0;                 additions = 0, deletions = 0;
-         std::string thePathOfOid = "";                 std::string thePathOfOid = "";
-         std::string fileName = oids[i].substr(2, oids[i].size() - 2);                  std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-         thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                 thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-              
-         std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                 std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-              
-         std::string InflatedContent = Inflate(FullPath);                 std::string InflatedContent = Inflate(FullPath);
-              
-         if (std::filesystem::exists(FilePaths[i])) {                 if (std::filesystem::exists(FilePaths[i])) {
-             std::string NewFileContent="";                     std::string NewFileContent="";
-             std::ifstream NowFile(FilePaths[i]);                     std::ifstream NowFile(FilePaths[i]);
-              
-             if(NowFile.is_open()){                     if(NowFile.is_open()){
-                 std::string line;                         std::string line;
-                 while(std::getline(NowFile,line)){                         while(std::getline(NowFile,line)){
-                     NewFileContent+=line+"\n";                             NewFileContent+=line+"\n";
-                 }                         }
-                 NowFile.close();                         NowFile.close();
-             }                     }
-              
-             // Call Diffs algo here                     // Call Diffs algo here
-             std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                     std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-             std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                     std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
-             std::vector<std::vector<int>> trace;                     std::vector<std::vector<int>> trace;
-             int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-              
-             // std::cout<<ans<<std::endl;                     // std::cout<<ans<<std::endl;
-             if(ans==0) {                     if(ans==0) {
-                 // TODO: Don't add in commit                         // TODO: Don't add in commit
-                 // std::cout<<"Files are identical."<<std::endl;                         // std::cout<<"Files are identical."<<std::endl;
-                 continue;                         continue;
-             }                                 }            
-                                  
-             std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                     std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-              
-             for(auto it:diff_result){                     for(auto it:diff_result){
-                                          
-                 // TODO: Add number of lines.                         // TODO: Add number of lines.
+      namespace CommitHelper{    namespace CommitHelper{
-                 if(it.type == Edit::DEL) {                         if(it.type == Edit::DEL) {
+          void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){        void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
-                     deletions++;                             deletions++;
+              
-                     Totaldeletions++;                             Totaldeletions++;
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-                 }                         }
+                  
-                 else if(it.type == Edit::INS) {                         else if(it.type == Edit::INS) {
+              // Getting list of all files            // Getting list of all files
-                     additions++;                             additions++;
+              ListFiles(path,FilePath);            ListFiles(path,FilePath);
-                     Totaladditions++;                             Totaladditions++;
+                  
-                 }                         }
+              // Making a visited map for later            // Making a visited map for later
-             }                     }
+              std::unordered_map<std::filesystem::path, bool> visited;            std::unordered_map<std::filesystem::path, bool> visited;
-              
+              for(auto it:FilePath){            for(auto it:FilePath){
-             // Don't print exec file diffs.                     // Don't print exec file diffs.
+                  visited[it] = false;                visited[it] = false;
-             if(! access (FilePaths[i].c_str(), X_OK)){                     if(! access (FilePaths[i].c_str(), X_OK)){
+              }            }
-                 continue;                         continue;
+                          
-             }                     }
+              int Totaladditions,Totaldeletions;            int Totaladditions,Totaldeletions;
-              
+              Totaladditions = 0, Totaldeletions = 0;            Totaladditions = 0, Totaldeletions = 0;
-             // don't show file if nothing changed                     // don't show file if nothing changed
+                  
-             if(additions == 0 && deletions == 0){                     if(additions == 0 && deletions == 0){
+              std::string StoreData;            std::string StoreData;
-                 continue;                         continue;
+              std::fstream Store(path+"/.yeet/Store");            std::fstream Store(path+"/.yeet/Store");
-             }                     }
+                  
-              
+              // Putting content of the Store file in the string StoreData            // Putting content of the Store file in the string StoreData
-             // The file we are checking:                     // The file we are checking:
+              if(Store.is_open()){            if(Store.is_open()){
-             std::cout<<FilePaths[i]<<std::endl;                     std::cout<<FilePaths[i]<<std::endl;
+                  std::string line;                std::string line;
-                                  
+                  while (std::getline(Store, line)) {                while (std::getline(Store, line)) {
-             // Printing the diffs                     // Printing the diffs
+                      StoreData += line + "\n";                    StoreData += line + "\n";
-             Printer printer;                     Printer printer;
+                  }                }
-             printer.print(diff_result);                     printer.print(diff_result);
+                  Store.close();                Store.close();
-              
+              }            }
-             std::cout<<"This file additions: "<<additions<<"\n";                     std::cout<<"This file additions: "<<additions<<"\n";
+              else{            else{
-             std::cout<<"This file deletions: "<<deletions<<std::endl;                     std::cout<<"This file deletions: "<<deletions<<std::endl;
+                  std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
-             visited[FilePaths[i]] = true;                     visited[FilePaths[i]] = true;
+              }            }
-         } else {                 } else {
+                  
-             deletions+=InflatedContent.size();                     deletions+=InflatedContent.size();
+              if(StoreData == "Empty Store"){            if(StoreData == "Empty Store"){
-         }                 }
+                  std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
-     }             }
+                  return ;                return ;
-              
+              }            }
-     for(int i=0;i<visited.size();i++){             for(int i=0;i<visited.size();i++){
+                  
-         if(!visited[FilePaths[i]]){                 if(!visited[FilePaths[i]]){
+              bool space = false;            bool space = false;
-             std::ifstream newFile(FilePaths[i]);                     std::ifstream newFile(FilePaths[i]);
+              std::string PathofFile, oid;            std::string PathofFile, oid;
-             if (newFile.is_open()) {                     if (newFile.is_open()) {
+              PathofFile = ""; oid = "";            PathofFile = ""; oid = "";
-                 std::string line;                         std::string line;
+              std::vector<std::string> FilePaths;            std::vector<std::string> FilePaths;
-                 while (std::getline(newFile, line)) {                         while (std::getline(newFile, line)) {
+              std::vector<std::string> oids;            std::vector<std::string> oids;
-                     Totaladditions++;                             Totaladditions++;
+              for(int i=0;i<StoreData.size();i++){             for(int i=0;i<StoreData.size();i++){ 
-                 }                         }
+                  if(StoreData[i] == ' '){                if(StoreData[i] == ' '){
-                 newFile.close();                         newFile.close();
+                      FilePaths.push_back(PathofFile);                    FilePaths.push_back(PathofFile);
-             }                     }
+                      PathofFile = "";                    PathofFile = "";
-         }                 }
+                      space = !space; continue;                    space = !space; continue;
-     }             }
+                  }                       }       
-     if(Totaladditions == 0  && Totaldeletions == 0){             if(Totaladditions == 0  && Totaldeletions == 0){
+                  
-         std::cout<<"No Change, Can't commit"<<std::endl;                 std::cout<<"No Change, Can't commit"<<std::endl;
+                  if(StoreData[i] == '\n'){                if(StoreData[i] == '\n'){
-         // TODO: Add a check so that no commit can happen;                 // TODO: Add a check so that no commit can happen;
+                      oids.push_back(oid);                    oids.push_back(oid);
-     }             }
+                      oid = "";                    oid = "";
-     else{             else{
+                      space = !space; continue;                    space = !space; continue;
-         std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;                 std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
+                  }                     }     
-     }             }
+                                  
-              
+                  if(!space){                if(!space){
-              
+                      PathofFile += StoreData[i];                    PathofFile += StoreData[i];
-    }         }
+                  }                }
-              
+                  else{                else{
-              
+                      oid += StoreData[i];                    oid += StoreData[i];
-  /**         /**
+                  }                }
-  * Initializes a .yeet directory with default configs          * Initializes a .yeet directory with default configs
+              }            }
-    *          *
+                  
-  * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`          * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
+              // Main Loop            // Main Loop
-  * @attention For now, You can only init in the directory which has already been made.          * @attention For now, You can only init in the directory which has already been made.
+              for(int i=0;i<oids.size();i++){            for(int i=0;i<oids.size();i++){
-  * @return Nothing for now          * @return Nothing for now
+                  
-  * @author Akhil Sharma          * @author Akhil Sharma
+                  int additions,deletions;                int additions,deletions;
-   */          */
+                  additions = 0, deletions = 0;                additions = 0, deletions = 0;
- void YeetInit(std::string path="."){         void YeetInit(std::string path="."){
+                  std::string thePathOfOid = "";                std::string thePathOfOid = "";
-     try             try
+                  std::string fileName = oids[i].substr(2, oids[i].size() - 2);                 std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-     {             {
+                  thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-         // std::cout<<path;                 // std::cout<<path;
+                  
-         // He can enter . --> init in pwd ------> Will Work                 // He can enter . --> init in pwd ------> Will Work
+                  std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-         // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first                 // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
+                  
-         // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above                 // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
+                  std::string InflatedContent = Inflate(FullPath);                std::string InflatedContent = Inflate(FullPath);
-         // He can enter full path from root --> init at that path ---------> will not work                 // He can enter full path from root --> init at that path ---------> will not work
+                  
-         std::string pwd = std::filesystem::current_path();                 std::string pwd = std::filesystem::current_path();
+                  if (std::filesystem::exists(FilePaths[i])) {                if (std::filesystem::exists(FilePaths[i])) {
-         std::string temp_pwd = pwd;                 std::string temp_pwd = pwd;
+                      std::string NewFileContent="";                    std::string NewFileContent="";
-         std::string _actualPath=pwd+'/'+path+".yeet";                 std::string _actualPath=pwd+'/'+path+".yeet";
+                      std::ifstream NowFile(FilePaths[i]);                    std::ifstream NowFile(FilePaths[i]);
-         if(path.back()!='/' && path.back()!='.'){                  if(path.back()!='/' && path.back()!='.'){ 
+                  
-             _actualPath=pwd+'/'+path+"/.yeet";                     _actualPath=pwd+'/'+path+"/.yeet";
+                      if(NowFile.is_open()){                    if(NowFile.is_open()){
-             temp_pwd=pwd+'/'+path;                     temp_pwd=pwd+'/'+path;
+                          std::string line;                        std::string line;
-         }                 }
+                          while(std::getline(NowFile,line)){                        while(std::getline(NowFile,line)){
-              
+                              NewFileContent+=line+"\n";                            NewFileContent+=line+"\n";
-         if(path.back()=='.')                  if(path.back()=='.') 
+                          }                        }
-             _actualPath=pwd+"/.yeet";                      _actualPath=pwd+"/.yeet"; 
+                          NowFile.close();                        NowFile.close();
-              
+                      }                    }
-         if(std::filesystem::exists(temp_pwd+"/.yeet"))                 if(std::filesystem::exists(temp_pwd+"/.yeet"))
+                  
-             throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                     throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
+                      // Call Diffs algo here                    // Call Diffs algo here
-                          
+                      std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                    std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-         // std::system("tree .");                 // std::system("tree .");
+                      std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                    std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-              
+                  
-         std::filesystem::create_directory(_actualPath);                 std::filesystem::create_directory(_actualPath);
+                      std::vector<std::vector<int>> trace;                    std::vector<std::vector<int>> trace;
-         std::filesystem::create_directory(_actualPath+"/objects");                 std::filesystem::create_directory(_actualPath+"/objects");
+                      int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                     int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+                  
-         std::filesystem::create_directory(_actualPath+"/refs");                 std::filesystem::create_directory(_actualPath+"/refs");
+                      // std::cout<<ans<<std::endl;                    // std::cout<<ans<<std::endl;
-         std::filesystem::create_directory(_actualPath+"/refs/heads");                 std::filesystem::create_directory(_actualPath+"/refs/heads");
+                      if(ans==0) {                    if(ans==0) {
-         std::filesystem::create_directory(_actualPath+"/refs/tags");                 std::filesystem::create_directory(_actualPath+"/refs/tags");
+                          // TODO: Don't add in commit                        // TODO: Don't add in commit
-              
+                          // std::cout<<"Files are identical."<<std::endl;                        // std::cout<<"Files are identical."<<std::endl;
-         // Make HEAD file.                 // Make HEAD file.
+                          continue;                        continue;
-         std::ofstream headFile(_actualPath+"/HEAD");                 std::ofstream headFile(_actualPath+"/HEAD");
+                      }                                }            
-             if (headFile.is_open()) {                     if (headFile.is_open()) {
+                                          
-                 headFile << "ref: refs/heads/main\n";                         headFile << "ref: refs/heads/main\n";
+                      std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                    std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-                 headFile.close();                         headFile.close();
+                  
-             } else {                     } else {
+                      for(auto it:diff_result){                    for(auto it:diff_result){
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
+                                                  
-             }                     }
+                          // TODO: Add number of lines.                        // TODO: Add number of lines.
-              
+                          if(it.type == Edit::DEL) {                        if(it.type == Edit::DEL) {
-         // Making Description file.                 // Making Description file.
+                              deletions++;                            deletions++;
-         std::ofstream descFile(_actualPath+"/description");                 std::ofstream descFile(_actualPath+"/description");
+                              Totaldeletions++;                            Totaldeletions++;
-             if(descFile.is_open()){                     if(descFile.is_open()){
+                          }                        }
-                 descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                         descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
+                          else if(it.type == Edit::INS) {                        else if(it.type == Edit::INS) {
-                 descFile.close();                         descFile.close();
+                              additions++;                            additions++;
-             }                     }
+                              Totaladditions++;                            Totaladditions++;
-             else {                     else {
+                          }                        }
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
+                      }                    }
-             }                     }
+                  
-                          
+                      // Don't print exec file diffs.                    // Don't print exec file diffs.
-         // Making config file                 // Making config file
+                  
-         std::ofstream configFile(_actualPath+"/config");                 std::ofstream configFile(_actualPath+"/config");
+                      // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                    // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
-             if(configFile.is_open()){                     if(configFile.is_open()){
+                      // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                    // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
-                 // TODO: Find a configparser for C++. and replace the content of this configFile.                         // TODO: Find a configparser for C++. and replace the content of this configFile.
+                      if(! access (FilePaths[i].c_str(), X_OK)){                    if(! access (FilePaths[i].c_str(), X_OK)){
-                 configFile<<"Demo Config\n";                         configFile<<"Demo Config\n";
+                          continue;                        continue;
-                 configFile.close();                         configFile.close();
+                      }                    }
-             }                     }
+                  
-             else {                     else {
+                      // don't show file if nothing changed                    // don't show file if nothing changed
-                 throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                         throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
+                      if(additions == 0 && deletions == 0){                    if(additions == 0 && deletions == 0){
-             }                     }
+                          continue;                        continue;
-              
+                      }                    }
-         // Making Store File                 // Making Store File
+                  
-         std::ofstream StoreFile(_actualPath+"/Store");                 std::ofstream StoreFile(_actualPath+"/Store");
+                      FilesWithChanges.push_back(FilePaths[i]);                    FilesWithChanges.push_back(FilePaths[i]);
-         if(StoreFile.is_open()){                 if(StoreFile.is_open()){
+                  }                }
-             StoreFile<<"Empty Store\n";                     StoreFile<<"Empty Store\n";
+              }            }
-             StoreFile.close();                     StoreFile.close();
+          }        }
-         }                 }
+              
-         else {                 else {
+         }    }
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
+      namespace Helper{    namespace Helper{
-         }                 }
+          std::string readFile(std::string path){        std::string readFile(std::string path){
-              
+              // Open the stream to 'lock' the file.            // Open the stream to 'lock' the file.
-         // Make Diff file.                 // Make Diff file.
+              std::ifstream f(path, std::ios::in);            std::ifstream f(path, std::ios::in);
-         std::ofstream DiffFile(_actualPath+"/Diff");                 std::ofstream DiffFile(_actualPath+"/Diff");
+              
-         if (DiffFile.is_open()) {                 if (DiffFile.is_open()) {
+              // Obtain the size of the file.            // Obtain the size of the file.
-             DiffFile << "No Diffs Yet\n";                     DiffFile << "No Diffs Yet\n";
+              const auto sz = fs::file_size(path);            const auto sz = fs::file_size(path);
-             DiffFile.close();                     DiffFile.close();
+              std::string result(sz, '\0');            std::string result(sz, '\0');
-         } else {                 } else {
+              
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+              // Read the whole file into the buffer.            // Read the whole file into the buffer.
-         }                 }
+              f.read(result.data(), sz);            f.read(result.data(), sz);
-              
+              
-         // Make Current Branch file.                 // Make Current Branch file.
+              return result;            return result;
-         std::ofstream BranchFile(_actualPath+"/Branch");                 std::ofstream BranchFile(_actualPath+"/Branch");
+          }        }
-         if (BranchFile.is_open()) {                 if (BranchFile.is_open()) {
+              
-             BranchFile << "master";                     BranchFile << "master";
+          // For the branch namespace to store the commit id to the new branch file.        // For the branch namespace to store the commit id to the new branch file.
-             BranchFile.close();                     BranchFile.close();
+          void update_HEAD(std::string oid, std::string NewBranchPath){        void update_HEAD(std::string oid, std::string NewBranchPath){
-         } else {                 } else {
+              // std::cout<<path<<std::endl;            // std::cout<<path<<std::endl;
-             throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                     throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
+              std::ofstream headFile(NewBranchPath);            std::ofstream headFile(NewBranchPath);
-         }                 }
+              if (headFile.is_open()) {            if (headFile.is_open()) {
-              
+                  headFile << oid;                headFile << oid;
-         std::cout << "YEET::Initialized yeet directory\n";                 std::cout << "YEET::Initialized yeet directory\n";
+                  headFile.close();                headFile.close();
-     }             }
+              } else {            } else {
-     catch(const std::exception& e){             catch(const std::exception& e){
-         std::cerr << e.what() << '\n';                 std::cerr << e.what() << '\n';
-     }             }
+                  throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");                throw std::runtime_error("ERROR::UPDATE::Failed to open .yeet/refs/heads/ file.\n");
-                  
+              }            }
-    }         }
+          }        }
-              
+         }    }
- void YeetAdd(){         void YeetAdd(){
+              
+              
+      void YeetStatus(std::string path){    void YeetStatus(std::string path){
-              
+              
-    }         }
+          std::vector<std::filesystem::path>FilePath;        std::vector<std::filesystem::path>FilePath;
-              
-              
+          // Getting list of all files        // Getting list of all files
- // Commit Class:         // Commit Class:
+          ListFiles(path,FilePath);        ListFiles(path,FilePath);
- // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.         // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
+              
-  /**         /**
+          // Making a visited map for later        // Making a visited map for later
-  * Lists all the files in the current yeet repo.          * Lists all the files in the current yeet repo.
+          std::unordered_map<std::filesystem::path, bool> visited;        std::unordered_map<std::filesystem::path, bool> visited;
-  * @author Akhil Sharma          * @author Akhil Sharma
+          for(auto it:FilePath){        for(auto it:FilePath){
-   */          */
+              visited[it] = false;            visited[it] = false;
- void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          }        }
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+                  
-         // This is my .gitignore                 // This is my .gitignore
+          int Totaladditions,Totaldeletions;        int Totaladditions,Totaldeletions;
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+          Totaladditions = 0, Totaldeletions = 0;        Totaladditions = 0, Totaldeletions = 0;
-              
+              
-         if(IGNORE){                 if(IGNORE){
+          std::string StoreData;        std::string StoreData;
-             continue;                     continue;
+          std::fstream Store(path+"/.yeet/Store");        std::fstream Store(path+"/.yeet/Store");
-         }                 }
+              
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+          // Putting content of the Store file in the string StoreData        // Putting content of the Store file in the string StoreData
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+          if(Store.is_open()){        if(Store.is_open()){
-         }                  } 
+              std::string line;            std::string line;
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+              while (std::getline(Store, line)) {            while (std::getline(Store, line)) {
-             continue;                     continue;
+                  StoreData += line + "\n";                StoreData += line + "\n";
-         }                 }
+              }            }
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+              Store.close();            Store.close();
-     }             }
+          }        }
-    }         }
+          else{        else{
- void Commit::CommitMain(std::string path){         void Commit::CommitMain(std::string path){
+              std::cout<<"Error in opening Store File"<<std::endl;            std::cout<<"Error in opening Store File"<<std::endl;
-     try             try
+          }        }
-     {             {
+              
-         std::vector<TreeEntry> TreeEntries;                 std::vector<TreeEntry> TreeEntries;
+          if(StoreData == "Empty Store"){        if(StoreData == "Empty Store"){
-         Database DbObj(Commit::path+"/.yeet/objects");                 Database DbObj(Commit::path+"/.yeet/objects");
+              std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;            std::cout<<"Nothing to Compare to. Make your first commit!!"<<std::endl;
-         Refs RefObj(Commit::path);                 Refs RefObj(Commit::path);
+              return;            return;
-              
+          }        }
-         std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";                 std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
+              
-         // store of the file which have any changes after the last commit                 // store of the file which have any changes after the last commit
+          bool space = false;        bool space = false;
-         std::getline(std::cin >> std::ws, message); // ws means white spaces.                 std::getline(std::cin >> std::ws, message); // ws means white spaces.
+          std::string PathofFile, oid;        std::string PathofFile, oid;
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+          PathofFile = ""; oid = "";        PathofFile = ""; oid = "";
-         // CommitHelper::YeetStatus(path, FilePath) ;                 // CommitHelper::YeetStatus(path, FilePath) ;
+          std::vector<std::string> FilePaths;        std::vector<std::string> FilePaths;
-         ListFiles(path,FilePath);                 ListFiles(path,FilePath);
+          std::vector<std::string> oids;        std::vector<std::string> oids;
-         for (const auto & entry : FilePath){                 for (const auto & entry : FilePath){
+          for(int i=0;i<StoreData.size();i++){         for(int i=0;i<StoreData.size();i++){ 
-             std::string _stat = "Non-Exe";                     std::string _stat = "Non-Exe";
+              if(StoreData[i] == ' '){            if(StoreData[i] == ' '){
-             // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                     // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+                  FilePaths.push_back(PathofFile);                FilePaths.push_back(PathofFile);
-             // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                     // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+                  PathofFile = "";                PathofFile = "";
-             if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                     if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
+                  space = !space; continue;                space = !space; continue;
-                 _stat = "Exe";                         _stat = "Exe";
+              }                   }       
-             }                     }
+              
-              // content of Current FiLe.                      // content of Current FiLe.
+              if(StoreData[i] == '\n'){            if(StoreData[i] == '\n'){
-             std::string data = readFile(entry);                     std::string data = readFile(entry);
+                  oids.push_back(oid);                oids.push_back(oid);
-             // Blob of that Data                     // Blob of that Data
+                  oid = "";                oid = "";
-             Blob newBlobObject(data);                      Blob newBlobObject(data); 
+                  space = !space; continue;                space = !space; continue;
-             // Storing that Blob                     // Storing that Blob
+              }                 }     
-             DbObj.storeContentInDB(newBlobObject, entry.generic_string());                      DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
+                          
-             // Making a TreeEntry with path of that Blob                     // Making a TreeEntry with path of that Blob
+              if(!space){            if(!space){
-             TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                      TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
+                  PathofFile += StoreData[i];                PathofFile += StoreData[i];
-             TreeEntries.push_back(TreeEntryObj);                      TreeEntries.push_back(TreeEntryObj); 
-         }         }            }
+              else{            else{
-         for(auto it:DbObj.Store){                 for(auto it:DbObj.Store){
+                  oid += StoreData[i];                oid += StoreData[i];
-             std::cout<<it.first<<" "<<it.second<<std::endl;                     std::cout<<it.first<<" "<<it.second<<std::endl;
-         }         }            }
+          }        }
-         // Save the store in /Store file                 // Save the store in /Store file
+              
-         writeStoreinDB(DbObj.Store);                 writeStoreinDB(DbObj.Store);
+          // Main Loop        // Main Loop
-              
+          for(int i=0;i<oids.size();i++){        for(int i=0;i<oids.size();i++){
-         if (!TreeEntries.empty()) {                 if (!TreeEntries.empty()) {
+              
-             Tree TreeObject(TreeEntries);                     Tree TreeObject(TreeEntries);
+              int additions,deletions;            int additions,deletions;
-             DbObj.storeContentInDB(TreeObject);                     DbObj.storeContentInDB(TreeObject);
+              additions = 0, deletions = 0;            additions = 0, deletions = 0;
-             // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                     // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
+              std::string thePathOfOid = "";            std::string thePathOfOid = "";
-              
+              std::string fileName = oids[i].substr(2, oids[i].size() - 2);             std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
-             std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                     std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
+              thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;            thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
-             std::string name = getenv("YEET_AUTHOR_NAME");                     std::string name = getenv("YEET_AUTHOR_NAME");
+              
-             std::string email = getenv("YEET_AUTHOR_EMAIL");                     std::string email = getenv("YEET_AUTHOR_EMAIL");
+              std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;            std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
-             // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                     // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
+              
-             time_t currtime = time(nullptr);                     time_t currtime = time(nullptr);
+              std::string InflatedContent = Inflate(FullPath);            std::string InflatedContent = Inflate(FullPath);
-             Author NewAuthorObj(name,email,currtime);                     Author NewAuthorObj(name,email,currtime);
+              
-             std::string author = NewAuthorObj.to_stringg();                     std::string author = NewAuthorObj.to_stringg();
+              if (std::filesystem::exists(FilePaths[i])) {            if (std::filesystem::exists(FilePaths[i])) {
-             // std::cin>>message; // This doesn't takes any spaces " "                     // std::cin>>message; // This doesn't takes any spaces " "
+                  std::string NewFileContent="";                std::string NewFileContent="";
-                                  
+                  std::ifstream NowFile(FilePaths[i]);                std::ifstream NowFile(FilePaths[i]);
-             Commit MainCommitObj(TreeObject.oid,author,message,parent);                     Commit MainCommitObj(TreeObject.oid,author,message,parent);
+              
-             DbObj.storeContentInDB(MainCommitObj);                     DbObj.storeContentInDB(MainCommitObj);
+                  if(NowFile.is_open()){                if(NowFile.is_open()){
-             RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                     RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
+                      std::string line;                    std::string line;
-             // std::cout<<"the parent value: "<<parent<<std::endl;                     // std::cout<<"the parent value: "<<parent<<std::endl;
+                      while(std::getline(NowFile,line)){                    while(std::getline(NowFile,line)){
-             bool is_RootCommit = false;                     bool is_RootCommit = false;
+                          NewFileContent+=line+"\n";                        NewFileContent+=line+"\n";
-             if(parent=="ref:") is_RootCommit=true;                     if(parent=="ref:") is_RootCommit=true;
+                      }                    }
-             if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                     if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
+                      NowFile.close();                    NowFile.close();
-             std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                     std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
+                  }                }
-         }                 }
+              
-     }             }
+                  // Call Diffs algo here                // Call Diffs algo here
-     catch(const std::exception& e)             catch(const std::exception& e)
+                  std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
-     {             {
+                  std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
-         std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();                 std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
+              
-     }             }
+                  std::vector<std::vector<int>> trace;                std::vector<std::vector<int>> trace;
-                  
+                  int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
-                  
+              
-    }         }
+                  // std::cout<<ans<<std::endl;                // std::cout<<ans<<std::endl;
-              
+                  if(ans==0) {                if(ans==0) {
- Commit::Commit(std::string path){         Commit::Commit(std::string path){
+                      // TODO: Don't add in commit                    // TODO: Don't add in commit
-     this->path = path;             this->path = path;
+                      // std::cout<<"Files are identical."<<std::endl;                    // std::cout<<"Files are identical."<<std::endl;
-    }         }
+                      continue;                    continue;
-              
+                  }                            }            
- Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){         Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
+                                  
-     this->AuthorData=AuthorData;             this->AuthorData=AuthorData;
+                  std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
-     this->TreeOID=TreeOid;             this->TreeOID=TreeOid;
+              
-     this->CommitMessage=CommitMessage;             this->CommitMessage=CommitMessage;
+                  for(auto it:diff_result){                for(auto it:diff_result){
-     this->parent=parent;             this->parent=parent;
+                                          
-     this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;             this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
+                      // TODO: Add number of lines.                    // TODO: Add number of lines.
-    }         }
+                      if(it.type == Edit::DEL) {                    if(it.type == Edit::DEL) {
-              
+                          deletions++;                        deletions++;
-              
+                          Totaldeletions++;                        Totaldeletions++;
-              
+                      }                    }
-  /**         /**
+                      else if(it.type == Edit::INS) {                    else if(it.type == Edit::INS) {
-  * Helper function to get the content of a file into a string          * Helper function to get the content of a file into a string
+                          additions++;                        additions++;
- *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.         *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
+                          Totaladditions++;                        Totaladditions++;
- *  @return: a `string` with the content of the file;         *  @return: a `string` with the content of the file;
+                      }                    }
-   */         */
+                  }                }
- std::string Commit::readFile(fs::path path){         std::string Commit::readFile(fs::path path){
+              
-     // Open the stream to 'lock' the file.             // Open the stream to 'lock' the file.
+                  // Don't print exec file diffs.                // Don't print exec file diffs.
-     std::ifstream f(path, std::ios::in);             std::ifstream f(path, std::ios::in);
+                  if(! access (FilePaths[i].c_str(), X_OK)){                if(! access (FilePaths[i].c_str(), X_OK)){
-              
+                      continue;                    continue;
-     // Obtain the size of the file.             // Obtain the size of the file.
+                  }                }
-     const auto sz = fs::file_size(path);             const auto sz = fs::file_size(path);
+              
-     std::string result(sz, '\0');             std::string result(sz, '\0');
+                  // don't show file if nothing changed                // don't show file if nothing changed
-              
+                  if(additions == 0 && deletions == 0){                if(additions == 0 && deletions == 0){
-     // Read the whole file into the buffer.             // Read the whole file into the buffer.
+                      continue;                    continue;
-     f.read(result.data(), sz);             f.read(result.data(), sz);
+                  }                }
-              
+              
-     return result;             return result;
+                  // The file we are checking:                // The file we are checking:
-    }         }
+                  std::cout<<FilePaths[i]<<std::endl;                std::cout<<FilePaths[i]<<std::endl;
-              
+                                  
- // Blob Class         // Blob Class
+                  std::cout<<"This file additions: "<<additions<<"\n";                std::cout<<"This file additions: "<<additions<<"\n";
- Blob::Blob(std::string newdata){         Blob::Blob(std::string newdata){
+                  std::cout<<"This file deletions: "<<deletions<<std::endl;                std::cout<<"This file deletions: "<<deletions<<std::endl;
-     this->data = newdata;             this->data = newdata;
+                  // Printing the diffs                // Printing the diffs
-     // std::cout<<"The blob oid is: "<<this->oid<<std::endl;             // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
+                  Printer printer;                Printer printer;
-    }         }
+                  printer.print(diff_result);                printer.print(diff_result);
- std::string Blob::type(){         std::string Blob::type(){
+              
-     return "blob";             return "blob";
+                  visited[FilePaths[i]] = true;                visited[FilePaths[i]] = true;
-    }         }
+              } else {            } else {
-              
+                  deletions+=InflatedContent.size();                deletions+=InflatedContent.size();
- // Database Class         // Database Class
+              }            }
- Database::Database(std::filesystem::path path){         Database::Database(std::filesystem::path path){
+          }        }
-     this->path = path;             this->path = path;
+              
-    }         }
+          for(int i=0;i<visited.size();i++){        for(int i=0;i<visited.size();i++){
-              
+              if(!visited[FilePaths[i]]){            if(!visited[FilePaths[i]]){
- // Creating Hash         // Creating Hash
+                  std::ifstream newFile(FilePaths[i]);                std::ifstream newFile(FilePaths[i]);
- std::string calculateSHA1Hex(const std::string& content) { // used some copilot         std::string calculateSHA1Hex(const std::string& content) { // used some copilot
+                  if (newFile.is_open()) {                if (newFile.is_open()) {
-     CryptoPP::SHA1 sha1;             CryptoPP::SHA1 sha1;
+                      std::string line;                    std::string line;
-     std::string hash;             std::string hash;
+                      while (std::getline(newFile, line)) {                    while (std::getline(newFile, line)) {
-     // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal             // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
+                          Totaladditions++;                        Totaladditions++;
-     CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));             CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
+                      }                    }
-              
+                      newFile.close();                    newFile.close();
-     return hash;             return hash;
+                  }                }
-    }         }
+              }            }
-              
+          }        }
- void Database::storeContentInDB(Blob& object, const std::string& path){         void Database::storeContentInDB(Blob& object, const std::string& path){
+          if(Totaladditions == 0  && Totaldeletions == 0){        if(Totaladditions == 0  && Totaldeletions == 0){
-     std::string Data = object.data;             std::string Data = object.data;
+              std::cout<<"No Change, Can't commit"<<std::endl;            std::cout<<"No Change, Can't commit"<<std::endl;
-              
+              // TODO: Add a check so that no commit can happen;            // TODO: Add a check so that no commit can happen;
-     // TODO: make proper diff here             // TODO: make proper diff here
+          }        }
-     // ! I am putiing only the data in the content to simplify the process of diff             // ! I am putiing only the data in the content to simplify the process of diff
+          else{        else{
-     // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+              std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;            std::cout<<"Total addtions: "<<Totaladditions<<"\nTotal deletions: "<<Totaldeletions<<std::endl;
-                  
+          }        }
-     std::string content = Data;             std::string content = Data;
+              
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+              
-     Store[path] = object.oid;             Store[path] = object.oid;
+         }    }
-                  
+              
-     // std::cout<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<object.oid<<std::endl; // Hashes are coming out.
+              
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+       /**    /**
-    }         }
+       * Initializes a .yeet directory with default configs     * Initializes a .yeet directory with default configs
-              
+         *     *
- void Database::storeContentInDB(Tree& object){         void Database::storeContentInDB(Tree& object){
+       * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`     * @param path write the name of the directory should be entered according to pwd, see README for more on it or `.` The default is `.`
-     std::string Data = object.ReturnS_tring();             std::string Data = object.ReturnS_tring();
+       * @attention For now, You can only init in the directory which has already been made.     * @attention For now, You can only init in the directory which has already been made.
-     std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.             std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
+       * @return Nothing for now     * @return Nothing for now
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
+       * @author Akhil Sharma     * @author Akhil Sharma
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+        */     */
-     // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-    }         }
+      void YeetInit(std::string path="."){    void YeetInit(std::string path="."){
+          try        try
+          {        {
-              
+              // std::cout<<path;            // std::cout<<path;
- void Database::storeContentInDB(Commit& object){         void Database::storeContentInDB(Commit& object){
+              // He can enter . --> init in pwd ------> Will Work            // He can enter . --> init in pwd ------> Will Work
-     std::string Data = object.Writtenlines;             std::string Data = object.Writtenlines;
+              // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first            // He can enter ebc --> init in pwd/ebc --------> not work, you to mkdir ebc first
-     std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.             std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
+              // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above            // He can enter ebc/ --> init in pwd/ebc only not pwd/ebc/ -------> same as above
-     // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.             // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
+              // He can enter full path from root --> init at that path ---------> will not work            // He can enter full path from root --> init at that path ---------> will not work
-     // std::cout<<"the content: "<<content<<std::endl;             // std::cout<<"the content: "<<content<<std::endl;
+              std::string pwd = std::filesystem::current_path();            std::string pwd = std::filesystem::current_path();
-     object.oid = calculateSHA1Hex(content);             object.oid = calculateSHA1Hex(content);
+              std::string temp_pwd = pwd;            std::string temp_pwd = pwd;
-     // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.             // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
+              std::string _actualPath=pwd+'/'+path+".yeet";            std::string _actualPath=pwd+'/'+path+".yeet";
-     write_object(object.oid,content); // Writing/ making directories of the commit object/blob             write_object(object.oid,content); // Writing/ making directories of the commit object/blob
+              if(path.back()!='/' && path.back()!='.'){             if(path.back()!='/' && path.back()!='.'){ 
-    }         }
+                  _actualPath=pwd+'/'+path+"/.yeet";                _actualPath=pwd+'/'+path+"/.yeet";
-              
+                  temp_pwd=pwd+'/'+path;                temp_pwd=pwd+'/'+path;
- // Tree Class         // Tree Class
+              }            }
-              
+              
-  /**         /**
+              if(path.back()=='.')             if(path.back()=='.') 
-  * This function converts the vector<TreeEntry> to string          * This function converts the vector<TreeEntry> to string
+                  _actualPath=pwd+"/.yeet";                 _actualPath=pwd+"/.yeet"; 
-  * @return String, which will be used in storing the tree to Database.          * @return String, which will be used in storing the tree to Database.
+              
-  * The entries contains all the files commit info.          * The entries contains all the files commit info.
+              if(std::filesystem::exists(temp_pwd+"/.yeet"))            if(std::filesystem::exists(temp_pwd+"/.yeet"))
-   */          */
+                  throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");                throw std::runtime_error("ERROR::INIT::A yeet folder already exists in this directory. \n");
- std::string Tree::ReturnS_tring(){         std::string Tree::ReturnS_tring(){
+                          
-     std::ostringstream result;             std::ostringstream result;
+              // std::system("tree .");            // std::system("tree .");
-              
+              
-     // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream             // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
+              std::filesystem::create_directory(_actualPath);            std::filesystem::create_directory(_actualPath);
-     // Using the 'result' stream to concatenate strings and numbers             // Using the 'result' stream to concatenate strings and numbers
+              std::filesystem::create_directory(_actualPath+"/objects");            std::filesystem::create_directory(_actualPath+"/objects");
-     // result << "The answer to life, the universe, and everything is " << 42 << ".";             // result << "The answer to life, the universe, and everything is " << 42 << ".";
+              std::filesystem::create_directory(_actualPath+"/refs");            std::filesystem::create_directory(_actualPath+"/refs");
-     // Sort entries by name             // Sort entries by name
+              std::filesystem::create_directory(_actualPath+"/refs/heads");            std::filesystem::create_directory(_actualPath+"/refs/heads");
-              
+              std::filesystem::create_directory(_actualPath+"/refs/tags");            std::filesystem::create_directory(_actualPath+"/refs/tags");
-     std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {             std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
+              
-         return a.name < b.name;                 return a.name < b.name;
+              // Make HEAD file.            // Make HEAD file.
-     });             });
+              std::ofstream headFile(_actualPath+"/HEAD");            std::ofstream headFile(_actualPath+"/HEAD");
-              
+                  if (headFile.is_open()) {                if (headFile.is_open()) {
-     for (const auto& entry : entries) {             for (const auto& entry : entries) {
+                      headFile << "ref: refs/heads/main\n";                    headFile << "ref: refs/heads/main\n";
-         std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;                 std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
+                      headFile.close();                    headFile.close();
-         result << FileStat << " " << entry.name << " " << entry.oid<< "\n";                 result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
+                  } else {                } else {
-     }             }
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/HEAD file.\n");
-     // std::cout<<result.str()<<std::endl;             // std::cout<<result.str()<<std::endl;
+                  }                }
-     return result.str();             return result.str();
+              
-    }         }
+              // Making Description file.            // Making Description file.
-              
+              std::ofstream descFile(_actualPath+"/description");            std::ofstream descFile(_actualPath+"/description");
-              
+                  if(descFile.is_open()){                if(descFile.is_open()){
-              
+                      descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";                    descFile<<"Demo Description. This file contains the info and descriptio about the repository.\n";
- // Helper Functions:         // Helper Functions:
+                      descFile.close();                    descFile.close();
- std::string timeToString(time_t currtime) {          std::string timeToString(time_t currtime) { 
+                  }                }
-     std::stringstream ss;              std::stringstream ss; 
+                  else {                else {
-     ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.             ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/description file.\n");
-     return ss.str();             return ss.str();
+                  }                }
-    }         }
+                          
-              
+              // Making config file            // Making config file
-              
+              std::ofstream configFile(_actualPath+"/config");            std::ofstream configFile(_actualPath+"/config");
- std::string Directory_name_Helper(std::string Objpath){         std::string Directory_name_Helper(std::string Objpath){
+                  if(configFile.is_open()){                if(configFile.is_open()){
-     std::string ans="";             std::string ans="";
+                      // TODO: Find a configparser for C++. and replace the content of this configFile.                    // TODO: Find a configparser for C++. and replace the content of this configFile.
-     ans+=Objpath[Objpath.size()-41];             ans+=Objpath[Objpath.size()-41];
+                      configFile<<"Demo Config\n";                    configFile<<"Demo Config\n";
-     ans+=Objpath[Objpath.size()-40];             ans+=Objpath[Objpath.size()-40];
+                      configFile.close();                    configFile.close();
-     return ans;             return ans;
+                  }                }
-    }         }
+                  else {                else {
-              
+                      throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");                    throw std::runtime_error("ERROR::INIT::Failed to create .yeet/config file.\n");
- std::string File_name_Helper(std::string Objpath){         std::string File_name_Helper(std::string Objpath){
+                  }                }
-     std::string ans="";             std::string ans="";
+              
-     for(int i=Objpath.size()-1;i>=0;i--){             for(int i=Objpath.size()-1;i>=0;i--){
+              // Making Store File            // Making Store File
-         if(Objpath[i]=='/'){                 if(Objpath[i]=='/'){
+              std::ofstream StoreFile(_actualPath+"/Store");            std::ofstream StoreFile(_actualPath+"/Store");
-             break;                     break;
+              if(StoreFile.is_open()){            if(StoreFile.is_open()){
-         }                 }
+                  StoreFile<<"Empty Store\n";                StoreFile<<"Empty Store\n";
-         ans+=Objpath[i];                 ans+=Objpath[i];
+                  StoreFile.close();                StoreFile.close();
-     }             }
+              }            }
-     std::string act_ans="";             std::string act_ans="";
+              else {            else {
-     for(int i=ans.size()-1;i>=0;i--){             for(int i=ans.size()-1;i>=0;i--){
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Store file.\n");
-         act_ans+=ans[i];                 act_ans+=ans[i];
+              }            }
-     }             }
+              
-     return act_ans;             return act_ans;
+              // Make Diff file.            // Make Diff file.
-    }         }
+              std::ofstream DiffFile(_actualPath+"/Diff");            std::ofstream DiffFile(_actualPath+"/Diff");
-              
+              if (DiffFile.is_open()) {            if (DiffFile.is_open()) {
- // std::string Compressing_using_zlib(std::string content){         // std::string Compressing_using_zlib(std::string content){
+                  DiffFile << "No Diffs Yet\n";                DiffFile << "No Diffs Yet\n";
- //     z_stream stream;         //     z_stream stream;
+                  DiffFile.close();                DiffFile.close();
- //     stream.zalloc = nullptr;         //     stream.zalloc = nullptr;
+              } else {            } else {
- //     stream.zfree = nullptr;         //     stream.zfree = nullptr;
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
- //     stream.opaque = nullptr;         //     stream.opaque = nullptr;
+              }            }
- //     stream.avail_in = content.size(); // input size         //     stream.avail_in = content.size(); // input size
+              
- //     uLongf compressed_size = compressBound(content.size());         //     uLongf compressed_size = compressBound(content.size());
+              // Make Current Branch file.            // Make Current Branch file.
- //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og         //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
+              std::ofstream BranchFile(_actualPath+"/Branch");            std::ofstream BranchFile(_actualPath+"/Branch");
- //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil         //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
+              if (BranchFile.is_open()) {            if (BranchFile.is_open()) {
- //     Bytef* compressed_data = new Bytef[compressed_size];         //     Bytef* compressed_data = new Bytef[compressed_size];
+                  BranchFile << "master";                BranchFile << "master";
- //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type         //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
+                  BranchFile.close();                BranchFile.close();
-              
+              } else {            } else {
- //     // intializing compression         //     // intializing compression
+                  throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");                throw std::runtime_error("ERROR::INIT::Failed to create .yeet/Diff file.\n");
- //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.         //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
+              }            }
-              
+              
- //     // compress:         //     // compress:
+              std::cout << "YEET::Initialized yeet directory\n";            std::cout << "YEET::Initialized yeet directory\n";
- //     deflate(&stream, Z_BEST_COMPRESSION);         //     deflate(&stream, Z_BEST_COMPRESSION);
+          }        }
-              
+          catch(const std::exception& e){        catch(const std::exception& e){
- //     compressed_size = stream.total_out;         //     compressed_size = stream.total_out;
+              std::cerr << e.what() << '\n';            std::cerr << e.what() << '\n';
-              
+          }        }
- //     deflateEnd(&stream);         //     deflateEnd(&stream);
+                  
- //     std::string compressed = reinterpret_cast<const char*>(compressed_data);         //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
+         }    }
- //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data         //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
+              
- //     return compressed;         //     return compressed;
+      void YeetAdd(){    void YeetAdd(){
- // }         // }
-              
+         }    }
- // refractored Compression Logic         // refractored Compression Logic
+              
- std::string Compressing_using_zlib(std::string& content) {         std::string Compressing_using_zlib(std::string& content) {
+              
-     if (content.empty()) return "";             if (content.empty()) return "";
+      // Commit Class:    // Commit Class:
-              
+      // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.    // TODO: Add a check that you can only list files if a .yeet dir is present/ initialized.
-     z_stream stream{};             z_stream stream{};
+       /**    /**
-     stream.zalloc = nullptr;             stream.zalloc = nullptr;
+       * Lists all the files in the current yeet repo.     * Lists all the files in the current yeet repo.
-     stream.zfree = nullptr;             stream.zfree = nullptr;
+       * @author Akhil Sharma     * @author Akhil Sharma
-     stream.opaque = nullptr;             stream.opaque = nullptr;
+        */     */
-     stream.avail_in = static_cast<uInt>(content.size());             stream.avail_in = static_cast<uInt>(content.size());
+      void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void Commit::ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));             stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-              
+              // This is my .gitignore            // This is my .gitignore
-     if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {             if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");                 throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
+              
-     }             }
+              if(IGNORE){            if(IGNORE){
-              
+                  continue;                continue;
-     std::vector<unsigned char> compressedData(compressBound(content.size()));             std::vector<unsigned char> compressedData(compressBound(content.size()));
+              }            }
-     stream.avail_out = compressedData.size();             stream.avail_out = compressedData.size();
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-     stream.next_out = compressedData.data();             stream.next_out = compressedData.data();
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-              
+              }             } 
-     if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {             if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-         deflateEnd(&stream);                 deflateEnd(&stream);
+                  continue;                continue;
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");                 throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
+              }            }
-     }             }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-              
+          }        }
-     compressedData.resize(stream.total_out);             compressedData.resize(stream.total_out);
+         }    }
-              
+      void Commit::CommitMain(std::string path){    void Commit::CommitMain(std::string path){
-     if (deflateEnd(&stream) != Z_OK) {             if (deflateEnd(&stream) != Z_OK) {
+          try        try
-         throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");                 throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
+          {        {
-     }             }
+              std::vector<TreeEntry> TreeEntries;            std::vector<TreeEntry> TreeEntries;
-              
+              Database DbObj(Commit::path+"/.yeet/objects");            Database DbObj(Commit::path+"/.yeet/objects");
-     return std::string(compressedData.begin(), compressedData.end());             return std::string(compressedData.begin(), compressedData.end());
+              Refs RefObj(Commit::path);            Refs RefObj(Commit::path);
-    }         }
-              
+              std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";            std::string message; std::cout<<"\nCOMMIT::Please enter your Commit Message:\n";
-              
+              // store of the file which have any changes after the last commit            // store of the file which have any changes after the last commit
- // Author Class:         // Author Class:
+              std::getline(std::cin >> std::ws, message); // ws means white spaces.            std::getline(std::cin >> std::ws, message); // ws means white spaces.
- std::string Author::to_stringg(){         std::string Author::to_stringg(){
+              std::vector<std::filesystem::path>FilePath;            std::vector<std::filesystem::path>FilePath;
-     std::string thecurrTime=timeToString(time);             std::string thecurrTime=timeToString(time);
+              CommitHelper::YeetStatus(path, FilePath) ;            CommitHelper::YeetStatus(path, FilePath) ;
-     return name+" <"+email+"> "+ thecurrTime;             return name+" <"+email+"> "+ thecurrTime;
+              // ListFiles(path,FilePath);            // ListFiles(path,FilePath);
-    }         }
+              for (const auto & entry : FilePath){            for (const auto & entry : FilePath){
-              
+                  std::string _stat = "Non-Exe";                std::string _stat = "Non-Exe";
-              
+                  // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
- // History         // History
+                  // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
- // Refs Class:         // Refs Class:
+                  if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not                if (! access (entry.c_str(), X_OK)){ // Checks if a file is exe or not
- // Constructor of Ref Class         // Constructor of Ref Class
+                      _stat = "Exe";                    _stat = "Exe";
- Refs::Refs(std::string path){         Refs::Refs(std::string path){
+                  }                }
-     this->path = path;             this->path = path;
+                   // content of Current FiLe.                 // content of Current FiLe.
-    }         }
+                  std::string data = readFile(entry);                std::string data = readFile(entry);
-              
+                  // Blob of that Data                // Blob of that Data
- // @return the path to the HEAD file         // @return the path to the HEAD file
+                  Blob newBlobObject(data);                 Blob newBlobObject(data); 
- std::string Refs::HEAD_path(){         std::string Refs::HEAD_path(){
+                  // Storing that Blob                // Storing that Blob
-     std::string currBranch = Helper::readFile(path+"/.yeet/Branch");             std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
+                  DbObj.storeContentInDB(newBlobObject, entry.generic_string());                 DbObj.storeContentInDB(newBlobObject, entry.generic_string()); 
-     return path + "/.yeet/refs/heads/" + currBranch;             return path + "/.yeet/refs/heads/" + currBranch;
+                  // Making a TreeEntry with path of that Blob                // Making a TreeEntry with path of that Blob
-    }         }
+                  TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat);                 TreeEntry TreeEntryObj(entry.generic_string(),newBlobObject.oid,_stat); 
-              
+                  TreeEntries.push_back(TreeEntryObj);                 TreeEntries.push_back(TreeEntryObj); 
- // TODO: Updates the HEAD file to the latest commit according to the branch         // TODO: Updates the HEAD file to the latest commit according to the branch
+              }            }
-              
+              for(auto it:DbObj.Store){            for(auto it:DbObj.Store){
- void Refs::update_HEAD(std::string oid){         void Refs::update_HEAD(std::string oid){
+                  std::cout<<it.first<<" "<<it.second<<std::endl;                std::cout<<it.first<<" "<<it.second<<std::endl;
-     // std::cout<<path<<std::endl;             // std::cout<<path<<std::endl;
+              }            }
-     std::ofstream headFile(HEAD_path());             std::ofstream headFile(HEAD_path());
+              // Save the store in /Store file            // Save the store in /Store file
-     if (headFile.is_open()) {             if (headFile.is_open()) {
+              writeStoreinDB(DbObj.Store);            writeStoreinDB(DbObj.Store);
-         headFile << oid;                 headFile << oid;
+              
-         headFile.close();                 headFile.close();
+              if (!TreeEntries.empty()) {            if (!TreeEntries.empty()) {
-     } else {             } else {
+                  Tree TreeObject(TreeEntries);                Tree TreeObject(TreeEntries);
-         throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");                 throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
+                  DbObj.storeContentInDB(TreeObject);                DbObj.storeContentInDB(TreeObject);
-     }             }
+                  // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;                // std::cout << "My Tree Id is wao: " << TreeObject.oid << std::endl;
-    }         }
-              
+                  std::string parent = RefObj.Read_HEAD(); // The oid of previous commit                std::string parent = RefObj.Read_HEAD(); // The oid of previous commit
- std::string Refs::Read_HEAD(){         std::string Refs::Read_HEAD(){
+                  std::string name = getenv("YEET_AUTHOR_NAME");                std::string name = getenv("YEET_AUTHOR_NAME");
-     std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);             std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
+                  std::string email = getenv("YEET_AUTHOR_EMAIL");                std::string email = getenv("YEET_AUTHOR_EMAIL");
-     std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.             std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
+                  // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working                // std::cout<<"Name: "<<name<<"\nmail: "<<email<<"\n"; // working
-     if(headFile){             if(headFile){
+                  time_t currtime = time(nullptr);                time_t currtime = time(nullptr);
-         headFile>>FileContent; // All content of the file into the string                 headFile>>FileContent; // All content of the file into the string
+                  Author NewAuthorObj(name,email,currtime);                Author NewAuthorObj(name,email,currtime);
-     }             }
+                  std::string author = NewAuthorObj.to_stringg();                std::string author = NewAuthorObj.to_stringg();
-     return FileContent;             return FileContent;
+                  // std::cin>>message; // This doesn't takes any spaces " "                // std::cin>>message; // This doesn't takes any spaces " "
-    }         }
+                                  
-              
+                  Commit MainCommitObj(TreeObject.oid,author,message,parent);                Commit MainCommitObj(TreeObject.oid,author,message,parent);
- void writeStoreinDB(std::map<std::string, std::string> Store){         void writeStoreinDB(std::map<std::string, std::string> Store){
+                  DbObj.storeContentInDB(MainCommitObj);                DbObj.storeContentInDB(MainCommitObj);
-     for(auto it:Store){             for(auto it:Store){
+                  RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit                RefObj.update_HEAD(MainCommitObj.oid); // Updating the HEAD file to new commit
-         std::cout<<it.first<<" "<<it.second<<std::endl;                 std::cout<<it.first<<" "<<it.second<<std::endl;
+                  // std::cout<<"the parent value: "<<parent<<std::endl;                // std::cout<<"the parent value: "<<parent<<std::endl;
-     }             }
+                  bool is_RootCommit = false;                bool is_RootCommit = false;
-     std::cout<<"Hello"<<std::endl;             std::cout<<"Hello"<<std::endl;
+                  if(parent=="ref:") is_RootCommit=true;                if(parent=="ref:") is_RootCommit=true;
-     std::string _actualPath = fs::current_path();             std::string _actualPath = fs::current_path();
+                  if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;                if(is_RootCommit) std::cout<<"\nThis is a root commit"<<std::endl;
-     std::cout<<_actualPath<<std::endl;             std::cout<<_actualPath<<std::endl;
+                  std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";                std::cout<<"COMMIT::Your Commit id is: "<<MainCommitObj.oid<<"\nCommit-Message: "<<MainCommitObj.CommitMessage<<"\n";
-              
+              }            }
-     std::ofstream StoreFile(_actualPath+"/.yeet/Store");             std::ofstream StoreFile(_actualPath+"/.yeet/Store");
+          }        }
-     if(StoreFile.is_open()){             if(StoreFile.is_open()){
+          catch(const std::exception& e)        catch(const std::exception& e)
-         for(auto it:Store){                 for(auto it:Store){
+          {        {
-             StoreFile<<it.first<<" "<<it.second<<"\n";                     StoreFile<<it.first<<" "<<it.second<<"\n";
+              std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();            std::cerr << "\nERROR::COMMITMAIN:: An error occured while commit your latest changes. \nError by e.what(): "<< e.what();
-         }                 }
+          }        }
-         StoreFile.close();                 StoreFile.close();
+                  
-     }             }
+                  
-              
+         }    }
-     else {             else {
+              
-         throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");                 throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
+      Commit::Commit(std::string path){    Commit::Commit(std::string path){
-     }             }
+          this->path = path;        this->path = path;
-    }         }
+         }    }
-              
-              
+      Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){    Commit::Commit(std::string TreeOid, std::string AuthorData, std::string CommitMessage,std::string parent){
- // Helper Function for Listing Files:         // Helper Function for Listing Files:
+          this->AuthorData=AuthorData;        this->AuthorData=AuthorData;
- void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){         void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
+          this->TreeOID=TreeOid;        this->TreeOID=TreeOid;
-     for (const auto & entry : fs::directory_iterator(path)){             for (const auto & entry : fs::directory_iterator(path)){
+          this->CommitMessage=CommitMessage;        this->CommitMessage=CommitMessage;
-         // This is my .yeetignore                 // This is my .yeetignore
+          this->parent=parent;        this->parent=parent;
-         const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;                 const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
+          this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;        this->Writtenlines = "parent: " + parent +  "\ntree: "+TreeOID+"\nauthor: "+AuthorData+"\nCommitedBy: "+AuthorData+"\n\nCommitMessage: "+CommitMessage;
-              
+         }    }
-         if(IGNORE){                 if(IGNORE){
+              
-             continue;                     continue;
+              
-         }                 }
+              
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+       /**    /**
-             ListFiles(entry.path(),FilePath);                     ListFiles(entry.path(),FilePath);
+       * Helper function to get the content of a file into a string     * Helper function to get the content of a file into a string
-         }                  } 
+      *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.    *  @param: `path` is of type fs::path. It needs the path to the file and then it reads all the content of it.
-         if(entry.is_directory()) {                 if(entry.is_directory()) {
+      *  @return: a `string` with the content of the file;    *  @return: a `string` with the content of the file;
-             continue;                     continue;
+        */    */
-         }                 }
+      std::string Commit::readFile(fs::path path){    std::string Commit::readFile(fs::path path){
-         FilePath.push_back(entry);                 FilePath.push_back(entry);
+          // Open the stream to 'lock' the file.        // Open the stream to 'lock' the file.
-     }             }
+          std::ifstream f(path, std::ios::in);        std::ifstream f(path, std::ios::in);
-    }         }
-              
+          // Obtain the size of the file.        // Obtain the size of the file.
- std::vector<unsigned char> readFile(const std::string& filename) {         std::vector<unsigned char> readFile(const std::string& filename) {
+          const auto sz = fs::file_size(path);        const auto sz = fs::file_size(path);
-     std::ifstream file(filename, std::ios::binary);             std::ifstream file(filename, std::ios::binary);
+          std::string result(sz, '\0');        std::string result(sz, '\0');
-     if (!file) {             if (!file) {
+              
-         std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;                 std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
+          // Read the whole file into the buffer.        // Read the whole file into the buffer.
-         return {};                 return {};
+          f.read(result.data(), sz);        f.read(result.data(), sz);
-     }             }
+              
-     return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());             return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
+          return result;        return result;
-    }         }
+         }    }
-              
+              
- std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {         std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
+      // Blob Class    // Blob Class
-     z_stream strm = {};             z_stream strm = {};
+      Blob::Blob(std::string newdata){    Blob::Blob(std::string newdata){
-     strm.total_in = strm.avail_in = compressedData.size();             strm.total_in = strm.avail_in = compressedData.size();
+          this->data = newdata;        this->data = newdata;
-     strm.next_in = (Bytef*)compressedData.data();             strm.next_in = (Bytef*)compressedData.data();
+          // std::cout<<"The blob oid is: "<<this->oid<<std::endl;        // std::cout<<"The blob oid is: "<<this->oid<<std::endl;
-              
+         }    }
-     std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size             std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
+      std::string Blob::type(){    std::string Blob::type(){
-              
+          return "blob";        return "blob";
-     if (inflateInit(&strm) != Z_OK) {             if (inflateInit(&strm) != Z_OK) {
+         }    }
-         std::cerr << "inflateInit failed" << std::endl;                 std::cerr << "inflateInit failed" << std::endl;
+              
-         return {};                 return {};
+      // Database Class    // Database Class
-     }             }
+      Database::Database(std::filesystem::path path){    Database::Database(std::filesystem::path path){
-              
+          this->path = path;        this->path = path;
-     int ret;             int ret;
+         }    }
-     do {             do {
+              
-         strm.avail_out = decompressedData.size() - strm.total_out;                 strm.avail_out = decompressedData.size() - strm.total_out;
+      // Creating Hash    // Creating Hash
-         strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);                 strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
+      std::string calculateSHA1Hex(const std::string& content) { // used some copilot    std::string calculateSHA1Hex(const std::string& content) { // used some copilot
-              
+          CryptoPP::SHA1 sha1;        CryptoPP::SHA1 sha1;
-         ret = inflate(&strm, Z_NO_FLUSH);                 ret = inflate(&strm, Z_NO_FLUSH);
+          std::string hash;        std::string hash;
-              
+          // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal        // Create a filter that calculates the SHA1 hash and then encodes it as hexadecimal
-         switch (ret) {                 switch (ret) {
+          CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));        CryptoPP::StringSource(content, true, new CryptoPP::HashFilter(sha1, new CryptoPP::HexEncoder(new CryptoPP::StringSink(hash),false)));
-             case Z_NEED_DICT:                     case Z_NEED_DICT:
+              
-             case Z_DATA_ERROR:                     case Z_DATA_ERROR:
+          return hash;        return hash;
-             case Z_MEM_ERROR:                     case Z_MEM_ERROR:
+         }    }
-                 std::cerr << "inflate error: " << ret << std::endl;                         std::cerr << "inflate error: " << ret << std::endl;
+              
-                 inflateEnd(&strm);                         inflateEnd(&strm);
+      void Database::storeContentInDB(Blob& object, const std::string& path){    void Database::storeContentInDB(Blob& object, const std::string& path){
-                 return {};                         return {};
+          std::string Data = object.data;        std::string Data = object.data;
-             case Z_BUF_ERROR:                     case Z_BUF_ERROR:
+              
-             case Z_OK:                     case Z_OK:
+          // TODO: make proper diff here        // TODO: make proper diff here
-                 if (strm.avail_out == 0) {                         if (strm.avail_out == 0) {
+          // ! I am putiing only the data in the content to simplify the process of diff        // ! I am putiing only the data in the content to simplify the process of diff
-                     // Output buffer is full, increase its size                             // Output buffer is full, increase its size
+          // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        // std::string content = object.type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-                     decompressedData.resize(decompressedData.size() * 2);                             decompressedData.resize(decompressedData.size() * 2);
+                  
-                 }                         }
+          std::string content = Data;        std::string content = Data;
-                 break;                         break;
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-         }                 }
+          Store[path] = object.oid;        Store[path] = object.oid;
-     } while (ret != Z_STREAM_END);             } while (ret != Z_STREAM_END);
+                  
-              
+          // std::cout<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<object.oid<<std::endl; // Hashes are coming out.
-     inflateEnd(&strm);             inflateEnd(&strm);
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-     decompressedData.resize(strm.total_out); // Resize to actual decompressed size             decompressedData.resize(strm.total_out); // Resize to actual decompressed size
+         }    }
-     return decompressedData;             return decompressedData;
+              
-    }         }
+      void Database::storeContentInDB(Tree& object){    void Database::storeContentInDB(Tree& object){
-              
+          std::string Data = object.ReturnS_tring();        std::string Data = object.ReturnS_tring();
- std::string Inflate(std::string path){         std::string Inflate(std::string path){
+          std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.        std::string content = object.Type() + " " + std::to_string(Data.size()) + "\0" + Data; // The null character is included just to use when we itterate over it.
-              
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-     std::string inputFilename = path;              std::string inputFilename = path; 
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     std::string response = "";             std::string response = "";
+          // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the tree object is: "<<object.oid<<std::endl; // Hashes are coming out.
-              
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-     auto compressedData = readFile(inputFilename);             auto compressedData = readFile(inputFilename);
+         }    }
-     if (compressedData.empty()) return "Error in compressed data";             if (compressedData.empty()) return "Error in compressed data";
-              
+      void Database::storeContentInDB(Commit& object){    void Database::storeContentInDB(Commit& object){
-     auto decompressedData = decompressData(compressedData);             auto decompressedData = decompressData(compressedData);
+          std::string Data = object.Writtenlines;        std::string Data = object.Writtenlines;
-     if (decompressedData.empty()) return "Error in decompresssion";             if (decompressedData.empty()) return "Error in decompresssion";
+          std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.        std::string content = "Commit  \nData Size: " + std::to_string(Data.size()) + "\0 \n" + Data; // The null character is included just to use when we itterate over it.
-              
+          // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.        // TODO: I have added Data size as extra here for readablitliy, but it may create problem later.
-     for(auto it:decompressedData){             for(auto it:decompressedData){
+          // std::cout<<"the content: "<<content<<std::endl;        // std::cout<<"the content: "<<content<<std::endl;
-         response+=it;                 response+=it;
+          object.oid = calculateSHA1Hex(content);        object.oid = calculateSHA1Hex(content);
-     }             }
+          // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.        // std::cout<<"The hash of the Commit object is: "<<object.oid<<std::endl; // Hashes are coming out.
-              
+          write_object(object.oid,content); // Writing/ making directories of the commit object/blob        write_object(object.oid,content); // Writing/ making directories of the commit object/blob
-     return response;             return response;
-    }    }    }
-              
+      // Tree Class    // Tree Class
- // Diffs Algo         // Diffs Algo
-              
+       /**    /**
- // A function to convert a string to differnt lines. like a vector of strings         // A function to convert a string to differnt lines. like a vector of strings
+       * This function converts the vector<TreeEntry> to string     * This function converts the vector<TreeEntry> to string
- std::vector<std::string> splitIntoLines(const std::string& str) {         std::vector<std::string> splitIntoLines(const std::string& str) {
+       * @return String, which will be used in storing the tree to Database.     * @return String, which will be used in storing the tree to Database.
-     std::vector<std::string> lines;             std::vector<std::string> lines;
+       * The entries contains all the files commit info.     * The entries contains all the files commit info.
-     std::string temp;             std::string temp;
+        */     */
-     for (char c : str) {             for (char c : str) {
+      std::string Tree::ReturnS_tring(){    std::string Tree::ReturnS_tring(){
-         if (c == '\n') {                 if (c == '\n') {
+          std::ostringstream result;        std::ostringstream result;
-             lines.push_back(temp);                     lines.push_back(temp);
+              
-             temp.clear();                     temp.clear();
+          // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream        // std::ostringstream result; // The ostringstream stands for output string stream just like ofstream
-         } else {                 } else {
+          // Using the 'result' stream to concatenate strings and numbers        // Using the 'result' stream to concatenate strings and numbers
-             temp += c;                     temp += c;
+          // result << "The answer to life, the universe, and everything is " << 42 << ".";        // result << "The answer to life, the universe, and everything is " << 42 << ".";
-         }                 }
+          // Sort entries by name        // Sort entries by name
-     }             }
+              
-     if (!temp.empty()) {             if (!temp.empty()) {
+          std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {        std::sort(entries.begin(), entries.end(), [](const TreeEntry& a, const TreeEntry& b) {
-         lines.push_back(temp);                 lines.push_back(temp);
+              return a.name < b.name;            return a.name < b.name;
-     }             }
+          });        });
-     return lines;             return lines;
+              
-    }         }
+          for (const auto& entry : entries) {        for (const auto& entry : entries) {
-              
+              std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;            std::string FileStat = (entry.stat == "Exe") ? entry.EXE_MODE : entry.REGULAR_MODE;
- int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,          int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
+              result << FileStat << " " << entry.name << " " << entry.oid<< "\n";            result << FileStat << " " << entry.name << " " << entry.oid<< "\n";
-                          std::vector<std::vector<int>>& trace) {                                  std::vector<std::vector<int>>& trace) {
+          }        }
-     int n = a.size(), m = b.size();             int n = a.size(), m = b.size();
+          // std::cout<<result.str()<<std::endl;        // std::cout<<result.str()<<std::endl;
-     if (n == 0) return m;  // All insertions if `a` is empty             if (n == 0) return m;  // All insertions if `a` is empty
+          return result.str();        return result.str();
-     if (m == 0) return n;  // All deletions if `b` is empty             if (m == 0) return n;  // All deletions if `b` is empty
+         }    }
-              
+              
-     int max_distance = n + m;             int max_distance = n + m;
+              
-     int diagonal_offset = max_distance;  // To shift diagonals into the array             int diagonal_offset = max_distance;  // To shift diagonals into the array
+              
-     std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal             std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
+      // Helper Functions:    // Helper Functions:
-     trace.clear();             trace.clear();
+      std::string timeToString(time_t currtime) {     std::string timeToString(time_t currtime) { 
-              
+          std::stringstream ss;         std::stringstream ss; 
-     diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1             diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
+          ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.        ss << std::put_time(localtime(&currtime), "%Y-%m-%d %H:%M:%S"); // this is new to me.
-              
+          return ss.str();        return ss.str();
-     for (int d = 0; d <= max_distance; ++d) {             for (int d = 0; d <= max_distance; ++d) {
+         }    }
-         for (int k = -d; k <= d; k += 2) {                 for (int k = -d; k <= d; k += 2) {
+              
-             int x;                     int x;
+              
-             if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                     if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
+      std::string Directory_name_Helper(std::string Objpath){    std::string Directory_name_Helper(std::string Objpath){
-                 // Move down                         // Move down
+          std::string ans="";        std::string ans="";
-                 x = diagonals[diagonal_offset + k + 1];                         x = diagonals[diagonal_offset + k + 1];
+          ans+=Objpath[Objpath.size()-41];        ans+=Objpath[Objpath.size()-41];
-             } else {                     } else {
+          ans+=Objpath[Objpath.size()-40];        ans+=Objpath[Objpath.size()-40];
-                 // Move right                         // Move right
+          return ans;        return ans;
-                 x = diagonals[diagonal_offset + k - 1] + 1;                         x = diagonals[diagonal_offset + k - 1] + 1;
+         }    }
-             }                     }
-              
+      std::string File_name_Helper(std::string Objpath){    std::string File_name_Helper(std::string Objpath){
-             int y = x - k;  // Corresponding y-coordinate                     int y = x - k;  // Corresponding y-coordinate
+          std::string ans="";        std::string ans="";
-             while (x < n && y < m && a[x] == b[y]) {                     while (x < n && y < m && a[x] == b[y]) {
+          for(int i=Objpath.size()-1;i>=0;i--){        for(int i=Objpath.size()-1;i>=0;i--){
-                 ++x;                         ++x;
+              if(Objpath[i]=='/'){            if(Objpath[i]=='/'){
-                 ++y;                         ++y;
+                  break;                break;
-             }                     }
+              }            }
-              
+              ans+=Objpath[i];            ans+=Objpath[i];
-             diagonals[diagonal_offset + k] = x;                     diagonals[diagonal_offset + k] = x;
+          }        }
-              
+          std::string act_ans="";        std::string act_ans="";
-             // If we've reached the end of both strings                     // If we've reached the end of both strings
+          for(int i=ans.size()-1;i>=0;i--){        for(int i=ans.size()-1;i>=0;i--){
-             if (x >= n && y >= m) {                     if (x >= n && y >= m) {
+              act_ans+=ans[i];            act_ans+=ans[i];
-                 trace.push_back(diagonals);  // Store the final state                         trace.push_back(diagonals);  // Store the final state
+          }        }
-                 return d;                         return d;
+          return act_ans;        return act_ans;
-             }                     }
+         }    }
-         }                 }
+              
-         trace.push_back(diagonals);  // Store the state for this edit distance                 trace.push_back(diagonals);  // Store the state for this edit distance
+      // std::string Compressing_using_zlib(std::string content){    // std::string Compressing_using_zlib(std::string content){
-     }             }
+      //     z_stream stream;    //     z_stream stream;
-              
+      //     stream.zalloc = nullptr;    //     stream.zalloc = nullptr;
-     return -1;  // This should never happen             return -1;  // This should never happen
+      //     stream.zfree = nullptr;    //     stream.zfree = nullptr;
-    }         }
+      //     stream.opaque = nullptr;    //     stream.opaque = nullptr;
-              
+      //     stream.avail_in = content.size(); // input size    //     stream.avail_in = content.size(); // input size
-              
+      //     uLongf compressed_size = compressBound(content.size());    //     uLongf compressed_size = compressBound(content.size());
-              
+      //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og    //     stream.avail_out = compressed_size; //assuming the compressed can become 3 times of og
- std::vector<Edit> diff(const std::vector<std::string>& a,          std::vector<Edit> diff(const std::vector<std::string>& a, 
+      //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil    //     stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data())); // new for me, used copilot for this line; // input fil
-                       const std::vector<std::string>& b,                               const std::vector<std::string>& b,
+      //     Bytef* compressed_data = new Bytef[compressed_size];    //     Bytef* compressed_data = new Bytef[compressed_size];
-                       const std::vector<std::vector<int>>& trace,                               const std::vector<std::vector<int>>& trace,
+      //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type    //     stream.next_out = reinterpret_cast<unsigned char*>(compressed_data); // The output file type
-                       int d) {                               int d) {
+              
-     std::vector<Edit> result;             std::vector<Edit> result;
+      //     // intializing compression    //     // intializing compression
-     if (trace.empty() || d < 0) return result;             if (trace.empty() || d < 0) return result;
+      //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.    //     deflateInit(&stream, Z_DEFAULT_COMPRESSION); //The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). Z_DEFAULT_COMPRESSION requests a default compromise between speed and compression (currently equivalent to level 6).  // from zlib manual.
-                  
+              
-     int x = a.size(), y = b.size();             int x = a.size(), y = b.size();
+      //     // compress:    //     // compress:
-     int offset = x + y;             int offset = x + y;
+      //     deflate(&stream, Z_BEST_COMPRESSION);    //     deflate(&stream, Z_BEST_COMPRESSION);
-                  
+              
-     for (int i = d; i > 0; --i) {             for (int i = d; i > 0; --i) {
+      //     compressed_size = stream.total_out;    //     compressed_size = stream.total_out;
-         const std::vector<int>& v = trace[i];                 const std::vector<int>& v = trace[i];
+              
-         int k = x - y;                 int k = x - y;
+      //     deflateEnd(&stream);    //     deflateEnd(&stream);
-                          
+      //     std::string compressed = reinterpret_cast<const char*>(compressed_data);    //     std::string compressed = reinterpret_cast<const char*>(compressed_data);
-         bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));                 bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
+      //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data    //     delete[] compressed_data; // releasing the memory of the buffer holding the compressed data
-         int k_prev = down ? k + 1 : k - 1;                 int k_prev = down ? k + 1 : k - 1;
+      //     return compressed;    //     return compressed;
-              
+      // }    // }
-         int x_prev = v[offset + k_prev];                 int x_prev = v[offset + k_prev];
+              
-         int y_prev = x_prev - k_prev;                 int y_prev = x_prev - k_prev;
+      // refractored Compression Logic    // refractored Compression Logic
-              
+      std::string Compressing_using_zlib(std::string& content) {    std::string Compressing_using_zlib(std::string& content) {
-         while (x > x_prev && y > y_prev) {                 while (x > x_prev && y > y_prev) {
+          if (content.empty()) return "";        if (content.empty()) return "";
-             if (a[x - 1] == b[y - 1]) {                     if (a[x - 1] == b[y - 1]) {
+              
-                 result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                         result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
+          z_stream stream{};        z_stream stream{};
-             } else {                     } else {
+          stream.zalloc = nullptr;        stream.zalloc = nullptr;
-                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));                         result.push_back(Edit(Edit::DEL, a[x - 1], ""));
+          stream.zfree = nullptr;        stream.zfree = nullptr;
-                 result.push_back(Edit(Edit::INS, "", b[y - 1]));                         result.push_back(Edit(Edit::INS, "", b[y - 1]));
+          stream.opaque = nullptr;        stream.opaque = nullptr;
-             }                     }
+          stream.avail_in = static_cast<uInt>(content.size());        stream.avail_in = static_cast<uInt>(content.size());
-             --x;                     --x;
+          stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));        stream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(content.data()));
-             --y;                     --y;
+              
-         }                 }
+          if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {        if (deflateInit(&stream, Z_DEFAULT_COMPRESSION) != Z_OK) {
-              
+              throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to initialize zlib deflate.");
-         while (x > x_prev) {                 while (x > x_prev) {
+          }        }
-             result.push_back(Edit(Edit::DEL, a[x - 1], ""));                     result.push_back(Edit(Edit::DEL, a[x - 1], ""));
+              
-             --x;                     --x;
+          std::vector<unsigned char> compressedData(compressBound(content.size()));        std::vector<unsigned char> compressedData(compressBound(content.size()));
-         }                 }
+          stream.avail_out = compressedData.size();        stream.avail_out = compressedData.size();
-              
+          stream.next_out = compressedData.data();        stream.next_out = compressedData.data();
-         while (y > y_prev) {                 while (y > y_prev) {
+              
-             result.push_back(Edit(Edit::INS, "", b[y - 1]));                     result.push_back(Edit(Edit::INS, "", b[y - 1]));
+          if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {        if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
-             --y;                     --y;
+              deflateEnd(&stream);            deflateEnd(&stream);
-         }                 }
+              throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to deflate data.");
-     }             }
+          }        }
-              
+              
-     while (x > 0) {             while (x > 0) {
+          compressedData.resize(stream.total_out);        compressedData.resize(stream.total_out);
-         result.push_back(Edit(Edit::DEL, a[x - 1], ""));                 result.push_back(Edit(Edit::DEL, a[x - 1], ""));
+              
-         --x;                 --x;
+          if (deflateEnd(&stream) != Z_OK) {        if (deflateEnd(&stream) != Z_OK) {
-     }             }
+              throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");            throw std::runtime_error("ERROR::COMPRESSION:: Failed to finalize zlib deflate.");
-              
+          }        }
-     while (y > 0) {             while (y > 0) {
+              
-         result.push_back(Edit(Edit::INS, "", b[y - 1]));                 result.push_back(Edit(Edit::INS, "", b[y - 1]));
+          return std::string(compressedData.begin(), compressedData.end());        return std::string(compressedData.begin(), compressedData.end());
-         --y;                 --y;
+         }    }
-     }             }
-              
+              
-     std::reverse(result.begin(), result.end());             std::reverse(result.begin(), result.end());
+      // Author Class:    // Author Class:
-              
+      std::string Author::to_stringg(){    std::string Author::to_stringg(){
-     // for (const auto& edit : result) {             // for (const auto& edit : result) {
+          std::string thecurrTime=timeToString(time);        std::string thecurrTime=timeToString(time);
-     //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :              //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
+          return name+" <"+email+"> "+ thecurrTime;        return name+" <"+email+"> "+ thecurrTime;
-     //                                 (edit.type == Edit::INS ? "INS" : "DEL"))             //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
+         }    }
-     //             << ", Orig: " << edit.old_line             //             << ", Orig: " << edit.old_line
+              
-     //             << ", Updated: " << edit.new_line             //             << ", Updated: " << edit.new_line
+              
-     //             << std::endl;             //             << std::endl;
+      // History    // History
-     // }             // }
+      // Refs Class:    // Refs Class:
-              
+      // Constructor of Ref Class    // Constructor of Ref Class
-     return result;             return result;
+      Refs::Refs(std::string path){    Refs::Refs(std::string path){
-    }         }
+          this->path = path;        this->path = path;
-              
+         }    }
-              
+              
- // Storing diffs in file         // Storing diffs in file
+      // @return the path to the HEAD file    // @return the path to the HEAD file
- void storeDiff(const std::vector<Edit>& edits) {         void storeDiff(const std::vector<Edit>& edits) {
+      std::string Refs::HEAD_path(){    std::string Refs::HEAD_path(){
-     std::ofstream diff_file(".yeet/Diffs", std::ios::app);             std::ofstream diff_file(".yeet/Diffs", std::ios::app);
+          std::string currBranch = Helper::readFile(path+"/.yeet/Branch");        std::string currBranch = Helper::readFile(path+"/.yeet/Branch");
-     if (diff_file.is_open()) {             if (diff_file.is_open()) {
+          return path + "/.yeet/refs/heads/" + currBranch;        return path + "/.yeet/refs/heads/" + currBranch;
-         for (const auto& edit : edits) {                 for (const auto& edit : edits) {
+         }    }
-             std::string tag = (edit.type == Edit::INS) ? "+" : "-";                     std::string tag = (edit.type == Edit::INS) ? "+" : "-";
+              
-             std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                     std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
+      // TODO: Updates the HEAD file to the latest commit according to the branch    // TODO: Updates the HEAD file to the latest commit according to the branch
-             std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                     std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
+              
-             diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                     diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
+      void Refs::update_HEAD(std::string oid){    void Refs::update_HEAD(std::string oid){
-         }                 }
+          // std::cout<<path<<std::endl;        // std::cout<<path<<std::endl;
-         diff_file.close();                 diff_file.close();
+          std::ofstream headFile(HEAD_path());        std::ofstream headFile(HEAD_path());
-     } else {             } else {
+          if (headFile.is_open()) {        if (headFile.is_open()) {
-         std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;                 std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
+              headFile << oid;            headFile << oid;
-     }             }
+              headFile.close();            headFile.close();
-    }         }
+          } else {        } else {
-              
+              throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");            throw std::runtime_error("ERROR::HEADUPDATE:: Failed to open .yeet/refs/heads/ file.\n");
- namespace Branch{         namespace Branch{
+          }        }
-     void createBranch(std::string BranchName, fs::path currPath){             void createBranch(std::string BranchName, fs::path currPath){
+         }    }
-         // check if the names is valid:                 // check if the names is valid:
+              
-         if(BranchName.empty()) return;                 if(BranchName.empty()) return;
+      std::string Refs::Read_HEAD(){    std::string Refs::Read_HEAD(){
-                          
+          std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);        std::ifstream headFile(Refs::HEAD_path(),std::ios::binary);
-         std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");                 std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
+          std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.        std::string FileContent; // Becuase I am using string, It will not pick up anything after a space. I need to use getLine() function.
-              
+          if(headFile){        if(headFile){
-         if(std::regex_match(BranchName, reg)){                 if(std::regex_match(BranchName, reg)){
+              headFile>>FileContent; // All content of the file into the string            headFile>>FileContent; // All content of the file into the string
-             // invalid name of the branch                     // invalid name of the branch
+          }        }
-             std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                     std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
+          return FileContent;        return FileContent;
-             return;                     return;
+         }    }
-         }                 }
-              
+      void writeStoreinDB(std::map<std::string, std::string> Store){    void writeStoreinDB(std::map<std::string, std::string> Store){
-         std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;                 std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
+          for(auto it:Store){        for(auto it:Store){
-              
+              std::cout<<it.first<<" "<<it.second<<std::endl;            std::cout<<it.first<<" "<<it.second<<std::endl;
-         if(fs::exists(actPath)){                 if(fs::exists(actPath)){
+          }        }
-             std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                     std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
+          std::cout<<"Hello"<<std::endl;        std::cout<<"Hello"<<std::endl;
-             return;                     return;
+          std::string _actualPath = fs::current_path();        std::string _actualPath = fs::current_path();
-         }                 }
+          std::cout<<_actualPath<<std::endl;        std::cout<<_actualPath<<std::endl;
-              
+              
-         // TODO: store the current commit in the new file                 // TODO: store the current commit in the new file
+          std::ofstream StoreFile(_actualPath+"/.yeet/Store");        std::ofstream StoreFile(_actualPath+"/.yeet/Store");
-         // get the oid, update the update_HEAD function of the REfs classs. make refs object.                 // get the oid, update the update_HEAD function of the REfs classs. make refs object.
+          if(StoreFile.is_open()){        if(StoreFile.is_open()){
-         // then pass the branch name also to the function to get telll which branch it shoul upate. ig                 // then pass the branch name also to the function to get telll which branch it shoul upate. ig
+              for(auto it:Store){            for(auto it:Store){
-                          
+                  StoreFile<<it.first<<" "<<it.second<<"\n";                StoreFile<<it.first<<" "<<it.second<<"\n";
-              
+              }            }
-         // updating the head file with the latest commit.                 // updating the head file with the latest commit.
+              StoreFile.close();            StoreFile.close();
-         // putting content of the master into the new branch file.                 // putting content of the master into the new branch file.
+          }        }
-              
+              
-         // creating the new bracnh file:                 // creating the new bracnh file:
+          else {        else {
-         std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");                 std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
+              throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");            throw std::runtime_error("ERROR::STORE:: Failed to create .yeet/Store file.\n");
-              
+          }        }
-         // TODO: add option to choose the base branch                 // TODO: add option to choose the base branch
+         }    }
-         // ! Currently making the prev branch as base branch.                 // ! Currently making the prev branch as base branch.
+              
-                          
+              
-         std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);                 std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
+      // Helper Function for Listing Files:    // Helper Function for Listing Files:
-         // making the file for the new Branch and storing the prevBranch ID into it.                 // making the file for the new Branch and storing the prevBranch ID into it.
+      void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){    void ListFiles(std::string path,std::vector<std::filesystem::path>&FilePath){
-                          
+          for (const auto & entry : fs::directory_iterator(path)){        for (const auto & entry : fs::directory_iterator(path)){
-         // TODO: Test this function                 // TODO: Test this function
+              // This is my .yeetignore            // This is my .yeetignore
-         Helper::update_HEAD(CommitID_ofPrevBranch, actPath);                 Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
+              const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;            const bool IGNORE = entry.path().generic_string().find(".git") != std::string::npos || entry.path().generic_string().find(".yeet") != std::string::npos || entry.path().generic_string().find(".vscode") != std::string::npos || entry.path().generic_string().find(".xmake") != std::string::npos || entry.path().generic_string().find(".cmake") != std::string::npos || entry.path().generic_string().find("/build") != std::string::npos;
-              
+              
-         std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.                 std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
+              if(IGNORE){            if(IGNORE){
-         if(f.is_open()){                 if(f.is_open()){
+                  continue;                continue;
-             f<<CommitID_ofPrevBranch;                     f<<CommitID_ofPrevBranch;
+              }            }
-             f.close();                     f.close();
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-         }                 }
+                  ListFiles(entry.path(),FilePath);                ListFiles(entry.path(),FilePath);
-         else {                 else {
+              }             } 
-             throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                     throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
+              if(entry.is_directory()) {            if(entry.is_directory()) {
-         }                        }       
+                  continue;                continue;
-              
+              }            }
-     }             }
+              FilePath.push_back(entry);            FilePath.push_back(entry);
-     void SeeBranches(std::filesystem::path path){             void SeeBranches(std::filesystem::path path){
+          }        }
-         std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";                 std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
+         }    }
-                          
+              
-         std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;                 std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
+      std::vector<unsigned char> readFile(const std::string& filename) {    std::vector<unsigned char> readFile(const std::string& filename) {
-         int count = 1;                 int count = 1;
+          std::ifstream file(filename, std::ios::binary);        std::ifstream file(filename, std::ios::binary);
-         for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {                 for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
+          if (!file) {        if (!file) {
-             std::cout << count <<" ";                     std::cout << count <<" ";
+              std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;            std::cerr << "ERROR::READINGFILE:: Cannot open file: " << filename << std::endl;
-             std::cout << it.path().filename().string() << " ";                     std::cout << it.path().filename().string() << " ";
+              return {};            return {};
-             std::fstream ff(it.path());                     std::fstream ff(it.path());
+          }        }
-             if(ff.is_open()){                     if(ff.is_open()){
+          return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());        return std::vector<unsigned char>((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-                 std::string line;                         std::string line;
+         }    }
-                 while (std::getline(ff, line)) {                         while (std::getline(ff, line)) {
+              
-                     std::cout << line << std::endl;                             std::cout << line << std::endl;
+      std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {    std::vector<unsigned char> decompressData(const std::vector<unsigned char>& compressedData) {
-                 }                         }
+          z_stream strm = {};        z_stream strm = {};
-                 ff.close();                         ff.close();
+          strm.total_in = strm.avail_in = compressedData.size();        strm.total_in = strm.avail_in = compressedData.size();
-             }                     }
+          strm.next_in = (Bytef*)compressedData.data();        strm.next_in = (Bytef*)compressedData.data();
-             count++;                     count++;
+              
-         }                 }
+          std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size        std::vector<unsigned char> decompressedData(compressedData.size() * 2); // Start with double the input size
-              
+              
-     }             }
+          if (inflateInit(&strm) != Z_OK) {        if (inflateInit(&strm) != Z_OK) {
-              
+              std::cerr << "inflateInit failed" << std::endl;            std::cerr << "inflateInit failed" << std::endl;
-     void currBranch(std::filesystem::path currPath){             void currBranch(std::filesystem::path currPath){
+              return {};            return {};
-         std::fstream ff(currPath.string() + "/.yeet/Branch");                 std::fstream ff(currPath.string() + "/.yeet/Branch");
+          }        }
-         std::stringstream ss;                 std::stringstream ss;
+              
-         if(ff.is_open()){                 if(ff.is_open()){
+          int ret;        int ret;
-             ss << ff.rdbuf();                     ss << ff.rdbuf();
+          do {        do {
-             ff.close();                     ff.close();
+              strm.avail_out = decompressedData.size() - strm.total_out;            strm.avail_out = decompressedData.size() - strm.total_out;
-         }                 }
+              strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);            strm.next_out = (Bytef*)(decompressedData.data() + strm.total_out);
-         std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;                 std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
+              
-     }             }
+              ret = inflate(&strm, Z_NO_FLUSH);            ret = inflate(&strm, Z_NO_FLUSH);
-    }         }
-              
+              switch (ret) {            switch (ret) {
-              
+                  case Z_NEED_DICT:                case Z_NEED_DICT:
- namespace CheckOut{         namespace CheckOut{
+                  case Z_DATA_ERROR:                case Z_DATA_ERROR:
-     void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){             void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
+                  case Z_MEM_ERROR:                case Z_MEM_ERROR:
-         std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;                 std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
+                      std::cerr << "inflate error: " << ret << std::endl;                    std::cerr << "inflate error: " << ret << std::endl;
-              
+                      inflateEnd(&strm);                    inflateEnd(&strm);
-         if(fs::exists(actPath)){                 if(fs::exists(actPath)){
+                      return {};                    return {};
-             std::fstream ff(path.string() + "/.yeet/Branch");                     std::fstream ff(path.string() + "/.yeet/Branch");
+                  case Z_BUF_ERROR:                case Z_BUF_ERROR:
-             std::stringstream ss;                     std::stringstream ss;
+                  case Z_OK:                case Z_OK:
-             if(ff.is_open()){                     if(ff.is_open()){
+                      if (strm.avail_out == 0) {                    if (strm.avail_out == 0) {
-                 ss << ff.rdbuf();                         ss << ff.rdbuf();
+                          // Output buffer is full, increase its size                        // Output buffer is full, increase its size
-                 std::cout<<ss.str()<<std::endl;                         std::cout<<ss.str()<<std::endl;
+                          decompressedData.resize(decompressedData.size() * 2);                        decompressedData.resize(decompressedData.size() * 2);
-                 if(ss.str() == swtichToBranchName){                         if(ss.str() == swtichToBranchName){
+                      }                    }
-                     std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                             std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
+                      break;                    break;
-                     return;                             return;
+              }            }
-                 }                         }
+          } while (ret != Z_STREAM_END);        } while (ret != Z_STREAM_END);
-                 ff << swtichToBranchName;                          ff << swtichToBranchName; 
+              
-                 ff.close();                         ff.close();
+          inflateEnd(&strm);        inflateEnd(&strm);
-                 std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                         std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
+          decompressedData.resize(strm.total_out); // Resize to actual decompressed size        decompressedData.resize(strm.total_out); // Resize to actual decompressed size
-             }                     }
+          return decompressedData;        return decompressedData;
-              
+         }    }
-         }                 }
+              
-         else{                 else{
+      std::string Inflate(std::string path){    std::string Inflate(std::string path){
-             std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                     std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
+              
-             return;                     return;
+          std::string inputFilename = path;         std::string inputFilename = path; 
-         }                 }
+          std::string response = "";        std::string response = "";
-     }             }
+              
-    }         }
+          auto compressedData = readFile(inputFilename);        auto compressedData = readFile(inputFilename);
-              
+          if (compressedData.empty()) return "Error in compressed data";        if (compressedData.empty()) return "Error in compressed data";
- namespace CommitHelper{         namespace CommitHelper{
+              
-     void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){             void YeetStatus(std::string path, std::vector<std::filesystem::path>& FilesWithChanges){
+          auto decompressedData = decompressData(compressedData);        auto decompressedData = decompressData(compressedData);
-              
+          if (decompressedData.empty()) return "Error in decompresssion";        if (decompressedData.empty()) return "Error in decompresssion";
-         std::vector<std::filesystem::path>FilePath;                 std::vector<std::filesystem::path>FilePath;
+              
-                  
+          for(auto it:decompressedData){        for(auto it:decompressedData){
-         // Getting list of all files                 // Getting list of all files
+              response+=it;            response+=it;
-         ListFiles(path,FilePath);                 ListFiles(path,FilePath);
+          }        }
-                  
+              
-         // Making a visited map for later                 // Making a visited map for later
+          return response;        return response;
-         std::unordered_map<std::filesystem::path, bool> visited;                 std::unordered_map<std::filesystem::path, bool> visited;
+         }    }
-         for(auto it:FilePath){                 for(auto it:FilePath){
+              
-             visited[it] = false;                     visited[it] = false;
+      // Diffs Algo    // Diffs Algo
-         }                 }
+              
-                          
+      // A function to convert a string to differnt lines. like a vector of strings    // A function to convert a string to differnt lines. like a vector of strings
-         int Totaladditions,Totaldeletions;                 int Totaladditions,Totaldeletions;
+      std::vector<std::string> splitIntoLines(const std::string& str) {    std::vector<std::string> splitIntoLines(const std::string& str) {
-         Totaladditions = 0, Totaldeletions = 0;                 Totaladditions = 0, Totaldeletions = 0;
+          std::vector<std::string> lines;        std::vector<std::string> lines;
-                  
+          std::string temp;        std::string temp;
-         std::string StoreData;                 std::string StoreData;
+          for (char c : str) {        for (char c : str) {
-         std::fstream Store(path+"/.yeet/Store");                 std::fstream Store(path+"/.yeet/Store");
+              if (c == '\n') {            if (c == '\n') {
-                  
+                  lines.push_back(temp);                lines.push_back(temp);
-         // Putting content of the Store file in the string StoreData                 // Putting content of the Store file in the string StoreData
+                  temp.clear();                temp.clear();
-         if(Store.is_open()){                 if(Store.is_open()){
+              } else {            } else {
-             std::string line;                     std::string line;
+                  temp += c;                temp += c;
-             while (std::getline(Store, line)) {                     while (std::getline(Store, line)) {
+              }            }
-                 StoreData += line + "\n";                         StoreData += line + "\n";
+          }        }
-             }                     }
+          if (!temp.empty()) {        if (!temp.empty()) {
-             Store.close();                     Store.close();
+              lines.push_back(temp);            lines.push_back(temp);
-         }                 }
+          }        }
-         else{                 else{
+          return lines;        return lines;
-             std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;                     std::cout<<"ERROR::STATUS::Error in opening Store File"<<std::endl;
+         }    }
-         }                 }
+              
-                  
+      int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b,     int Shortest_Edit_Search(const std::vector<std::string>& a, const std::vector<std::string>& b, 
-         if(StoreData == "Empty Store"){                 if(StoreData == "Empty Store"){
+                               std::vector<std::vector<int>>& trace) {                             std::vector<std::vector<int>>& trace) {
-             std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;                     std::cout<<"ERROR::STATUS::Nothing to Compare to. Make your first commit!!"<<std::endl;
+          int n = a.size(), m = b.size();        int n = a.size(), m = b.size();
-             return ;                     return ;
+          if (n == 0) return m;  // All insertions if `a` is empty        if (n == 0) return m;  // All insertions if `a` is empty
-         }                 }
+          if (m == 0) return n;  // All deletions if `b` is empty        if (m == 0) return n;  // All deletions if `b` is empty
-                  
+              
-         bool space = false;                 bool space = false;
+          int max_distance = n + m;        int max_distance = n + m;
-         std::string PathofFile, oid;                 std::string PathofFile, oid;
+          int diagonal_offset = max_distance;  // To shift diagonals into the array        int diagonal_offset = max_distance;  // To shift diagonals into the array
-         PathofFile = ""; oid = "";                 PathofFile = ""; oid = "";
+          std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal        std::vector<int> diagonals(2 * max_distance + 1, -1);  // Track edit points for each diagonal
-         std::vector<std::string> FilePaths;                 std::vector<std::string> FilePaths;
+          trace.clear();        trace.clear();
-         std::vector<std::string> oids;                 std::vector<std::string> oids;
+              
-         for(int i=0;i<StoreData.size();i++){                  for(int i=0;i<StoreData.size();i++){ 
+          diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1        diagonals[diagonal_offset + 1] = 0;  // Initialize diagonal k=1
-             if(StoreData[i] == ' '){                     if(StoreData[i] == ' '){
+              
-                 FilePaths.push_back(PathofFile);                         FilePaths.push_back(PathofFile);
+          for (int d = 0; d <= max_distance; ++d) {        for (int d = 0; d <= max_distance; ++d) {
-                 PathofFile = "";                         PathofFile = "";
+              for (int k = -d; k <= d; k += 2) {            for (int k = -d; k <= d; k += 2) {
-                 space = !space; continue;                         space = !space; continue;
+                  int x;                int x;
-             }                            }       
+                  if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {                if (k == -d || (k != d && diagonals[diagonal_offset + k - 1] < diagonals[diagonal_offset + k + 1])) {
-                  
+                      // Move down                    // Move down
-             if(StoreData[i] == '\n'){                     if(StoreData[i] == '\n'){
+                      x = diagonals[diagonal_offset + k + 1];                    x = diagonals[diagonal_offset + k + 1];
-                 oids.push_back(oid);                         oids.push_back(oid);
+                  } else {                } else {
-                 oid = "";                         oid = "";
+                      // Move right                    // Move right
-                 space = !space; continue;                         space = !space; continue;
+                      x = diagonals[diagonal_offset + k - 1] + 1;                    x = diagonals[diagonal_offset + k - 1] + 1;
-             }                          }     
+                  }                }
-                                  
+              
-             if(!space){                     if(!space){
+                  int y = x - k;  // Corresponding y-coordinate                int y = x - k;  // Corresponding y-coordinate
-                 PathofFile += StoreData[i];                         PathofFile += StoreData[i];
+                  while (x < n && y < m && a[x] == b[y]) {                while (x < n && y < m && a[x] == b[y]) {
-             }                     }
+                      ++x;                    ++x;
-             else{                     else{
+                      ++y;                    ++y;
-                 oid += StoreData[i];                         oid += StoreData[i];
-             }             }                }
+              
-         }                 }
+                  diagonals[diagonal_offset + k] = x;                diagonals[diagonal_offset + k] = x;
-                  
+              
-         // Main Loop                 // Main Loop
+                  // If we've reached the end of both strings                // If we've reached the end of both strings
-         for(int i=0;i<oids.size();i++){                 for(int i=0;i<oids.size();i++){
+                  if (x >= n && y >= m) {                if (x >= n && y >= m) {
-                  
+                      trace.push_back(diagonals);  // Store the final state                    trace.push_back(diagonals);  // Store the final state
-             int additions,deletions;                     int additions,deletions;
+                      return d;                    return d;
-             additions = 0, deletions = 0;                     additions = 0, deletions = 0;
+                  }                }
-             std::string thePathOfOid = "";                     std::string thePathOfOid = "";
+              }            }
-             std::string fileName = oids[i].substr(2, oids[i].size() - 2);                      std::string fileName = oids[i].substr(2, oids[i].size() - 2); 
+              trace.push_back(diagonals);  // Store the state for this edit distance            trace.push_back(diagonals);  // Store the state for this edit distance
-             thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;                     thePathOfOid = oids[i].substr(0, 2) + "/" + fileName;
+          }        }
-                  
+              
-             std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;                     std::string FullPath = path + "/.yeet/objects/" + thePathOfOid;
+          return -1;  // This should never happen        return -1;  // This should never happen
-                  
+         }    }
-             std::string InflatedContent = Inflate(FullPath);                     std::string InflatedContent = Inflate(FullPath);
+              
-                  
+              
-             if (std::filesystem::exists(FilePaths[i])) {                     if (std::filesystem::exists(FilePaths[i])) {
+              
-                 std::string NewFileContent="";                         std::string NewFileContent="";
+      std::vector<Edit> diff(const std::vector<std::string>& a,     std::vector<Edit> diff(const std::vector<std::string>& a, 
-                 std::ifstream NowFile(FilePaths[i]);                         std::ifstream NowFile(FilePaths[i]);
+                            const std::vector<std::string>& b,                          const std::vector<std::string>& b,
-                  
+                            const std::vector<std::vector<int>>& trace,                          const std::vector<std::vector<int>>& trace,
-                 if(NowFile.is_open()){                         if(NowFile.is_open()){
+                            int d) {                          int d) {
-                     std::string line;                             std::string line;
+          std::vector<Edit> result;        std::vector<Edit> result;
-                     while(std::getline(NowFile,line)){                             while(std::getline(NowFile,line)){
+          if (trace.empty() || d < 0) return result;        if (trace.empty() || d < 0) return result;
-                         NewFileContent+=line+"\n";                                 NewFileContent+=line+"\n";
+                  
-                     }                             }
+          int x = a.size(), y = b.size();        int x = a.size(), y = b.size();
-                     NowFile.close();                             NowFile.close();
+          int offset = x + y;        int offset = x + y;
-                 }                         }
-                  
+          for (int i = d; i > 0; --i) {        for (int i = d; i > 0; --i) {
-                 // Call Diffs algo here                         // Call Diffs algo here
+              const std::vector<int>& v = trace[i];            const std::vector<int>& v = trace[i];
-                 std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);                         std::vector<std::string> NewFileinLines = splitIntoLines(NewFileContent);
+              int k = x - y;            int k = x - y;
-                 std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);                         std::vector<std::string> OldFileinLines = splitIntoLines(InflatedContent);
+                          
-                  
+              bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));            bool down = (k == -i || (k != i && v[offset + k - 1] < v[offset + k + 1]));
-                 std::vector<std::vector<int>> trace;                         std::vector<std::vector<int>> trace;
+              int k_prev = down ? k + 1 : k - 1;            int k_prev = down ? k + 1 : k - 1;
-                 int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace);                          int ans = Shortest_Edit_Search(NewFileinLines, OldFileinLines, trace); 
+              
-                  
+              int x_prev = v[offset + k_prev];            int x_prev = v[offset + k_prev];
-                 // std::cout<<ans<<std::endl;                         // std::cout<<ans<<std::endl;
+              int y_prev = x_prev - k_prev;            int y_prev = x_prev - k_prev;
-                 if(ans==0) {                         if(ans==0) {
+              
-                     // TODO: Don't add in commit                             // TODO: Don't add in commit
+              while (x > x_prev && y > y_prev) {            while (x > x_prev && y > y_prev) {
-                     // std::cout<<"Files are identical."<<std::endl;                             // std::cout<<"Files are identical."<<std::endl;
+                  if (a[x - 1] == b[y - 1]) {                if (a[x - 1] == b[y - 1]) {
-                     continue;                             continue;
+                      result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));                    result.push_back(Edit(Edit::EQL, a[x - 1], b[y - 1]));
-                 }                                     }            
+                  } else {                } else {
-                                          
+                      result.push_back(Edit(Edit::DEL, a[x - 1], ""));                    result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);                         std::vector<Edit> diff_result = diff(OldFileinLines, NewFileinLines, trace, ans);
+                      result.push_back(Edit(Edit::INS, "", b[y - 1]));                    result.push_back(Edit(Edit::INS, "", b[y - 1]));
-                  
+                  }                }
-                 for(auto it:diff_result){                         for(auto it:diff_result){
+                  --x;                --x;
-                                                  
+                  --y;                --y;
-                     // TODO: Add number of lines.                             // TODO: Add number of lines.
+              }            }
-                     if(it.type == Edit::DEL) {                             if(it.type == Edit::DEL) {
+              
-                         deletions++;                                 deletions++;
+              while (x > x_prev) {            while (x > x_prev) {
-                         Totaldeletions++;                                 Totaldeletions++;
+                  result.push_back(Edit(Edit::DEL, a[x - 1], ""));                result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                     }                             }
+                  --x;                --x;
-                     else if(it.type == Edit::INS) {                             else if(it.type == Edit::INS) {
+              }            }
-                         additions++;                                 additions++;
+              
-                         Totaladditions++;                                 Totaladditions++;
+              while (y > y_prev) {            while (y > y_prev) {
-                     }                             }
+                  result.push_back(Edit(Edit::INS, "", b[y - 1]));                result.push_back(Edit(Edit::INS, "", b[y - 1]));
-                 }                         }
+                  --y;                --y;
-                  
+              }            }
-                 // Don't print exec file diffs.                         // Don't print exec file diffs.
+          }        }
-                  
+              
-                 // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.                         // TODO: Check exe using this method. ie using cpp filesystem library, it's cross platform the access function only works in linux.
+          while (x > 0) {        while (x > 0) {
-                 // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )                         // if(std::filesystem::status(FilePath[i].c_str()).permissions() & std::filesystem::perms::owner_exec )
+              result.push_back(Edit(Edit::DEL, a[x - 1], ""));            result.push_back(Edit(Edit::DEL, a[x - 1], ""));
-                 if(! access (FilePaths[i].c_str(), X_OK)){                         if(! access (FilePaths[i].c_str(), X_OK)){
+              --x;            --x;
-                     continue;                             continue;
+          }        }
-                 }                         }
+              
-                  
+          while (y > 0) {        while (y > 0) {
-                 // don't show file if nothing changed                         // don't show file if nothing changed
+              result.push_back(Edit(Edit::INS, "", b[y - 1]));            result.push_back(Edit(Edit::INS, "", b[y - 1]));
-                 if(additions == 0 && deletions == 0){                         if(additions == 0 && deletions == 0){
+              --y;            --y;
-                     continue;                             continue;
+          }        }
-                 }                         }
+              
-                  
+          std::reverse(result.begin(), result.end());        std::reverse(result.begin(), result.end());
-                 FilesWithChanges.push_back(FilePaths[i]);                         FilesWithChanges.push_back(FilePaths[i]);
+              
-             }                     }
+          // for (const auto& edit : result) {        // for (const auto& edit : result) {
-         }                 }
+          //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" :         //     std::cout << "Edit Type: " << (edit.type == Edit::EQL ? "EQL" : 
-     }             }
+          //                                 (edit.type == Edit::INS ? "INS" : "DEL"))        //                                 (edit.type == Edit::INS ? "INS" : "DEL"))
-              
-    }         }
+          //             << ", Orig: " << edit.old_line        //             << ", Orig: " << edit.old_line
+          //             << ", Updated: " << edit.new_line        //             << ", Updated: " << edit.new_line
+          //             << std::endl;        //             << std::endl;
+          // }        // }
+              
+          return result;        return result;
+         }    }
+              
+              
+      // Storing diffs in file    // Storing diffs in file
+      void storeDiff(const std::vector<Edit>& edits) {    void storeDiff(const std::vector<Edit>& edits) {
+          std::ofstream diff_file(".yeet/Diffs", std::ios::app);        std::ofstream diff_file(".yeet/Diffs", std::ios::app);
+          if (diff_file.is_open()) {        if (diff_file.is_open()) {
+              for (const auto& edit : edits) {            for (const auto& edit : edits) {
+                  std::string tag = (edit.type == Edit::INS) ? "+" : "-";                std::string tag = (edit.type == Edit::INS) ? "+" : "-";
+                  std::string old_line = edit.old_line.empty() ? "" : edit.old_line;                std::string old_line = edit.old_line.empty() ? "" : edit.old_line;
+                  std::string new_line = edit.new_line.empty() ? "" : edit.new_line;                std::string new_line = edit.new_line.empty() ? "" : edit.new_line;
+                  diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;                diff_file << tag << " " << std::setw(4) << old_line << " " << std::setw(4) << new_line << "    " << (old_line.empty() ? new_line : old_line) << std::endl;
+              }            }
+              diff_file.close();            diff_file.close();
+          } else {        } else {
+              std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;            std::cerr << "ERROR::DIFFS:: Unable to open file for writing diffs" << std::endl;
+          }        }
+         }    }
+              
+      namespace Branch{    namespace Branch{
+          void createBranch(std::string BranchName, fs::path currPath){        void createBranch(std::string BranchName, fs::path currPath){
+              // check if the names is valid:            // check if the names is valid:
+              if(BranchName.empty()) return;            if(BranchName.empty()) return;
+                          
+              std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");            std::regex reg(R"(^\.|\/\.|\.\.|\/$|\.lock$|@\{|[\x00-\x20*:?\[\\^~\x7f])");
+              
+              if(std::regex_match(BranchName, reg)){            if(std::regex_match(BranchName, reg)){
+                  // invalid name of the branch                // invalid name of the branch
+                  std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;                std::cout<<"ERROR::BRANCH:: Invalid name of the Branch"<<std::endl;
+                  return;                return;
+              }            }
+              
+              std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;            std::string actPath = currPath.string() + "/.yeet/refs/heads/" + BranchName;
+              
+              if(fs::exists(actPath)){            if(fs::exists(actPath)){
+                  std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:: Branch with this name already exists"<<std::endl;
+                  return;                return;
+              }            }
+              
+              // TODO: store the current commit in the new file            // TODO: store the current commit in the new file
+              // get the oid, update the update_HEAD function of the REfs classs. make refs object.            // get the oid, update the update_HEAD function of the REfs classs. make refs object.
+              // then pass the branch name also to the function to get telll which branch it shoul upate. ig            // then pass the branch name also to the function to get telll which branch it shoul upate. ig
+                          
+              
+              // updating the head file with the latest commit.            // updating the head file with the latest commit.
+              // putting content of the master into the new branch file.            // putting content of the master into the new branch file.
+              
+              // creating the new bracnh file:            // creating the new bracnh file:
+              std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");            std::string PrevBranch = Helper::readFile(currPath.string()+"/.yeet/Branch");
+              
+              // TODO: add option to choose the base branch            // TODO: add option to choose the base branch
+              // ! Currently making the prev branch as base branch.            // ! Currently making the prev branch as base branch.
+                          
+              std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);            std::string CommitID_ofPrevBranch = Helper::readFile(currPath.string()+"/.yeet/refs/heads/" + PrevBranch);
+              // making the file for the new Branch and storing the prevBranch ID into it.            // making the file for the new Branch and storing the prevBranch ID into it.
+                          
+              // TODO: Test this function            // TODO: Test this function
+              Helper::update_HEAD(CommitID_ofPrevBranch, actPath);            Helper::update_HEAD(CommitID_ofPrevBranch, actPath);
+              
+              std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.            std::ofstream f(actPath); // fstream is not capable of making new file, so use ofstream instead.
+              if(f.is_open()){            if(f.is_open()){
+                  f<<CommitID_ofPrevBranch;                f<<CommitID_ofPrevBranch;
+                  f.close();                f.close();
+              }            }
+              else {            else {
+                  throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");                throw std::runtime_error("ERROR::BRANCH:: Failed to create new Branch file.\n");
+              }                   }       
+              
+          }        }
+          void SeeBranches(std::filesystem::path path){        void SeeBranches(std::filesystem::path path){
+              std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";            std::filesystem::path BranchesDir= path.string() + "/.yeet/refs/heads";
+                          
+              std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;            std::cout<<"BRANCH:: Your branches are: "<<std::endl<<std::endl;
+              int count = 1;            int count = 1;
+              for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {            for (const auto& it : std::filesystem::directory_iterator(BranchesDir)) {
+                  std::cout << count <<" ";                std::cout << count <<" ";
+                  std::cout << it.path().filename().string() << " ";                std::cout << it.path().filename().string() << " ";
+                  std::fstream ff(it.path());                std::fstream ff(it.path());
+                  if(ff.is_open()){                if(ff.is_open()){
+                      std::string line;                    std::string line;
+                      while (std::getline(ff, line)) {                    while (std::getline(ff, line)) {
+                          std::cout << line << std::endl;                        std::cout << line << std::endl;
+                      }                    }
+                      ff.close();                    ff.close();
+                  }                }
+                  count++;                count++;
+              }            }
+              
+          }        }
+              
+          void currBranch(std::filesystem::path currPath){        void currBranch(std::filesystem::path currPath){
+              std::fstream ff(currPath.string() + "/.yeet/Branch");            std::fstream ff(currPath.string() + "/.yeet/Branch");
+              std::stringstream ss;            std::stringstream ss;
+              if(ff.is_open()){            if(ff.is_open()){
+                  ss << ff.rdbuf();                ss << ff.rdbuf();
+                  ff.close();                ff.close();
+              }            }
+              std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;            std::cout<<"BRANCH:: Your Current Branch is: "<<ss.str()<<std::endl;
+          }        }
+         }    }
+              
+              
+      namespace CheckOut{    namespace CheckOut{
+          void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){        void SwitchBranch(std::filesystem::path path, std::string swtichToBranchName){
+              std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;            std::string actPath = path.string() + "/.yeet/refs/heads/" + swtichToBranchName;
+              
+              if(fs::exists(actPath)){            if(fs::exists(actPath)){
+                  std::fstream ff(path.string() + "/.yeet/Branch");                std::fstream ff(path.string() + "/.yeet/Branch");
+                  std::stringstream ss;                std::stringstream ss;
+                  if(ff.is_open()){                if(ff.is_open()){
+                      ss << ff.rdbuf();                    ss << ff.rdbuf();
+                      std::cout<<ss.str()<<std::endl;                    std::cout<<ss.str()<<std::endl;
+                      if(ss.str() == swtichToBranchName){                    if(ss.str() == swtichToBranchName){
+                          std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;                        std::cout<<"CHECKOUT::Already in the branch "<<swtichToBranchName<<std::endl;
+                          return;                        return;
+                      }                    }
+                      ff << swtichToBranchName;                     ff << swtichToBranchName; 
+                      ff.close();                    ff.close();
+                      std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;                    std::cout<<"CHECKOUT::Successfully Change the branch to: "<<swtichToBranchName<<std::endl;
+                  }                }
+              
+              }            }
+              else{            else{
+                  std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;                std::cout<<"ERROR::BRANCH:::: Branch with this name already exists"<<std::endl;
+                  return;                return;
+              }            }
+          }        }
+         }    }
+              
